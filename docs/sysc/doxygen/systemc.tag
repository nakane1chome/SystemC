<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>sc_buffer.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00002</filename>
    <includes id="a00056" name="sc_signal.h" local="yes" imported="no">sysc/communication/sc_signal.h</includes>
    <class kind="class">sc_core::sc_buffer</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_clock.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00005</filename>
    <includes id="a00269" name="sc_module.h" local="yes" imported="no">sysc/kernel/sc_module.h</includes>
    <includes id="a00056" name="sc_signal.h" local="yes" imported="no">sysc/communication/sc_signal.h</includes>
    <includes id="a00341" name="sc_trace.h" local="yes" imported="no">sysc/tracing/sc_trace.h</includes>
    <class kind="class">sc_core::sc_clock</class>
    <class kind="class">sc_core::sc_clock_posedge_callback</class>
    <class kind="class">sc_core::sc_clock_negedge_callback</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_clock_ports.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00008</filename>
    <includes id="a00062" name="sc_signal_ports.h" local="yes" imported="no">sysc/communication/sc_signal_ports.h</includes>
    <namespace>sc_core</namespace>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>sc_in_clk</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af5208f532b3924703b4e2dd0bd2a42c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>sc_inout_clk</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a54aa71ddcb9b5c69dc49805ffd16f432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_out&lt; bool &gt;</type>
      <name>sc_out_clk</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5c45cffaf8b2cf0d5bbb2c0f7def6991</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_communication_ids.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00011</filename>
    <includes id="a00377" name="sc_report.h" local="yes" imported="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a9c92186cb20ea1732c1b3e79c9c506c8</anchor>
      <arglist>(SC_ID_PORT_OUTSIDE_MODULE_, 100, &quot;port specified outside of module&quot;) SC_DEFINE_MESSAGE(SC_ID_CLOCK_PERIOD_ZERO_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8ca2af6dfc1b01fba7f6ed1cf3c7e813</anchor>
      <arglist>(SC_ID_CLOCK_HIGH_TIME_ZERO_, 102, &quot;sc_clock high time is zero&quot;) SC_DEFINE_MESSAGE(SC_ID_CLOCK_LOW_TIME_ZERO_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2f2255ffaf13814ea7d5651dbb94e753</anchor>
      <arglist>(SC_ID_MORE_THAN_ONE_FIFO_READER_, 104, &quot;sc_fifo&lt;T&gt; cannot have more than one reader&quot;) SC_DEFINE_MESSAGE(SC_ID_MORE_THAN_ONE_FIFO_WRITER_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a69a2ac48bcab844ca1237b13c8a72322</anchor>
      <arglist>(SC_ID_INVALID_FIFO_SIZE_, 106, &quot;sc_fifo&lt;T&gt; must have a size of at least 1&quot;) SC_DEFINE_MESSAGE(SC_ID_BIND_IF_TO_PORT_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a5a49184cf0452689ab2f31ca700d9d7a</anchor>
      <arglist>(SC_ID_BIND_PORT_TO_PORT_, 108, &quot;bind parent port to port failed&quot;) SC_DEFINE_MESSAGE(SC_ID_COMPLETE_BINDING_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a5762f6e82868691f820c6e5a70a124dd</anchor>
      <arglist>(SC_ID_INSERT_PORT_, 110, &quot;insert port failed&quot;) SC_DEFINE_MESSAGE(SC_ID_REMOVE_PORT_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed remove port failed</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a0ad22138930b714786faf2fe8ee25f70</anchor>
      <arglist>(SC_ID_GET_IF_, 112, &quot;get interface failed&quot;) SC_DEFINE_MESSAGE(SC_ID_INSERT_PRIM_CHANNEL_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed remove port failed insert primitive channel failed</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a196bd56b5ed6a5528c0b6cca8db084fb</anchor>
      <arglist>(SC_ID_REMOVE_PRIM_CHANNEL_, 114, &quot;remove primitive channel failed&quot;) SC_DEFINE_MESSAGE(SC_ID_MORE_THAN_ONE_SIGNAL_DRIVER_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed remove port failed insert primitive channel failed sc_signal&lt; T &gt; cannot have more than one driver</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8a95c68ea37ae42c916d3606ef423083</anchor>
      <arglist>(SC_ID_NO_DEFAULT_EVENT_, 116, &quot;channel doesn&apos;t have a default event&quot;) SC_DEFINE_MESSAGE(SC_ID_RESOLVED_PORT_NOT_BOUND_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed remove port failed insert primitive channel failed sc_signal&lt; T &gt; cannot have more than one driver resolved port not bound to resolved signal</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a446a21d8be29856cd1e0ac2ed3dd2cc5</anchor>
      <arglist>(SC_ID_FIND_EVENT_, 118, &quot;find event failed&quot;) SC_DEFINE_MESSAGE(SC_ID_INVALID_SEMAPHORE_VALUE_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed remove port failed insert primitive channel failed sc_signal&lt; T &gt; cannot have more than one driver resolved port not bound to resolved signal sc_semaphore requires an initial sc_export not registered</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a26d7656fe66e4e1ecbc3b8cc316d73b1</anchor>
      <arglist>(SC_ID_SC_EXPORT_NOT_BOUND_AFTER_CONSTRUCTION_, 124, &quot;sc_export instance not bound to interface at end of construction&quot;) SC_DEFINE_MESSAGE(SC_ID_ATTEMPT_TO_WRITE_TO_CLOCK_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed remove port failed insert primitive channel failed sc_signal&lt; T &gt; cannot have more than one driver resolved port not bound to resolved signal sc_semaphore requires an initial sc_export not registered attempt to write the value of an sc_clock instance</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3e3666a310faac343c13c5d9f4513fed</anchor>
      <arglist>(SC_ID_SC_EXPORT_ALREADY_BOUND_, 126, &quot;sc_export instance already bound&quot;) SC_DEFINE_MESSAGE(SC_ID_OPERATION_ON_NON_SPECIALIZED_SIGNAL_</arglist>
    </member>
    <member kind="function">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed remove port failed insert primitive channel failed sc_signal&lt; T &gt; cannot have more than one driver resolved port not bound to resolved signal sc_semaphore requires an initial sc_export not registered attempt to write the value of an sc_clock instance attempted specalized signal operation on non specialized signal</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a31175e52428d7be1861de9f0856f6c13</anchor>
      <arglist>(SC_ID_ATTEMPT_TO_BIND_CLOCK_TO_OUTPUT_, 128, &quot;attempted to bind sc_clock instance to sc_inout or sc_out&quot;) SC_DEFINE_MESSAGE(SC_ID_NO_ASYNC_UPDATE_</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_REGISTER_ID_FAILED_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab183a60857b8bd816e9d26cad6403498</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>sc_clock period is zero sc_clock low time is zero sc_fifo&lt; T &gt; cannot have more than one writer bind interface to port failed complete binding failed remove port failed insert primitive channel failed sc_signal&lt; T &gt; cannot have more than one driver resolved port not bound to resolved signal sc_semaphore requires an initial</type>
      <name>value</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8ee29bf4d5892db299bc4ed81d3ace7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_event_finder.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00014</filename>
    <includes id="a00044" name="sc_port.h" local="yes" imported="no">sysc/communication/sc_port.h</includes>
    <class kind="class">sc_core::sc_event_finder</class>
    <class kind="class">sc_core::sc_event_finder_t</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_event_queue.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00017</filename>
    <includes id="a00035" name="sc_interface.h" local="yes" imported="no">sysc/communication/sc_interface.h</includes>
    <includes id="a00269" name="sc_module.h" local="yes" imported="no">sysc/kernel/sc_module.h</includes>
    <includes id="a00248" name="sc_event.h" local="yes" imported="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00044" name="sc_port.h" local="yes" imported="no">sysc/communication/sc_port.h</includes>
    <class kind="class">sc_core::sc_event_queue_if</class>
    <class kind="class">sc_core::sc_event_queue</class>
    <namespace>sc_core</namespace>
    <member kind="typedef">
      <type>sc_port&lt; sc_event_queue_if, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>sc_event_queue_port</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ace3b678568fd0551232ea189d8bad734</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_export.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00020</filename>
    <includes id="a00011" name="sc_communication_ids.h" local="yes" imported="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00035" name="sc_interface.h" local="yes" imported="no">sysc/communication/sc_interface.h</includes>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <class kind="class">sc_core::sc_export_base</class>
    <class kind="class">sc_core::sc_export</class>
    <class kind="class">sc_core::sc_export_registry</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_VIRTUAL_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a466f5704d1009220cf98a922ea022613</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fifo.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00023</filename>
    <includes id="a00011" name="sc_communication_ids.h" local="yes" imported="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00047" name="sc_prim_channel.h" local="yes" imported="no">sysc/communication/sc_prim_channel.h</includes>
    <includes id="a00026" name="sc_fifo_ifs.h" local="yes" imported="no">sysc/communication/sc_fifo_ifs.h</includes>
    <includes id="a00248" name="sc_event.h" local="yes" imported="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00341" name="sc_trace.h" local="yes" imported="no">sysc/tracing/sc_trace.h</includes>
    <class kind="class">sc_core::sc_fifo</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a239555553fc6f94ec58b1bd383819dee</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fifo&lt; T &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fifo_ifs.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00026</filename>
    <includes id="a00035" name="sc_interface.h" local="yes" imported="no">sysc/communication/sc_interface.h</includes>
    <class kind="class">sc_core::sc_fifo_nonblocking_in_if</class>
    <class kind="class">sc_core::sc_fifo_blocking_in_if</class>
    <class kind="class">sc_core::sc_fifo_in_if</class>
    <class kind="class">sc_core::sc_fifo_nonblocking_out_if</class>
    <class kind="class">sc_core::sc_fifo_blocking_out_if</class>
    <class kind="class">sc_core::sc_fifo_out_if</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_fifo_ports.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00029</filename>
    <includes id="a00044" name="sc_port.h" local="yes" imported="no">sysc/communication/sc_port.h</includes>
    <includes id="a00026" name="sc_fifo_ifs.h" local="yes" imported="no">sysc/communication/sc_fifo_ifs.h</includes>
    <class kind="class">sc_core::sc_fifo_in</class>
    <class kind="class">sc_core::sc_fifo_out</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_host_mutex.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00032</filename>
    <includes id="a00224" name="sc_cmnhdr.h" local="yes" imported="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00041" name="sc_mutex_if.h" local="yes" imported="no">sysc/communication/sc_mutex_if.h</includes>
    <class kind="class">sc_core::sc_host_mutex</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_INCLUDE_WINDOWS_H</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1fde6f004a35ef2819cc46c74ba5b01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MTX_TYPE_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aaa9f2f41c5897d3ead86265c1e35ede4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_PTHREAD_NULL_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a659b5a2ec193e679ba3dc2e0252bfbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MTX_INIT_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a743b1becf011ce48313cb9f4def32d7c</anchor>
      <arglist>(Mutex)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MTX_LOCK_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac783e82e477bce44f45e20807cbb115e</anchor>
      <arglist>(Mutex)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MTX_UNLOCK_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa214cefbe7ee2bf0472fab1d7a046f03</anchor>
      <arglist>(Mutex)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MTX_TRYLOCK_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afffeed8a6146afa6f08b8f16e9451a87</anchor>
      <arglist>(Mutex)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MTX_DESTROY_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a77052b8584ba858d76e0c8ad00536552</anchor>
      <arglist>(Mutex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_interface.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00035</filename>
    <class kind="class">sc_core::sc_interface</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_mutex.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00038</filename>
    <includes id="a00248" name="sc_event.h" local="yes" imported="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00335" name="sc_wait.h" local="yes" imported="no">sysc/kernel/sc_wait.h</includes>
    <includes id="a00041" name="sc_mutex_if.h" local="yes" imported="no">sysc/communication/sc_mutex_if.h</includes>
    <class kind="class">sc_core::sc_mutex</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_mutex_if.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00041</filename>
    <includes id="a00035" name="sc_interface.h" local="yes" imported="no">sysc/communication/sc_interface.h</includes>
    <class kind="class">sc_core::sc_mutex_if</class>
    <class kind="class">sc_core::sc_scoped_lock</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_port.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00044</filename>
    <includes id="a00011" name="sc_communication_ids.h" local="yes" imported="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00035" name="sc_interface.h" local="yes" imported="no">sysc/communication/sc_interface.h</includes>
    <includes id="a00248" name="sc_event.h" local="yes" imported="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <class kind="class">sc_core::sc_port_base</class>
    <class kind="class">sc_core::sc_port_registry</class>
    <class kind="class">sc_core::sc_port_b</class>
    <class kind="class">sc_core::sc_port</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_VIRTUAL_</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a466f5704d1009220cf98a922ea022613</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_port_policy</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ONE_OR_MORE_BOUND</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9ebae5eac58d624fbaafa84db6b644cdea0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ZERO_OR_MORE_BOUND</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9ebaa88a02b59f165cc6c7526bd7322a68fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ALL_BOUND</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9eba50b2c6de5b4b9d719beb54cf213ff205</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_warn_port_constructor</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa5b6b7aa881c30abca8d17124b4ed9be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_prim_channel.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00047</filename>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00335" name="sc_wait.h" local="yes" imported="no">sysc/kernel/sc_wait.h</includes>
    <includes id="a00338" name="sc_wait_cthread.h" local="yes" imported="no">sysc/kernel/sc_wait_cthread.h</includes>
    <class kind="class">sc_core::sc_prim_channel</class>
    <class kind="class">sc_core::sc_prim_channel_registry</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_semaphore.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00050</filename>
    <includes id="a00248" name="sc_event.h" local="yes" imported="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00053" name="sc_semaphore_if.h" local="yes" imported="no">sysc/communication/sc_semaphore_if.h</includes>
    <class kind="class">sc_core::sc_semaphore</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_semaphore_if.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00053</filename>
    <includes id="a00035" name="sc_interface.h" local="yes" imported="no">sysc/communication/sc_interface.h</includes>
    <class kind="class">sc_core::sc_semaphore_if</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00056</filename>
    <includes id="a00044" name="sc_port.h" local="yes" imported="no">sysc/communication/sc_port.h</includes>
    <includes id="a00047" name="sc_prim_channel.h" local="yes" imported="no">sysc/communication/sc_prim_channel.h</includes>
    <includes id="a00059" name="sc_signal_ifs.h" local="yes" imported="no">sysc/communication/sc_signal_ifs.h</includes>
    <includes id="a00077" name="sc_writer_policy.h" local="yes" imported="no">sysc/communication/sc_writer_policy.h</includes>
    <includes id="a00248" name="sc_event.h" local="yes" imported="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00095" name="sc_logic.h" local="yes" imported="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00341" name="sc_trace.h" local="yes" imported="no">sysc/tracing/sc_trace.h</includes>
    <class kind="class">sc_core::sc_signal</class>
    <class kind="class">sc_core::sc_signal&lt; bool, POL &gt;</class>
    <class kind="class">sc_core::sc_signal&lt; sc_dt::sc_logic, POL &gt;</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_get_data_ref</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a96e642e5b93b3c418c0adac8c6f3b8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_get_new_value</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aba9c2f686011cc135876ed6c64a6bd37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ef5212d161928f6dfdd771e8c69a13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event *</type>
      <name>sc_lazy_kernel_event</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6509313db69d4e3fd2e0413f5a9102f3</anchor>
      <arglist>(sc_event **, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac164e408532f417d670050a11648e331</anchor>
      <arglist>(::std::ostream &amp;os, const sc_signal&lt; T, POL &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_signal_ifs.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00059</filename>
    <includes id="a00035" name="sc_interface.h" local="yes" imported="no">sysc/communication/sc_interface.h</includes>
    <includes id="a00077" name="sc_writer_policy.h" local="yes" imported="no">sysc/communication/sc_writer_policy.h</includes>
    <class kind="class">sc_core::sc_signal_in_if</class>
    <class kind="class">sc_core::sc_signal_in_if&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_signal_in_if&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_signal_write_if</class>
    <class kind="class">sc_core::sc_signal_inout_if</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>sc_signal_out_if</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a905ddddca9621f13c1245e8093ba6689</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_signal_ports.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00062</filename>
    <includes id="a00014" name="sc_event_finder.h" local="yes" imported="no">sysc/communication/sc_event_finder.h</includes>
    <includes id="a00044" name="sc_port.h" local="yes" imported="no">sysc/communication/sc_port.h</includes>
    <includes id="a00059" name="sc_signal_ifs.h" local="yes" imported="no">sysc/communication/sc_signal_ifs.h</includes>
    <includes id="a00095" name="sc_logic.h" local="yes" imported="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00341" name="sc_trace.h" local="yes" imported="no">sysc/tracing/sc_trace.h</includes>
    <class kind="struct">sc_core::sc_trace_params</class>
    <class kind="class">sc_core::sc_in</class>
    <class kind="class">sc_core::sc_in&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_in&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_inout</class>
    <class kind="class">sc_core::sc_inout&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_inout&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_out</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_VIRTUAL_</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a466f5704d1009220cf98a922ea022613</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; sc_trace_params * &gt;</type>
      <name>sc_trace_params_vec</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a067812813796ef57cedc7d4639837f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_add_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa0981e00af068f7cdd869436eaecbcb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa921826a294bfcc3bbec6b1b8c9a9b54</anchor>
      <arglist>(::std::ostream &amp;os, const sc_in&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae4bc619e16ffd3575e02ac9ab7dd8457</anchor>
      <arglist>(::std::ostream &amp;os, const sc_inout&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a63e743f63156d59271decb26ae3d4475</anchor>
      <arglist>(sc_trace_file *tf, const sc_in&lt; T &gt; &amp;port, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae6d69fa45bef996464ff890f5ce29b78</anchor>
      <arglist>(sc_trace_file *tf, const sc_inout&lt; T &gt; &amp;port, const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_signal_resolved.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00065</filename>
    <includes id="a00056" name="sc_signal.h" local="yes" imported="no">sysc/communication/sc_signal.h</includes>
    <class kind="class">sc_core::sc_signal_resolved</class>
    <namespace>sc_core</namespace>
    <member kind="variable">
      <type>const sc_dt::sc_logic_value_t</type>
      <name>sc_logic_resolution_tbl</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aca97e9d0f8adab9fd13a73c6a5f4cfac</anchor>
      <arglist>[4][4]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_signal_resolved_ports.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00068</filename>
    <includes id="a00062" name="sc_signal_ports.h" local="yes" imported="no">sysc/communication/sc_signal_ports.h</includes>
    <includes id="a00095" name="sc_logic.h" local="yes" imported="no">sysc/datatypes/bit/sc_logic.h</includes>
    <class kind="class">sc_core::sc_in_resolved</class>
    <class kind="class">sc_core::sc_inout_resolved</class>
    <class kind="class">sc_core::sc_out_resolved</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal_rv.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00071</filename>
    <includes id="a00056" name="sc_signal.h" local="yes" imported="no">sysc/communication/sc_signal.h</includes>
    <includes id="a00098" name="sc_lv.h" local="yes" imported="no">sysc/datatypes/bit/sc_lv.h</includes>
    <class kind="class">sc_core::sc_lv_resolve</class>
    <class kind="class">sc_core::sc_signal_rv</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal_rv_ports.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00074</filename>
    <includes id="a00011" name="sc_communication_ids.h" local="yes" imported="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00062" name="sc_signal_ports.h" local="yes" imported="no">sysc/communication/sc_signal_ports.h</includes>
    <includes id="a00071" name="sc_signal_rv.h" local="yes" imported="no">sysc/communication/sc_signal_rv.h</includes>
    <includes id="a00098" name="sc_lv.h" local="yes" imported="no">sysc/datatypes/bit/sc_lv.h</includes>
    <class kind="class">sc_core::sc_in_rv</class>
    <class kind="class">sc_core::sc_inout_rv</class>
    <class kind="class">sc_core::sc_out_rv</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_writer_policy.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/communication/</path>
    <filename>a00077</filename>
    <class kind="class">sc_core::sc_signal</class>
    <class kind="struct">sc_core::sc_writer_policy_check</class>
    <class kind="struct">sc_core::sc_writer_policy_nocheck_write</class>
    <class kind="struct">sc_core::sc_writer_policy_check_write</class>
    <class kind="struct">sc_core::sc_writer_policy_check_delta</class>
    <class kind="struct">sc_core::sc_writer_policy_nocheck_port</class>
    <class kind="struct">sc_core::sc_writer_policy_check_port</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_ONE_WRITER &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_MANY_WRITERS &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_UNCHECKED_WRITERS &gt;</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFAULT_WRITER_POLICY</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a2e3da293d6ddebdfaaf2c66c9d7a0ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_writer_policy</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ONE_WRITER</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607a3e4e04e6ed61133348c6f4a8d0131d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MANY_WRITERS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607abfdd1eba847a6183ab527d3f51c543f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNCHECKED_WRITERS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607a9bd426068dd960793db998491616aa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_signal_invalid_writer</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a90e74ffa9777099a68f0fcc6c20230bc</anchor>
      <arglist>(sc_object *target, sc_object *first_writer, sc_object *second_writer, bool check_delta)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bit.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00080</filename>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <class kind="class">sc_dt::sc_bit</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TO_VALUE_T</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ac719ac065d4292e13dc0b9e3b25416c5</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a1934040fa312188630bdd1e211f41934</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FUN_T</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aec52316a67ebc4fdec89de6e35645ea8</anchor>
      <arglist>(ret, fun, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FUN</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a5fa0312cbed03c95b2c1de57c8f7a48f</anchor>
      <arglist>(ret, fun)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRN_FUN_T</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>af63b14ca9a34fbf6bab2204b7cd79fb4</anchor>
      <arglist>(fun, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRN_FUN</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8298fc178ef6feeb7b90753670440b7d</anchor>
      <arglist>(fun)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_sc_bit</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a555bb14795b3f339176ec331d1fc77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a670409225d70df53b3b5e5156a061ba6</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac521149d132e9c77a5d9029aa86344db</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a999b6968ffdbf89e68bbc87a952abe0d</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>not_equal</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab15929c97a4ca6b79389507b1451956c</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>operator~</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a169ed5ff8c337ad2edc51c89f1aa9760</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e1cba88964b069aefdb6ebb8835ebd9</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a867ee07d6d7728bc8596a45b51201f42</anchor>
      <arglist>(sc_bit &amp;r, const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6ce9f3734edb08795cb218253a697e32</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0469931a39446c07c588a8a421be57de</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3ec321516525f001bf7252e81552c8ab</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>b_and</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a317a689be435008162622e6800e313e6</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>b_or</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af803e94a717c2fb04bde9239894bac72</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>b_xor</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2c9a301a7045bae3ddda330c288feb18</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1b4c0577a5a4a7da3932e0f2f1ac9236</anchor>
      <arglist>(::std::ostream &amp;os, const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae56a8d9181e7feac351b066c0935b69e</anchor>
      <arglist>(::std::istream &amp;is, sc_bit &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bit_ids.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00083</filename>
    <includes id="a00377" name="sc_report.h" local="yes" imported="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a417c403f3016e1e27f22cca7a4e8f44d</anchor>
      <arglist>(SC_ID_LENGTH_MISMATCH_, 200, &quot;length mismatch in bit/logic vector assignment&quot;) SC_DEFINE_MESSAGE(SC_ID_INCOMPATIBLE_TYPES_</arglist>
    </member>
    <member kind="function">
      <type>incompatible types</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a97e19f54c02ebdd35b5741b05919d1e4</anchor>
      <arglist>(SC_ID_CANNOT_CONVERT_, 202, &quot;cannot perform conversion&quot;) SC_DEFINE_MESSAGE(SC_ID_INCOMPATIBLE_VECTORS_</arglist>
    </member>
    <member kind="function">
      <type>incompatible types incompatible vectors</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a64ae3e7554bcdfcd0c3402239dad859f</anchor>
      <arglist>(SC_ID_VALUE_NOT_VALID_, 204, &quot;value is not valid&quot;) SC_DEFINE_MESSAGE(SC_ID_ZERO_LENGTH_</arglist>
    </member>
    <member kind="function">
      <type>incompatible types incompatible vectors zero length</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a57df3ca84f37b5f2ee9bbae3cb2c75c5</anchor>
      <arglist>(SC_ID_VECTOR_CONTAINS_LOGIC_VALUE_, 206, &quot;vector contains 4-value logic&quot;) SC_DEFINE_MESSAGE(SC_ID_SC_BV_CANNOT_CONTAIN_X_AND_Z_</arglist>
    </member>
    <member kind="function">
      <type>incompatible types incompatible vectors zero length sc_bv cannot contain values X and Z</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a571bb35b9147053406eaea4b97d62a8c</anchor>
      <arglist>(SC_ID_VECTOR_TOO_LONG_, 208, &quot;vector is too long: truncated&quot;) SC_DEFINE_MESSAGE(SC_ID_VECTOR_TOO_SHORT_</arglist>
    </member>
    <member kind="function">
      <type>incompatible types incompatible vectors zero length sc_bv cannot contain values X and Z vector is too wrong value</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac8a301863b0072d6ffbba41a1f2daa47</anchor>
      <arglist>(SC_ID_LOGIC_Z_TO_BOOL_, 211, &quot;sc_logic value &apos;Z&apos; cannot be converted to bool&quot;) SC_DEFINE_MESSAGE(SC_ID_LOGIC_X_TO_BOOL_</arglist>
    </member>
    <member kind="variable">
      <type>incompatible types incompatible vectors zero length sc_bv cannot contain values X and Z vector is too</type>
      <name>short</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af2b4988bf5cb782d5f4046ebc6b70886</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bit_proxies.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00086</filename>
    <includes id="a00083" name="sc_bit_ids.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00104" name="sc_proxy.h" local="yes" imported="no">sysc/datatypes/bit/sc_proxy.h</includes>
    <class kind="class">sc_dt::sc_bitref_r</class>
    <class kind="class">sc_dt::sc_bitref</class>
    <class kind="class">sc_dt::sc_subref_r</class>
    <class kind="class">sc_dt::sc_subref</class>
    <class kind="class">sc_dt::sc_concref_r</class>
    <class kind="class">sc_dt::sc_concref</class>
    <class kind="class">sc_dt::sc_bitref_r</class>
    <class kind="class">sc_dt::sc_bitref</class>
    <class kind="class">sc_dt::sc_subref_r</class>
    <class kind="class">sc_dt::sc_subref</class>
    <class kind="class">sc_dt::sc_concref_r</class>
    <class kind="class">sc_dt::sc_concref</class>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e3f7242eecad15a60a526b1d882f278</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a87f1717a010b82dd120d0a86ec5f6acb</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6f41c8ef504546df2b46b612aa0c32be</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a71caac3c438813220653c56fa570c536</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac5ec8c247ab8dbd8f82be5e7bdaf6cd4</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a81419df3a1065a1170353258b1362946</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92d3d1f0771d4917f75f6b6d08971938</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e1ed21a3e562a385b10e27541a4f2ff</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41d8a0d4ca38da9c857a585a42857536</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af1d7f73744b5ed181a0cda52617a182a</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a622ac6b70d9b15affe6ec1ace4ca4d11</anchor>
      <arglist>(const char *, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a806af68b4a880703e0a1f31d0c5964cf</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad21a033bc55235fd111da0e3e7ff3089</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>accd4888776b108a28e148751f80c6016</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37b1006a00759b78587c8d40ea82ba39</anchor>
      <arglist>(bool, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7dfa6b058e6b1a337569e75474de10b3</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab237e358a7a2c8d7cf1e956da9987045</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4dfb2c146246c05c723d03c6ab55e924</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8091cf1dbf3bcc79cecadca66cdaf50</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad944deffdcce2f496fef7dc225c2290e</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab5a33b4fc1575ad7a1d3cc626e7d2463</anchor>
      <arglist>(const char *, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a188e57d8db8c17ba6966ca2ad6448d43</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6061aa9f64645617da66705d49b8b950</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab125fcbfbade15d7e648bb82cf7f3241</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9fbedd668353bb25b9caea6b21880f35</anchor>
      <arglist>(bool, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2ce6f30cd6cdf7f4c38735acfe59bc28</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a59f461d35dff3d7da3f8648edcce73d4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a21a209c08e0ebc711d71c56575733d81</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afa119536b99823db5fb6a1183a3ce844</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a717e2603f1dd59545fd1b7b0f1aaa8b6</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad4df1090c50ee5b904b05c09dbab6ef1</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af08909aeff30a5661212494681440693</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a586bd54dcb491a57486912417014a19e</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad6cf471335ec7d6ba7ae651baa801270</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a047a3bb2af3626b076ad1c27ba2ef238</anchor>
      <arglist>(const char *, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae3af376b87d812b3f269b5ea86fcbbe9</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99cb25216742e2c864cd4fc293527b40</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a80f1f1d0fb81d6901fe407e70cf0c53c</anchor>
      <arglist>(sc_bitref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa563106be42a11773739e0f21a2ccd2c</anchor>
      <arglist>(bool, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8d468d33c702dc2e4c10caed3d3bc979</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af757f4e100f6aa74341eba2141539c1e</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac2c496d6b7006850d61dc2f30924e65d</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6e34f9a9d83a96fed73178c440acfe40</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a02f728ecfbd50cedf37b4741baf3162d</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1abe4d79fded432cf6b57fa8698a5984</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abfd243168b956371f6885066f15c122b</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0fb49a14347e7a6ff894a0f0f1a979e9</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afb449abe5bd21cb19f251d3c1545a642</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8ad565a3a5135f40ddf4dcac2fc8ddc</anchor>
      <arglist>(const char *, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a384793e89dac342212b8f0e615dbe89f</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae68a8c9995924ab9b57a2e39330151fa</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4c2d9d2bf968fbb2d0ca4801ef23275c</anchor>
      <arglist>(sc_bitref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a049a019ee93fb316397ec930836b3056</anchor>
      <arglist>(bool, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5266b239d8e2c42a4c605ec903dde2f4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a087e36a8af762e470a69bceb2c92a0f5</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ef2fb54ca95e440ce61194b8da29e71</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56e1e9ef573549d9f661fbbc6f83b813</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a97f4042e2bfad31fbf01b6ee07a34e94</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a89cc2621afd6301d343848c00f1238f4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d07b7b210a7c22123a61a597a3203ed</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea2386292f7358617418de4954fd15d1</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06841ab562465bc0ef50937083b54c24</anchor>
      <arglist>(::std::istream &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab5a55f08f62f53ecd3030ac442f83799</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7762f6d94c5fc0e5d3ee70100ba48835</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1a17a497bbe7a7e47cae999637cb958d</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66f2f9773a2b549bd96316736fe77930</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a08081f739cf5286904aa703f34368076</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab9b022e3917c47a8794637d869da921f</anchor>
      <arglist>(const char *, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3cf85728b4a5fbca2432fce59f9a2fb</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d4a952f36b3da0854e68eb5306fc891</anchor>
      <arglist>(const sc_logic &amp;, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1f1eef971a95114816e10d9866762cf7</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afaa63a7bbabf6e35455b2a690236f086</anchor>
      <arglist>(bool, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a302d08f7807e43083b03f42327439d99</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7eb5a5ba70bf61752d80ef89f493abf2</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5116ef6772a191df1ce90339cf4cbd50</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a02ad8f45bdd3236a0c542c54e7f83dbb</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a00a69d1b94f6b303d586b758953024d7</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9b5d60e7345363d7623b2246f67256c</anchor>
      <arglist>(const char *, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8592cb9f249e9043697d4f9b3c467b73</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7158f591a5c538f13c747e11b21bb778</anchor>
      <arglist>(const sc_logic &amp;, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a534dcb835a4720bdd91eeaeb5cacf0e6</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a40365c424c1584678e218a29a785a5ce</anchor>
      <arglist>(bool, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0fc7962993db3d0e8b6f58aee2d1d14c</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a72473e2d13301e00a004d1f5db4e210e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9e8c763b1a48a1850696b0eff80f8112</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9cdaf405ff20a5dfbf2eb50423f967e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6620dd89349c47dd7f7cf82fd6b111bd</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9e87fcecd1e398ce33d732e2badc45cf</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc45c87d25c869670f0329fb5bb371f8</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a14fd6df1ba7bd561a7480145f19ce281</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe406dae5c319ea585830e4a1cfa936e</anchor>
      <arglist>(sc_subref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad4bc0d9f123e16cedd29a3e17e374e64</anchor>
      <arglist>(const char *, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a81d48a40f19d9dd18cd5eafa7073f83b</anchor>
      <arglist>(sc_subref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a558fa8c2eff0d9ebc1f9c8e6d6472c58</anchor>
      <arglist>(const sc_logic &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0b96272597c30fffbe060de69addf540</anchor>
      <arglist>(sc_subref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae1ec021063938b6c286593c2a3372f19</anchor>
      <arglist>(bool, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af64856ff14f5de2caf30a2e995c35831</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6810d3344f01425a832b22c77272ffc7</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a43206b4b80dcd311c3b5bcf1d311178a</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a811283a8ae707179b127c0da7b1f0775</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa365e53e5ec7237004d7d15a6fcb4c94</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6637834b50f88a16dd20b491aa13e029</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1212d11cd9c207329aa698c5b8d2a330</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac31f939147de43ee9d63dcb993d4c5c0</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a528c262ee46e1e1e4ba42c59848a21f3</anchor>
      <arglist>(sc_subref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad1a3f319b3e1bd169ff886c3e0cbc7d8</anchor>
      <arglist>(const char *, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a411f15827676bb160b9d04359a13e17e</anchor>
      <arglist>(sc_subref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5bee9e7b5cc2b9364d7433b2c6cb8737</anchor>
      <arglist>(const sc_logic &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a57659569d6ab1c7f5033116c142f3c08</anchor>
      <arglist>(sc_subref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a678e9a6a8c193a81a6143efb44608208</anchor>
      <arglist>(bool, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4a2c7126d0a4d686a071ce3a31ebc02f</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae9d19a7d0bcb151f9b400673ec7cdc05</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaad9649d241271db46fe10491c47d1a9</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88f9faad8c6e27fe2aa9e8928c187f92</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7fce1575881c89babc6022e720cc479e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad443b0bd7cf77e94269e3de7aee35ab5</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a69c9965b1d8767101762dcb6042216</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9be7ee0081f383e696a5e6392cf9396e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8238cdee498d604584a9b53dbf648e33</anchor>
      <arglist>(::std::istream &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9706834b530dd042d5ea750e769a57e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acabae9f6caca445a1990aba801a6231e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a10c08618f10cd89f9eec9270131593ad</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aee7e2c3b1eb664dac0a44ec6d09ae16a</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a400c70f73c82bb65c0b93473c6c6d5d0</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d284514176c13fa9b314d1186de90d1</anchor>
      <arglist>(const char *, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8e78ec7da94c5e58d58eeb6d3672cbd9</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3be49867a56f1f06b4525dad34a00855</anchor>
      <arglist>(const sc_logic &amp;, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a08c5462a7a0d1543ea08baad6f61a5c0</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2acbabfadfe10290256868d33ee0c24c</anchor>
      <arglist>(bool, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac4d617c8e9a9074ec2c456e1b3c92669</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3a541920fa37fbc8879a0027fba6626c</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab2f60b6abc2a67b6a29bc05b9971d9f7</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acae846ebbb35cafb437a20a0f30c5213</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad20d165ec30a6c85cdeb9af4ff182d19</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff3b50394ebc21692b65cec619599859</anchor>
      <arglist>(const char *, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae41f08b67af456094ade7f8e7bbd191d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5541b2f65c8f05deb8d41ac7c9bcbb49</anchor>
      <arglist>(const sc_logic &amp;, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d53307c625d3727944862a613770d8e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7596ccc6f508e56489a570ee3ee8b734</anchor>
      <arglist>(bool, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeaa4e7662edfbd3ae91c474e95a58382</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9520a280d48a0d4ee8287fbe4cd338b2</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af4026ad59c859fd0c389dafab0448560</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b7f491aec1f02765665d43024d29f35</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88965d7b9b2e9e96363d5d251e53a36d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa11cdd8b4824d62f9ac7b30585f48235</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7bab858ac27bda49bffc4e33fcbfd872</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67d3aa4c9f1721c094442ee864241a73</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a763c84ab67f2e9c65f1b7311ff8f9195</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3fd1efd1074fabf4b71f140b716e0a22</anchor>
      <arglist>(const char *, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf3c2ec104c6d7f54327d7a265926975</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8886cab28a21b7822951260da641abc</anchor>
      <arglist>(const sc_logic &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a64b5d6025508b41e2ae793b38c3c2528</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae60687edaca633da56393f5c466ec3de</anchor>
      <arglist>(bool, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37213a3b84647cb8f21242701fa6326d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8f5fb909db95eabb429c23783a344bce</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a21256602b22279850cd4a74333f73a25</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1bf94b308ac36794df41d3631a71ab66</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae70190d912d0ced7b8971adf63e00a11</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a073aa2b8b1b82bec42a2450260171952</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1235c8e0e0c323f26572612252255454</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adff391de87eb9b631cd77e770b4cbd34</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac4269641953c2ac9d8e85133f6c04ca2</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3d71ac5db88c59b7247fb9801347efd4</anchor>
      <arglist>(const char *, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeb45615effb16db3e1f333e63881ff9b</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c5b4e946e3547e415a1f5ed7da46a13</anchor>
      <arglist>(const sc_logic &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae709314167cfc7291475de5b7f8bdfc7</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab09e3dd5465e10bad7c6e155d35f8598</anchor>
      <arglist>(bool, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc1d62ff4990e9020f8228479239d50c</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac421f1b8303521e6e0b39744ec9fe840</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0c72151aa5ed9b4453fa3faad7f1470</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88cd16cf36f26b1250cd116c4a2f032f</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8d2c6b4cc478cb8a9394dad92cbeb701</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8f7915f4c0e3fe4d19446d796be3bf28</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af3c962512719144042afc26a018d5c8c</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acf2d1769ddcfddbdf44a35721a4feabd</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ace850df9217c0c1f70e86daac969f9db</anchor>
      <arglist>(::std::istream &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3f4ac6c2019b09892ef39a8361d92937</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a606053819c20bc655544e80ee21268f4</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae1b905aa7ca267e83118a38597dd8a4e</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a70d934f75442a579f512c3a6f66d1153</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a543a131e89dffdefa7285dd8144ac1dc</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a672c1005e61816ccc65c00f7a3fdce50</anchor>
      <arglist>(const char *, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a574450a7553b2e0083ebcecf58d907f8</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79e9609977cfc2e03ab39d181c0dc58c</anchor>
      <arglist>(const sc_logic &amp;, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88d2d98f5e66f4dcb5291061d621f50f</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9048f5e66588f65c60e03db0ce42674d</anchor>
      <arglist>(bool, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae35c449a5094b9c31fd9c498ea094fe9</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac89e5d0df7a32dd6e8e0d7a73a47b6a1</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa0076b0ab9a5455bcf8ff44fe9a56971</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7469a7a18ec5a4f0434c2611f0e2e210</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf0cbad6b2d05f6a010af0bfc5cd75e8</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a75171853c5ffed35a5405158619a06c0</anchor>
      <arglist>(const char *, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f85cf25c9da5f0873809362fc628707</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8da755bd8659876bbd7f6f0a4fe83b38</anchor>
      <arglist>(const sc_logic &amp;, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d97866544c2ff4d568f6a231d208178</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99998f94c0ce6c32ad437dcede5726dd</anchor>
      <arglist>(bool, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6a45e924aa2dc4fe1c3cd075c53bce64</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9565ff98c386c059b8df66dc7837eb92</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4977209d2853d012169e7e34e58d1d25</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adc0e3e2d82a56b5e5117c704ecb29c7b</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7be267b5b8e5fb44342c5deb84efbc2f</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af38e0e17f61aaa7ce6f792657a5c361f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a821fd3959dd2b3b4a59dfca7a8bef0d7</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab0d9ba5ff6fe44e67ff911bbfea9a18e</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0440604d54a5ad4a078f8f65c63bc65</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a01052f8967da6e35cbf5bec2063b3c2b</anchor>
      <arglist>(const char *, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3fd795249e3789a74dd62b9ba53cd204</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c5fc5a94137adc1953d51fa053b3652</anchor>
      <arglist>(const sc_logic &amp;, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9f18e340a373e451fd5660361dbb6d81</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a731935abd59222ba54d861b8600e3a0e</anchor>
      <arglist>(bool, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d98d02b56cdf1df9f1e82941b30d122</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af35dbda5506312596382e165a40f5993</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad3659dc31eb662c4c9b930a9d1c7eee2</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a49b9e679d38f48d1ce66398b6c238a8a</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a075e5c65ddbe18ba7ad0cc41766b1784</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a340def548a6538874aec07155ddf9e11</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad1d043888f4221072b3c33a67d4aba09</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acbc563182ad467a798557e7faf46591e</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7c8b3ddbc663f7205b9e7990a1a6c975</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9f81ab2a6c15d712f2e3c1404e037e3</anchor>
      <arglist>(const char *, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a1ad4c519e64a24f8ae760c71bf3efa</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a65083b0124075a2dd18d3fdd6127bb16</anchor>
      <arglist>(const sc_logic &amp;, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac98cdbddd0554bdc00de2d621b64b9d5</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea14782f31e90f6197121d2645ade3d2</anchor>
      <arglist>(bool, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afc921e3ac11fbf364a8b998cc3cb352f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a887117f11ae0050cbaae26a49ea4893f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af63f0946c46b9f955f3143821385d1de</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2f4982bc8d7c70412e0bd78a575f6a35</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a635ec0670993cad06d12e8851711a5fd</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa9004b0f4e4021cbe0b083d212843661</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4b1dc414e18dacf4c16a7edbc70ad67c</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a64028e5ea6310e2072e7212b32859b06</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e3f7242eecad15a60a526b1d882f278</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af01bdea32ed59762b0035322051d3b65</anchor>
      <arglist>(::std::istream &amp;is, sc_bitref&lt; X &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad7bca50b1e7b33fc32df1ceb58306b2</anchor>
      <arglist>(::std::istream &amp;is, sc_subref&lt; X &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8c1782d9f545aaf3ff93b370941ac274</anchor>
      <arglist>(::std::istream &amp;is, sc_concref&lt; X, Y &gt; a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bv.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00089</filename>
    <includes id="a00092" name="sc_bv_base.h" local="yes" imported="no">sysc/datatypes/bit/sc_bv_base.h</includes>
    <class kind="class">sc_dt::sc_bv</class>
    <class kind="class">sc_dt::sc_bv</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_bv_base.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00092</filename>
    <includes id="a00083" name="sc_bit_ids.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00086" name="sc_bit_proxies.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit_proxies.h</includes>
    <includes id="a00104" name="sc_proxy.h" local="yes" imported="no">sysc/datatypes/bit/sc_proxy.h</includes>
    <includes id="a00188" name="sc_length_param.h" local="yes" imported="no">sysc/datatypes/int/sc_length_param.h</includes>
    <class kind="class">sc_dt::sc_bv_base</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_logic.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00095</filename>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00263" name="sc_macros.h" local="yes" imported="no">sysc/kernel/sc_macros.h</includes>
    <includes id="a00368" name="sc_mempool.h" local="yes" imported="no">sysc/utils/sc_mempool.h</includes>
    <includes id="a00080" name="sc_bit.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit.h</includes>
    <class kind="class">sc_dt::sc_logic</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a33b1acf9dd47412aa96459b6e6840b06</anchor>
      <arglist>(ret, op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aebb0d78a0c14894e7ed7ec5e28b0b96e</anchor>
      <arglist>(ret, op)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_logic_value_t</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_0</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1facf684ee264000f979e683d589578cb76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_1</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa3d94e65043b731e0c9d787b50e197caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_Z</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa312c0fda75290bb3115f0a6838a54e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_X</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa4a796d0647b5a2c459b8806f2df1c677</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a650a32e9591a15abbdacef0b415d0478</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afa4f11c07555ffcc0fc97e15c772c236</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a712fb799189610ca33f8542faa614091</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a682e704d226b970e4996557c3a7e64d0</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f44cb6c8d3c779db140c9f8e06f4b5c</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a32c99e6f4d73fbfa37f6881b3f0c8517</anchor>
      <arglist>(::std::ostream &amp;os, const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef1349ce364097fa382a86aef84edc9d</anchor>
      <arglist>(::std::istream &amp;is, sc_logic &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>SC_LOGIC_0</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab2715f1c8bc1b0f4b6000c63743c919b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>SC_LOGIC_1</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae517eb9f471b3b8355a7ee00ddc7a58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>SC_LOGIC_Z</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a11f43af5111be2f73ce54cca7c2a4fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>SC_LOGIC_X</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e9684c845cfbea4f5f9e374ec4fcc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>sc_logic_0</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c90c0623cc0b1f107db111351ca3a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>sc_logic_1</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f8f829fb3219fc990c25d020db6e54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>sc_logic_Z</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a211eebd1818449dc934c948317bc1496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>sc_logic_X</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a513e2c9efff64513a605335ac0b0248c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_lv.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00098</filename>
    <includes id="a00101" name="sc_lv_base.h" local="yes" imported="no">sysc/datatypes/bit/sc_lv_base.h</includes>
    <class kind="class">sc_dt::sc_lv</class>
    <class kind="class">sc_dt::sc_lv</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_lv_base.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00101</filename>
    <includes id="a00083" name="sc_bit_ids.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00092" name="sc_bv_base.h" local="yes" imported="no">sysc/datatypes/bit/sc_bv_base.h</includes>
    <includes id="a00095" name="sc_logic.h" local="yes" imported="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00188" name="sc_length_param.h" local="yes" imported="no">sysc/datatypes/int/sc_length_param.h</includes>
    <class kind="class">sc_dt::sc_lv_base</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_AND_ASN_OP_T</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a2290ba2a07745329ad17b08939e304e0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_AND_OP_T_A</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a0ecd56c5e26aee2200cb60ffc8d8dda2</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_AND_OP_T_B</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a027e6b9a0fd38c0bd97ccf91d1e1d8cd</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_OR_ASN_OP_T</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a8da21c6783ce5afa481e54724a50f47c</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_OR_OP_T_A</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a51bb5cc3460e3f4d4400026f3413840e</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_OR_OP_T_B</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a45bc47b95ca49ff27f4420070eb3e664</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_XOR_ASN_OP_T</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a5c8c0c243ca4e8d1a8b86f9699a0be8f</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_XOR_OP_T_A</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a6edbba209eb0caade0e66f17f721b231</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_XOR_OP_T_B</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a87ddb1e080495399fbe006187b2a812b</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a98a013e830f530c47314f7d4ee023646</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a328357f6ed6c69b9df838beb721e8b70</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0fdf35ec7113962ab4b99755ae1981bd</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1faecf0db01159662c449f77ae038d63</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a334a95743b558823d365a91050326f84</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a513cb0b408e84ec87a9d9366a1be7d3c</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a403e0c695511794b0b64ff5eecf9cfb8</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>lrotate</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41723883670db833547392e5a1514869</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x, int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>rrotate</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae1528e0cdec3a9db1c3ef36a73e1da9a</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x, int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>reverse</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c9da926c002a145b38e6bac95f63c3e</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a14eca5ca6f6376cc71a6355ca5238a5d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af1d7f73744b5ed181a0cda52617a182a</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a622ac6b70d9b15affe6ec1ace4ca4d11</anchor>
      <arglist>(const char *, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a806af68b4a880703e0a1f31d0c5964cf</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad21a033bc55235fd111da0e3e7ff3089</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf09535dffc10983c68b5cb59bf1760b</anchor>
      <arglist>(sc_bitref_r&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a11fa9dddc593ff7ed9f03f50e4abdc42</anchor>
      <arglist>(bool a, sc_bitref_r&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad944deffdcce2f496fef7dc225c2290e</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab5a33b4fc1575ad7a1d3cc626e7d2463</anchor>
      <arglist>(const char *, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a188e57d8db8c17ba6966ca2ad6448d43</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6061aa9f64645617da66705d49b8b950</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a44518f4c93b4bf7703d9873abe8107e0</anchor>
      <arglist>(sc_bitref_r&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f4e7349ebbab37135843f74084eebea</anchor>
      <arglist>(bool a, sc_bitref_r&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad6cf471335ec7d6ba7ae651baa801270</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a047a3bb2af3626b076ad1c27ba2ef238</anchor>
      <arglist>(const char *, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae3af376b87d812b3f269b5ea86fcbbe9</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99cb25216742e2c864cd4fc293527b40</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af202c1ced642065c56dab53b41c3e541</anchor>
      <arglist>(sc_bitref&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29e7af700e296de16d00ea09280dcaf4</anchor>
      <arglist>(bool a, sc_bitref&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afb449abe5bd21cb19f251d3c1545a642</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8ad565a3a5135f40ddf4dcac2fc8ddc</anchor>
      <arglist>(const char *, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a384793e89dac342212b8f0e615dbe89f</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae68a8c9995924ab9b57a2e39330151fa</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5737b71a8928e0d0c5b53ebd301ca886</anchor>
      <arglist>(sc_bitref&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a872da5a536bda7d6b16d188445573b6f</anchor>
      <arglist>(bool a, sc_bitref&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a08081f739cf5286904aa703f34368076</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab9b022e3917c47a8794637d869da921f</anchor>
      <arglist>(const char *, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3cf85728b4a5fbca2432fce59f9a2fb</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d4a952f36b3da0854e68eb5306fc891</anchor>
      <arglist>(const sc_logic &amp;, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1f1eef971a95114816e10d9866762cf7</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afaa63a7bbabf6e35455b2a690236f086</anchor>
      <arglist>(bool, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a00a69d1b94f6b303d586b758953024d7</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9b5d60e7345363d7623b2246f67256c</anchor>
      <arglist>(const char *, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8592cb9f249e9043697d4f9b3c467b73</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7158f591a5c538f13c747e11b21bb778</anchor>
      <arglist>(const sc_logic &amp;, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a534dcb835a4720bdd91eeaeb5cacf0e6</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a40365c424c1584678e218a29a785a5ce</anchor>
      <arglist>(bool, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe406dae5c319ea585830e4a1cfa936e</anchor>
      <arglist>(sc_subref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad4bc0d9f123e16cedd29a3e17e374e64</anchor>
      <arglist>(const char *, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a81d48a40f19d9dd18cd5eafa7073f83b</anchor>
      <arglist>(sc_subref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a558fa8c2eff0d9ebc1f9c8e6d6472c58</anchor>
      <arglist>(const sc_logic &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0b96272597c30fffbe060de69addf540</anchor>
      <arglist>(sc_subref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae1ec021063938b6c286593c2a3372f19</anchor>
      <arglist>(bool, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a528c262ee46e1e1e4ba42c59848a21f3</anchor>
      <arglist>(sc_subref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad1a3f319b3e1bd169ff886c3e0cbc7d8</anchor>
      <arglist>(const char *, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a411f15827676bb160b9d04359a13e17e</anchor>
      <arglist>(sc_subref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5bee9e7b5cc2b9364d7433b2c6cb8737</anchor>
      <arglist>(const sc_logic &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a57659569d6ab1c7f5033116c142f3c08</anchor>
      <arglist>(sc_subref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a678e9a6a8c193a81a6143efb44608208</anchor>
      <arglist>(bool, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a400c70f73c82bb65c0b93473c6c6d5d0</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d284514176c13fa9b314d1186de90d1</anchor>
      <arglist>(const char *, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8e78ec7da94c5e58d58eeb6d3672cbd9</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3be49867a56f1f06b4525dad34a00855</anchor>
      <arglist>(const sc_logic &amp;, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a08c5462a7a0d1543ea08baad6f61a5c0</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2acbabfadfe10290256868d33ee0c24c</anchor>
      <arglist>(bool, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad20d165ec30a6c85cdeb9af4ff182d19</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff3b50394ebc21692b65cec619599859</anchor>
      <arglist>(const char *, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae41f08b67af456094ade7f8e7bbd191d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5541b2f65c8f05deb8d41ac7c9bcbb49</anchor>
      <arglist>(const sc_logic &amp;, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d53307c625d3727944862a613770d8e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7596ccc6f508e56489a570ee3ee8b734</anchor>
      <arglist>(bool, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a763c84ab67f2e9c65f1b7311ff8f9195</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3fd1efd1074fabf4b71f140b716e0a22</anchor>
      <arglist>(const char *, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf3c2ec104c6d7f54327d7a265926975</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8886cab28a21b7822951260da641abc</anchor>
      <arglist>(const sc_logic &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a64b5d6025508b41e2ae793b38c3c2528</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae60687edaca633da56393f5c466ec3de</anchor>
      <arglist>(bool, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac4269641953c2ac9d8e85133f6c04ca2</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3d71ac5db88c59b7247fb9801347efd4</anchor>
      <arglist>(const char *, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeb45615effb16db3e1f333e63881ff9b</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c5b4e946e3547e415a1f5ed7da46a13</anchor>
      <arglist>(const sc_logic &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae709314167cfc7291475de5b7f8bdfc7</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab09e3dd5465e10bad7c6e155d35f8598</anchor>
      <arglist>(bool, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a543a131e89dffdefa7285dd8144ac1dc</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a672c1005e61816ccc65c00f7a3fdce50</anchor>
      <arglist>(const char *, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a574450a7553b2e0083ebcecf58d907f8</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79e9609977cfc2e03ab39d181c0dc58c</anchor>
      <arglist>(const sc_logic &amp;, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88d2d98f5e66f4dcb5291061d621f50f</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9048f5e66588f65c60e03db0ce42674d</anchor>
      <arglist>(bool, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf0cbad6b2d05f6a010af0bfc5cd75e8</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a75171853c5ffed35a5405158619a06c0</anchor>
      <arglist>(const char *, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f85cf25c9da5f0873809362fc628707</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8da755bd8659876bbd7f6f0a4fe83b38</anchor>
      <arglist>(const sc_logic &amp;, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d97866544c2ff4d568f6a231d208178</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99998f94c0ce6c32ad437dcede5726dd</anchor>
      <arglist>(bool, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0440604d54a5ad4a078f8f65c63bc65</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a01052f8967da6e35cbf5bec2063b3c2b</anchor>
      <arglist>(const char *, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3fd795249e3789a74dd62b9ba53cd204</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c5fc5a94137adc1953d51fa053b3652</anchor>
      <arglist>(const sc_logic &amp;, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9f18e340a373e451fd5660361dbb6d81</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a731935abd59222ba54d861b8600e3a0e</anchor>
      <arglist>(bool, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7c8b3ddbc663f7205b9e7990a1a6c975</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9f81ab2a6c15d712f2e3c1404e037e3</anchor>
      <arglist>(const char *, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a1ad4c519e64a24f8ae760c71bf3efa</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a65083b0124075a2dd18d3fdd6127bb16</anchor>
      <arglist>(const sc_logic &amp;, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac98cdbddd0554bdc00de2d621b64b9d5</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea14782f31e90f6197121d2645ade3d2</anchor>
      <arglist>(bool, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_proxy.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/bit/</path>
    <filename>a00104</filename>
    <includes id="a00224" name="sc_cmnhdr.h" local="yes" imported="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00200" name="sc_signed.h" local="yes" imported="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00209" name="sc_unsigned.h" local="yes" imported="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <includes id="a00182" name="sc_int_base.h" local="yes" imported="no">sysc/datatypes/int/sc_int_base.h</includes>
    <includes id="a00206" name="sc_uint_base.h" local="yes" imported="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00080" name="sc_bit.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit.h</includes>
    <includes id="a00083" name="sc_bit_ids.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00095" name="sc_logic.h" local="yes" imported="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00263" name="sc_macros.h" local="yes" imported="no">sysc/kernel/sc_macros.h</includes>
    <class kind="class">sc_dt::sc_proxy</class>
    <class kind="class">sc_dt::sc_bitref_r</class>
    <class kind="class">sc_dt::sc_bitref</class>
    <class kind="class">sc_dt::sc_subref_r</class>
    <class kind="class">sc_dt::sc_subref</class>
    <class kind="class">sc_dt::sc_concref_r</class>
    <class kind="class">sc_dt::sc_concref</class>
    <class kind="struct">sc_dt::sc_proxy_traits</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bv_base &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bitref_r&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bitref&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_subref_r&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_subref&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_proxy&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_mixed_proxy_traits_helper</class>
    <class kind="struct">sc_dt::sc_mixed_proxy_traits_helper&lt; X, X &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_concref_r&lt; X, Y &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_concref&lt; X, Y &gt; &gt;</class>
    <class kind="class">sc_dt::sc_proxy</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BITWISE_AND_OP_T</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a6beca6efa1b35c0b49d3ad81a1f3feea</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BITWISE_OR_OP_T</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ad4fae7e0571393b991041e0461c70dbc</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BITWISE_XOR_OP_T</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>afe29b2313b0af14de7019be209951a8c</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a46a5280a3151c51e7580c026f72c3a24</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a98a013e830f530c47314f7d4ee023646</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_p_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab19c521447708135e53f3061392c368e</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d9bb67bf2d6103a56c634852dfb3674</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>convert_to_bin</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae2220f3755bf2b22d5fdb1f9fc7858d9</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>convert_to_fmt</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad211529e1f12582aa0217e9bf79061dc</anchor>
      <arglist>(const std::string &amp;s, sc_numrep numrep, bool)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a328357f6ed6c69b9df838beb721e8b70</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0fdf35ec7113962ab4b99755ae1981bd</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1faecf0db01159662c449f77ae038d63</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a334a95743b558823d365a91050326f84</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a513cb0b408e84ec87a9d9366a1be7d3c</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a403e0c695511794b0b64ff5eecf9cfb8</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a14eca5ca6f6376cc71a6355ca5238a5d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a45816c9590a94aca06c1f189c855b89d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_words_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a43dc0c3f82468be76295de7ffe67ff95</anchor>
      <arglist>(const X &amp;x, int wi, sc_digit &amp;x_dw, sc_digit &amp;x_cw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_words_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a464ca38a9d1338847b903ecdde3b6807</anchor>
      <arglist>(X &amp;x, int wi, sc_digit x_dw, sc_digit x_cw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_sign_w_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae38b1e6b91be552ded23cd661edfaa9b</anchor>
      <arglist>(X &amp;x, int wi, bool sign)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6a505dc35902d6296779a490d1495e5f</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a323315704ce928228719f4fa443313a5</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1fef86621e00ed4c2efb80b832b3438b</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad41f86308be3469097df4e959c88db5e</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_and_assign_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7a1848b43803d267abf3fcf25c5276fd</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_or_assign_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6ff6016abc5954a0426aa4171eaceb00</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_xor_assign_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a024ac007cc8895844eebd4a97cac7c39</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;a, const sc_proxy&lt; Y &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>lrotate</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41723883670db833547392e5a1514869</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x, int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>rrotate</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae1528e0cdec3a9db1c3ef36a73e1da9a</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x, int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>reverse</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c9da926c002a145b38e6bac95f63c3e</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29091736361c33fd24d66d89c34c37ed</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5b519be68a6f71cd8ab9321c85426f8e</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9731e9f21049b061185aff5e48192c79</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a45f040b0068cacbd094a477334552478</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5e01097aa17f902c751987943fb8f156</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0dfa9cf95ef33f69b94f2341c1b42124</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0e077b56de2cab737ae93c64a96daa2b</anchor>
      <arglist>(::std::ostream &amp;os, const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acd548edcba8a9cb179baa48968492e99</anchor>
      <arglist>(::std::istream &amp;is, sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DIGIT_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a261fdf19c94eb645624e551676a4b3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41db220f73561037e0eceb8e1ab849e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_ONE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a19ba673c32e3feda2b82b949f2cafa99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_TWO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abe43fee2acd67acf70eecbc3ae561664</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fx.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00107</filename>
    <includes id="a00116" name="sc_fixed.h" local="yes" imported="no">sysc/datatypes/fx/sc_fixed.h</includes>
    <includes id="a00122" name="sc_fxcast_switch.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxcast_switch.h</includes>
    <includes id="a00134" name="sc_fxtype_params.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxtype_params.h</includes>
    <includes id="a00146" name="sc_ufixed.h" local="yes" imported="no">sysc/datatypes/fx/sc_ufixed.h</includes>
    <includes id="a00155" name="scfx_other_defs.h" local="yes" imported="no">sysc/datatypes/fx/scfx_other_defs.h</includes>
  </compound>
  <compound kind="file">
    <name>sc_context.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00110</filename>
    <includes id="a00119" name="sc_fx_ids.h" local="yes" imported="no">sysc/datatypes/fx/sc_fx_ids.h</includes>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00356" name="sc_hash.h" local="yes" imported="no">sysc/utils/sc_hash.h</includes>
    <class kind="class">sc_dt::sc_global</class>
    <class kind="class">sc_dt::sc_context</class>
    <class kind="class">sc_dt::sc_without_context</class>
    <class kind="class">sc_dt::sc_global</class>
    <class kind="class">sc_dt::sc_context</class>
    <namespace>sc_core</namespace>
    <namespace>sc_dt</namespace>
    <member kind="enumeration">
      <type></type>
      <name>sc_context_begin</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NOW</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707ba1a2efdcd4a33cdc683c11659bb8388f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LATER</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707ba8c6efc38edcc0bb78fff64747e4ca724</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fix.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00113</filename>
    <includes id="a00128" name="sc_fxnum.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxnum.h</includes>
    <class kind="class">sc_dt::sc_fix</class>
    <class kind="class">sc_dt::sc_fix_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a527c827dcbd9e45098d2e90214092353</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a527c827dcbd9e45098d2e90214092353</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a6db9161cdf4a85ecee77101a30ef3c13</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_B</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a304f66e70293afd1bd0f125995305312</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a765c3b8c2bc5a94be853a374479f349d</anchor>
      <arglist>(op, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a84e85d84015c974edabb15baef654c6a</anchor>
      <arglist>(fnc, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad35572d440c0c233f9f4fa8a2318de40</anchor>
      <arglist>(op, op2, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a6db9161cdf4a85ecee77101a30ef3c13</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_B</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a304f66e70293afd1bd0f125995305312</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a765c3b8c2bc5a94be853a374479f349d</anchor>
      <arglist>(op, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a84e85d84015c974edabb15baef654c6a</anchor>
      <arglist>(fnc, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad35572d440c0c233f9f4fa8a2318de40</anchor>
      <arglist>(op, op2, tp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a955bc53408f7a3b67e0e7e96f599ac</anchor>
      <arglist>(sc_fix &amp;c, const sc_fix &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a105427a5d4f4e3bd62c2aeef146b2033</anchor>
      <arglist>(sc_fix_fast &amp;c, const sc_fix_fast &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fixed.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00116</filename>
    <includes id="a00113" name="sc_fix.h" local="yes" imported="no">sysc/datatypes/fx/sc_fix.h</includes>
    <class kind="class">sc_dt::sc_fixed</class>
    <class kind="class">sc_dt::sc_fixed_fast</class>
    <class kind="class">sc_dt::sc_fixed</class>
    <class kind="class">sc_dt::sc_fixed_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>aa5e9f01b5c610018f766d9fad60886a0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>aa5e9f01b5c610018f766d9fad60886a0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fx_ids.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00119</filename>
    <includes id="a00377" name="sc_report.h" local="yes" imported="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>adf1a4bca70d997e7806a8bde0d2be0c2</anchor>
      <arglist>(SC_ID_INVALID_WL_, 300, &quot;total wordlength &lt;= 0 is not valid&quot;) SC_DEFINE_MESSAGE(SC_ID_INVALID_N_BITS_</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxcast_switch.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00122</filename>
    <includes id="a00110" name="sc_context.h" local="yes" imported="no">sysc/datatypes/fx/sc_context.h</includes>
    <class kind="class">sc_dt::sc_fxcast_switch</class>
    <namespace>sc_dt</namespace>
    <member kind="typedef">
      <type>sc_context&lt; sc_fxcast_switch &gt;</type>
      <name>sc_fxcast_context</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2bddc50e14b45cb480572d0b3991ab6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9f28f612a1193481340c21eadae8a76b</anchor>
      <arglist>(const sc_fxcast_switch &amp;a, const sc_fxcast_switch &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac178878fbad4e4ea748f2d29ac88176f</anchor>
      <arglist>(const sc_fxcast_switch &amp;a, const sc_fxcast_switch &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea6f78010aa833b7e353cf262d934670</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxcast_switch &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxdefs.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00125</filename>
    <includes id="a00365" name="sc_machine.h" local="yes" imported="no">sysc/utils/sc_machine.h</includes>
    <includes id="a00119" name="sc_fx_ids.h" local="yes" imported="no">sysc/datatypes/fx/sc_fx_ids.h</includes>
    <includes id="a00197" name="sc_nbutils.h" local="yes" imported="no">sysc/datatypes/int/sc_nbutils.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_ASSERT_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae5e73b8499eec23dcadc17e0e46744d9</anchor>
      <arglist>(cnd, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_ERROR_IF_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a259a26ad320641bed7309c258d174d83</anchor>
      <arglist>(cnd, id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_WL_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a3010f4a3829f246bd506a021dcdb5547</anchor>
      <arglist>(wl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_N_BITS_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a70c27d3300bb8299507478168e3cd5b6</anchor>
      <arglist>(n_bits)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_DIV_WL_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>af8c32398727cd68b3c0773fc949af28c</anchor>
      <arglist>(div_wl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_CTE_WL_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aabed28aef808fadce47bce7a6eaa1d81</anchor>
      <arglist>(cte_wl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_MAX_WL_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a7d1e232d5c80ed2d5deabc9cb627781e</anchor>
      <arglist>(max_wl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_OBSERVER_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a28cb9f0dd2e8ec3512fd642e4f1f796d</anchor>
      <arglist>(object, observer_type, event)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_OBSERVER_DEFAULT_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aac74384292ef3c836ae27dd80f3c09b5</anchor>
      <arglist>(observer_type)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_enc</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TC_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021da7d25472237e7abeee4b1dfea810a6dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_US_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021da17061f9e684d33d50a972d1406500d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_q_mode</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a36e005cfebfe572beead8ac908a98a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721ab8065af719aa3b64fcb7e8b762777d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_MIN_INF</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a5a6dc4fabb906810d07b4988a3556306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_INF</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721ae54536bffed693c870ca369ec8105232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_CONV</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a3208a876fbd9d52d1d6831e597701fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TRN</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721aaceb6b9a67ca6b69bda017d5b85ad59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TRN_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a916ed5dda67312b52f23dc5e5b688ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_o_mode</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5ae2ac4621bb524bf811267c20a93cf663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a9770e01c1e895c56da0da5ae03b223f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT_SYM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a77ced946513ae051d4b02772a5266a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WRAP</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a1cb308125ec9f13dd2d00062d9821333</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WRAP_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a26ccb388310d8f37081295aa5c5c1273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_switch</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OFF</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9a4c634ecb88fc0afc63cc4a614c091c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ON</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9a9134bc2b049e2b99d40c2aa3ccbac6e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_fmt</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_F</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327ba279868695677057493ec01c302caf0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_E</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327baa4d9bb83f1d3f84d59edf29e5e20da30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0b524f782cc4c4b38931b83087f78bb6</anchor>
      <arglist>(sc_enc)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac5f195e1e3ab263db5b82afdeb6832cb</anchor>
      <arglist>(::std::ostream &amp;os, sc_enc enc)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a50dbb1c75ce3f96dfd8848dc1b17a480</anchor>
      <arglist>(sc_q_mode)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a004fc647440a6b9874ac7e59ce628263</anchor>
      <arglist>(::std::ostream &amp;os, sc_q_mode q_mode)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab1831b8229fe1a182af69b7e41ac033e</anchor>
      <arglist>(sc_o_mode)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a34eedbc39bb5a45d6e0a3558b10c7a85</anchor>
      <arglist>(::std::ostream &amp;os, sc_o_mode o_mode)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af381016a4f56faf8e83b3e7b2e8e18d7</anchor>
      <arglist>(sc_switch)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf4c2c6684262493a8563f7e1716c672</anchor>
      <arglist>(::std::ostream &amp;os, sc_switch sw)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a84487ff21bbcf6be93758530f09056f9</anchor>
      <arglist>(sc_fmt)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a484288fea6bd473f9878224977a5ca7c</anchor>
      <arglist>(::std::ostream &amp;os, sc_fmt fmt)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c710cfefc3e2479e0409a4a73e67e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_IWL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5175a68ec521b2e60d4851732dbf95fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_q_mode</type>
      <name>SC_BUILTIN_Q_MODE_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a27f91512aea0915fd1516f67f0ec583c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_o_mode</type>
      <name>SC_BUILTIN_O_MODE_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a15ae90f315a8a65d2103b357df7e1192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_N_BITS_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aac37b82256b6ec89e1f12b7771e6cde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a12b02013145ae31ea2a6abaa1fd54f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_IWL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a76d2025776aba97329359a6fb84b7943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_q_mode</type>
      <name>SC_DEFAULT_Q_MODE_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c2d016b13dfc62ab0fb86e3d41a8bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_o_mode</type>
      <name>SC_DEFAULT_O_MODE_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa450d625be656c8cd2b7b800a8376a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_N_BITS_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afccd3909356b1dbf4b8f848928b3bd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_switch</type>
      <name>SC_BUILTIN_CAST_SWITCH_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad6ec30d471c7a129add9afba693650f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_switch</type>
      <name>SC_DEFAULT_CAST_SWITCH_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a487b0566485d3c509821dc6abdcf1f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_DIV_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af892a30c60b809ee4cf06e18c61c1246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_CTE_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a414bf34e3f516ed0080701932ac210c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_MAX_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a70266da6c35d8b6d62f55e8c1dfc3bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_DIV_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a000561825be47f3eb33a9169937de0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_CTE_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adbdbfc6e843d840671cc2a8c314d4819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_MAX_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a76f43ffcab4af73b52d3e1e128745c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxnum.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00128</filename>
    <includes id="a00101" name="sc_lv_base.h" local="yes" imported="no">sysc/datatypes/bit/sc_lv_base.h</includes>
    <includes id="a00137" name="sc_fxval.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxval.h</includes>
    <includes id="a00158" name="scfx_params.h" local="yes" imported="no">sysc/datatypes/fx/scfx_params.h</includes>
    <includes id="a00131" name="sc_fxnum_observer.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxnum_observer.h</includes>
    <class kind="class">sc_dt::sc_fxnum_bitref</class>
    <class kind="class">sc_dt::sc_fxnum_fast_bitref</class>
    <class kind="class">sc_dt::sc_fxnum_subref</class>
    <class kind="class">sc_dt::sc_fxnum_fast_subref</class>
    <class kind="class">sc_dt::sc_fxnum</class>
    <class kind="class">sc_dt::sc_fxnum_fast</class>
    <namespace>sc_core</namespace>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a38d1621b1bc3b8e8089134b2783e5cad</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T_A</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a2df23f74802446a7d79c6615a51e627c</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_A</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac1c34f2994492559591fa70c91370880</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a38d1621b1bc3b8e8089134b2783e5cad</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T_A</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a2df23f74802446a7d79c6615a51e627c</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_A</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac1c34f2994492559591fa70c91370880</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTOR_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a16889944bdbdfcb77d66d0d1321b85d6</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a05774b3ea2367612def9565250689727</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a054023bf409b22a07bc9aa94201c8bb2</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae0b5c4034f8c1b2fe3f65083a727834a</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a4a7e357a84fd89e3226c2ba8b8ee499e</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a3e0f55d91ad5cf8b96f0c7e3308606b6</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a00f974f3761cc2ffa939c703235998d1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1d25ae3746ed42e5adc77d24c11c2c72</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTOR_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a16889944bdbdfcb77d66d0d1321b85d6</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a05774b3ea2367612def9565250689727</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a054023bf409b22a07bc9aa94201c8bb2</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae0b5c4034f8c1b2fe3f65083a727834a</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a4a7e357a84fd89e3226c2ba8b8ee499e</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a3e0f55d91ad5cf8b96f0c7e3308606b6</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a00f974f3761cc2ffa939c703235998d1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1d25ae3746ed42e5adc77d24c11c2c72</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9ce95d837bcaac52c7a4a7bf7427cb77</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a6bf992c945fea7afc3a61ae20a1985c8</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_RED_FNC</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1adcb49210a098c71b71a3a0421d7e5a</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9ce95d837bcaac52c7a4a7bf7427cb77</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a6bf992c945fea7afc3a61ae20a1985c8</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_RED_FNC</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1adcb49210a098c71b71a3a0421d7e5a</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>af2de12c787025ca23976ceb2f43389ee</anchor>
      <arglist>(tp, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_A</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a5762ad586903df135b97eac548f61cc0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_B</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a34854a3bcaf1808a3cce7696b18f4dcb</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_C</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a3a4f168b0842a40debc40ed6d1f3edd3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_D</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa649739131e95ec6b4da0d422bd13e15</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a41dc909ee3659cca28b7a4a4f22871c7</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ade890965d9f4916970cbfd24ae35a26e</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a273f2d0fe0483a39fb162d989313cfc1</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a30ddfcd5028f3f4e2b30012d22b5d405</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a614eb667fee172b0e16fa0c5b1b46db1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a0b803efa0b3bf66af70f22056cad9392</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1999552b6d425eff4f719f47c56fa6a1</anchor>
      <arglist>(op, ret, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a95a77a83af01830e8b7d0c0897064625</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a063c804a23870ee20d7e763b2539eb33</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>abdbf3346f0571d0d2c0656fdfb4fb229</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>af40a6bd2e88f0791e08e12d3e760e788</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a824acdb63beb5f312daa3cbb87025fd7</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>af2de12c787025ca23976ceb2f43389ee</anchor>
      <arglist>(tp, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_A</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a5762ad586903df135b97eac548f61cc0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_B</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a34854a3bcaf1808a3cce7696b18f4dcb</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_C</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a3a4f168b0842a40debc40ed6d1f3edd3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa2b28b4c2398636160e44ba69c5cc4d6</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ab729d8ca96e5a31ee5dd8bc98f6de545</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a782e3b52cc4ad73f7161fab633b68b34</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a234eead18aac71ce9c14755b341df352</anchor>
      <arglist>(fnc, op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>af5646975099f0855142c0a47314f3bbb</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa12b447e98aaee61e583483e17f09356</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9ce95d837bcaac52c7a4a7bf7427cb77</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>af2e14b48dbb1717b796a714806f85233</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a6bf992c945fea7afc3a61ae20a1985c8</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a41dc909ee3659cca28b7a4a4f22871c7</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a273f2d0fe0483a39fb162d989313cfc1</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a30ddfcd5028f3f4e2b30012d22b5d405</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a0b803efa0b3bf66af70f22056cad9392</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1999552b6d425eff4f719f47c56fa6a1</anchor>
      <arglist>(op, ret, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a063c804a23870ee20d7e763b2539eb33</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>abdbf3346f0571d0d2c0656fdfb4fb229</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a824acdb63beb5f312daa3cbb87025fd7</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a234eead18aac71ce9c14755b341df352</anchor>
      <arglist>(fnc, op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa12b447e98aaee61e583483e17f09356</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0c8514de9dc84334b797fee9442d90a3</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9ec9d7bbbd2a5223b1e1530c473f72eb</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a53d05b51687e1a35abd74c28b603044c</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af22803f6c03db7267c1172c8926b1375</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af8318d41bf64fbc386a5a3396af5bf42</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a113f187c0775da905de64d5f28510961</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8bdf9ce4c7ee3a4cbbe88cbc27935601</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3873c16f9d4e1475a13306fea2d88464</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a11bf5965abed66b3e761ae72eeb94cd0</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2c48d5493cb4af546a93f1d8e78658e9</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a20e66f83968238b3d1ef0c5fbf91f35c</anchor>
      <arglist>(const sc_fxnum &amp;a, const sc_fxnum &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3a9b7dbf09938a4c340b7eb6074fd20b</anchor>
      <arglist>(const sc_fxnum &amp;a, const sc_fxval &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e74e52150c5d31ba6f96246367c5849</anchor>
      <arglist>(const sc_fxval &amp;a, const sc_fxnum &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a677b680b89421b48a0469e193deadaf4</anchor>
      <arglist>(const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5cad6b11c65f652e42fb702fb0f02147</anchor>
      <arglist>(const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8e9a274cadb18414dcbada92a383cca8</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a783c5d3a7d9130b280aade86b1a3a13b</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a05e4628de672ebbf569727d275a39e09</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a949dd60e2b454c7ee30915c96834880d</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acdda03bcd491399b512de122463cf6bc</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a563f279d110fc8d00d26f1d580357806</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a091952271ce53c1642f87cc5df61f491</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc439cdbfe603a211914e1f7e442475b</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abdc22fc290d305a9c59e51672808b68f</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, const sc_fxnum_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1232d8854986f916c9c1dd4e5044f6ce</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, const sc_fxval_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac09fafb6800f5149e0941f49607bd086</anchor>
      <arglist>(const sc_fxval_fast &amp;a, const sc_fxnum_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a858ea170c7e3a4ef1861bc2c4a3d2b41</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9c818fed65ba40a986d70988ac9dec64</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac739e4382ff824deb61e47505a2b7250</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa701ad8002f0787931a72b712e03836a</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac1bc8f0c659c5c410d265faf207bf694</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67004778acc4b3bef9d4e7478925b7ca</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a368651ad8de773726fe200084ef78670</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7ce69e2e14b076ef6aec072cbd8effa8</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxnum_observer.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00131</filename>
    <includes id="a00125" name="sc_fxdefs.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxdefs.h</includes>
    <class kind="class">sc_dt::sc_fxnum_observer</class>
    <class kind="class">sc_dt::sc_fxnum_fast_observer</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_CONSTRUCT_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a8b8acced2276b16af47677b715791cad</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_DESTRUCT_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a8d3e51cd43bc5a894bc71a7d30c7a83a</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_READ_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a4769a00a1e0b1b25dcff29bfc405ad21</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_WRITE_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a23254e913090adfaef6da9900db099dc</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_DEFAULT_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a3b810a4e286935dff0536a8a144c33ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_CONSTRUCT_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a9c5f0460ed7a9c4b0a71f22161741e44</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_DESTRUCT_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a65ce83fd05f31ab36ded43d3c3b13d73</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_READ_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ace1285cb9ad0b5d11399e526fb50824d</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_WRITE_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>acc36d6188e19146688d6b409fbd40002</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_DEFAULT_</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>add66f30e1d96da3534f09dc1b2cb7af5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxtype_params.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00134</filename>
    <includes id="a00110" name="sc_context.h" local="yes" imported="no">sysc/datatypes/fx/sc_context.h</includes>
    <class kind="class">sc_dt::sc_fxtype_params</class>
    <namespace>sc_dt</namespace>
    <member kind="typedef">
      <type>sc_context&lt; sc_fxtype_params &gt;</type>
      <name>sc_fxtype_context</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8b108248872f9934c328c5ca24729360</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab78be5087d037d1a7e56cbaecd89f9a2</anchor>
      <arglist>(const sc_fxtype_params &amp;a, const sc_fxtype_params &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0561b8a64aeb14ae141b087e10f620b8</anchor>
      <arglist>(const sc_fxtype_params &amp;a, const sc_fxtype_params &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa1f6615c06683ab1a12c4593102f4579</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxtype_params &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxval.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00137</filename>
    <includes id="a00164" name="scfx_rep.h" local="yes" imported="no">sysc/datatypes/fx/scfx_rep.h</includes>
    <includes id="a00182" name="sc_int_base.h" local="yes" imported="no">sysc/datatypes/int/sc_int_base.h</includes>
    <includes id="a00206" name="sc_uint_base.h" local="yes" imported="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00200" name="sc_signed.h" local="yes" imported="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00209" name="sc_unsigned.h" local="yes" imported="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <includes id="a00140" name="sc_fxval_observer.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxval_observer.h</includes>
    <class kind="class">sc_dt::sc_fxval</class>
    <class kind="class">sc_dt::sc_fxval_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCFX_EXPLICIT_</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a3904bdeb9bf148c37fd3fd4ebc85a139</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCFX_EXPLICIT_OTHER_</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a96d6f8524e2aa1afa261547a3e1c692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a05774b3ea2367612def9565250689727</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a054023bf409b22a07bc9aa94201c8bb2</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ae0b5c4034f8c1b2fe3f65083a727834a</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a4a7e357a84fd89e3226c2ba8b8ee499e</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a3e0f55d91ad5cf8b96f0c7e3308606b6</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a00f974f3761cc2ffa939c703235998d1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a1d25ae3746ed42e5adc77d24c11c2c72</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a05774b3ea2367612def9565250689727</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a054023bf409b22a07bc9aa94201c8bb2</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ae0b5c4034f8c1b2fe3f65083a727834a</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a4a7e357a84fd89e3226c2ba8b8ee499e</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a3e0f55d91ad5cf8b96f0c7e3308606b6</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a00f974f3761cc2ffa939c703235998d1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a1d25ae3746ed42e5adc77d24c11c2c72</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af2de12c787025ca23976ceb2f43389ee</anchor>
      <arglist>(tp, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_A</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a5762ad586903df135b97eac548f61cc0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_B</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a34854a3bcaf1808a3cce7696b18f4dcb</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_C</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a3a4f168b0842a40debc40ed6d1f3edd3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a41dc909ee3659cca28b7a4a4f22871c7</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ade890965d9f4916970cbfd24ae35a26e</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a273f2d0fe0483a39fb162d989313cfc1</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a30ddfcd5028f3f4e2b30012d22b5d405</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a614eb667fee172b0e16fa0c5b1b46db1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a0b803efa0b3bf66af70f22056cad9392</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a1999552b6d425eff4f719f47c56fa6a1</anchor>
      <arglist>(op, ret, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a95a77a83af01830e8b7d0c0897064625</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a063c804a23870ee20d7e763b2539eb33</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>abdbf3346f0571d0d2c0656fdfb4fb229</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af40a6bd2e88f0791e08e12d3e760e788</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a824acdb63beb5f312daa3cbb87025fd7</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af2de12c787025ca23976ceb2f43389ee</anchor>
      <arglist>(tp, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_A</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a5762ad586903df135b97eac548f61cc0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_B</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a34854a3bcaf1808a3cce7696b18f4dcb</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_C</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a3a4f168b0842a40debc40ed6d1f3edd3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aa2b28b4c2398636160e44ba69c5cc4d6</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ab729d8ca96e5a31ee5dd8bc98f6de545</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a782e3b52cc4ad73f7161fab633b68b34</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a234eead18aac71ce9c14755b341df352</anchor>
      <arglist>(fnc, op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af5646975099f0855142c0a47314f3bbb</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aa12b447e98aaee61e583483e17f09356</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a9ce95d837bcaac52c7a4a7bf7427cb77</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af2e14b48dbb1717b796a714806f85233</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a6bf992c945fea7afc3a61ae20a1985c8</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af432f76dc658be1bfdb48fa5381bd1f0</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a800919e0bbaa4f1c5916ea4b2de31d28</anchor>
      <arglist>(const sc_fxval &amp;a, const sc_fxval &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abb259d9e83f9d10cdda02923f19201fe</anchor>
      <arglist>(/, div, int64) DEFN_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9db290257eb17a9a83abded8ebce5b17</anchor>
      <arglist>(/, div, const sc_int_base &amp;) DEFN_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a15b2db080b11156aa371d5627b4f7d4d</anchor>
      <arglist>(/, div, const sc_signed &amp;) inline const sc_fxval operator&lt;&lt;(const sc_fxval &amp;a</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac47e1a3172e6f5bcd4e777d914d5b9fa</anchor>
      <arglist>(const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a807d44a1bc74c1e361dbb894b4af096f</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a31a9a495d590c38c61e6e0e0c29dfa8b</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a55d78ab4bc96736405cb032a6b7e80ad</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2d6bc5eaaf8e61d20f6914ccdf34f3bc</anchor>
      <arglist>(::std::istream &amp;is, sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a04da20360528ce2fcc03e05ae859d35d</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d627a9bf3daa1e95f51f9dc04027247</anchor>
      <arglist>(const sc_fxval_fast &amp;a, const sc_fxval_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1973913feff30f8e9d2b25d10624673a</anchor>
      <arglist>(const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a60de763f1619154d44b9e168816c124f</anchor>
      <arglist>(const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5e3592df81d5a22a9c59f3ae9b3e31f9</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abc14ce12146bd4239bb5999e593d4d30</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e75d1989b2ede5e3e26870465f58258</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab3bdce2715902a1440f968b7d45745e5</anchor>
      <arglist>(::std::istream &amp;is, sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>div</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a12114c547c96d81851980cc9dd7829cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base int</type>
      <name>b</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf3ee606b574990426012b8c6cc286f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxval_observer.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00140</filename>
    <includes id="a00125" name="sc_fxdefs.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxdefs.h</includes>
    <class kind="class">sc_dt::sc_fxval_observer</class>
    <class kind="class">sc_dt::sc_fxval_fast_observer</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_CONSTRUCT_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>af9b58658ab42f9d123b87dcbb0ac3abd</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_DESTRUCT_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a8404f7ee975a1f21e7d85412a670d59f</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_READ_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>af5e64d2a859a1f8a4db68f75503b3eac</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_WRITE_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a89c0a1e643584be8a57a200f982094f1</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_DEFAULT_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a12ad4b75d762cd5c333387246d2cb6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_CONSTRUCT_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a93256f75572a3c44060aba24a54b34e2</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_DESTRUCT_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a54964ee356bfdf3c1f76e24556fd3a41</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_READ_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a90d5abc46dbff59c2aaeeeb61d31fb3f</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_WRITE_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ad3032b802cddd7be71d05b661c7abe05</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_DEFAULT_</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ac4dcc6bc844cec41a494bf3a69c8f8f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_ufix.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00143</filename>
    <includes id="a00128" name="sc_fxnum.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxnum.h</includes>
    <class kind="class">sc_dt::sc_ufix</class>
    <class kind="class">sc_dt::sc_ufix_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a527c827dcbd9e45098d2e90214092353</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a527c827dcbd9e45098d2e90214092353</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_A</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6db9161cdf4a85ecee77101a30ef3c13</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_B</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a304f66e70293afd1bd0f125995305312</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a765c3b8c2bc5a94be853a374479f349d</anchor>
      <arglist>(op, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a84e85d84015c974edabb15baef654c6a</anchor>
      <arglist>(fnc, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad35572d440c0c233f9f4fa8a2318de40</anchor>
      <arglist>(op, op2, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_A</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6db9161cdf4a85ecee77101a30ef3c13</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_B</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a304f66e70293afd1bd0f125995305312</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a765c3b8c2bc5a94be853a374479f349d</anchor>
      <arglist>(op, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a84e85d84015c974edabb15baef654c6a</anchor>
      <arglist>(fnc, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad35572d440c0c233f9f4fa8a2318de40</anchor>
      <arglist>(op, op2, tp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aceb1e4e55b023f8ab6d1a531e4e16a63</anchor>
      <arglist>(sc_ufix &amp;c, const sc_ufix &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7707d5e3a59012124dacabe28635d0d8</anchor>
      <arglist>(sc_ufix_fast &amp;c, const sc_ufix_fast &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_ufixed.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00146</filename>
    <includes id="a00143" name="sc_ufix.h" local="yes" imported="no">sysc/datatypes/fx/sc_ufix.h</includes>
    <class kind="class">sc_dt::sc_ufixed</class>
    <class kind="class">sc_dt::sc_ufixed_fast</class>
    <class kind="class">sc_dt::sc_ufixed</class>
    <class kind="class">sc_dt::sc_ufixed_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa5e9f01b5c610018f766d9fad60886a0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa5e9f01b5c610018f766d9fad60886a0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scfx_ieee.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00149</filename>
    <includes id="a00125" name="sc_fxdefs.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxdefs.h</includes>
    <class kind="union">sc_dt::ieee_double</class>
    <class kind="class">sc_dt::scfx_ieee_double</class>
    <class kind="union">sc_dt::ieee_float</class>
    <class kind="class">sc_dt::scfx_ieee_float</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCFX_MASK_</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a4ea1170e3c13a3678ae194554f53a1ac</anchor>
      <arglist>(Size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSB_STATEMENT</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ad714ed744f53d9618bb8522411f97c6d</anchor>
      <arglist>(x, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LSB_STATEMENT</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>abd9722c6a656a6692e4e44229197ce81</anchor>
      <arglist>(x, n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scfx_pow2</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa63fb8186f45368abbacb5ea2184594b</anchor>
      <arglist>(int exp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uint64_to_double</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a24fe139e3129d25b9177241dca681fd8</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_BIAS</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa15d1db6dde3e56e3b7f56cc8c4c3338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_DOUBLE_E_MAX</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67b6c725c1bd21c1224e06acd8622235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_DOUBLE_E_MIN</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2403f43817bd898d7b5e1e50a7dc9351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9eec5b400f57cad95902df53b28f53c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M0_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a73a9d2d31ee139d8c43bdf0576cc0a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M1_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1aa9bcc69f8f57d6dd5dfec6e72958bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_E_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d4a1ec8357398ed60abef614c0751af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_BIAS</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa54b10bf631227df8da768c4e6b99d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_FLOAT_E_MAX</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a76e745625b89b8e91d2ed90c6c8294e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_FLOAT_E_MIN</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a180cbdc86768018a143b9fa0cc67fd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_M_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afeca4b01739deaa4c4e5b159e8a3dda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_E_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92e243f3ce790b0a4e163d2e181e072e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scfx_mant.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00152</filename>
    <includes id="a00149" name="scfx_ieee.h" local="yes" imported="no">sysc/datatypes/fx/scfx_ieee.h</includes>
    <includes id="a00170" name="scfx_utils.h" local="yes" imported="no">sysc/datatypes/fx/scfx_utils.h</includes>
    <includes id="a00263" name="sc_macros.h" local="yes" imported="no">sysc/kernel/sc_macros.h</includes>
    <class kind="class">sc_dt::scfx_mant</class>
    <class kind="class">sc_dt::scfx_mant_ref</class>
    <namespace>sc_dt</namespace>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>word</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adef2a0396a836853f3db5ff1bff13543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>half_word</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0c8d5569edd76b5d46714bc543d80075</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complement</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a09a929a414f496ff57e4016e94d77ac3</anchor>
      <arglist>(scfx_mant &amp;target, const scfx_mant &amp;source, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa9043fd24fd8a5cc2c4ac46cec2da4ea</anchor>
      <arglist>(scfx_mant &amp;mant)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scfx_other_defs.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00155</filename>
    <includes id="a00119" name="sc_fx_ids.h" local="yes" imported="no">sysc/datatypes/fx/sc_fx_ids.h</includes>
    <includes id="a00200" name="sc_signed.h" local="yes" imported="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00209" name="sc_unsigned.h" local="yes" imported="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <includes id="a00182" name="sc_int_base.h" local="yes" imported="no">sysc/datatypes/int/sc_int_base.h</includes>
    <includes id="a00206" name="sc_uint_base.h" local="yes" imported="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00341" name="sc_trace.h" local="yes" imported="no">sysc/tracing/sc_trace.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a36693e0e646c1365cff704928aefd64a</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxval &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a24a16c1d0407f4ab40651909e0fdc6bc</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxval *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66485f8977150acc35b2f7568f853358</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxval_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afbd79bb5c030b066748836df679b18dc</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxval_fast *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1b9b5a8fb4445b38aaade67c90334d1b</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxnum &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a80080d29a2ce5b61aaff6cb6f5df6fe7</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxnum *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aca4518ce22cd355eb8d1d00216962224</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxnum_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acabe26085f26ba6eff14ae3e5542fcee</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxnum_fast *object, const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scfx_params.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00158</filename>
    <includes id="a00119" name="sc_fx_ids.h" local="yes" imported="no">sysc/datatypes/fx/sc_fx_ids.h</includes>
    <includes id="a00122" name="sc_fxcast_switch.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxcast_switch.h</includes>
    <includes id="a00134" name="sc_fxtype_params.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxtype_params.h</includes>
    <class kind="class">sc_dt::scfx_params</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>scfx_pow10.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00161</filename>
    <includes id="a00164" name="scfx_rep.h" local="yes" imported="no">sysc/datatypes/fx/scfx_rep.h</includes>
    <class kind="class">sc_dt::scfx_pow10</class>
    <namespace>sc_dt</namespace>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_POW10_TABLE_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae12f193164fb7ce3732c2c1e497ac24d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scfx_rep.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00164</filename>
    <includes id="a00152" name="scfx_mant.h" local="yes" imported="no">sysc/datatypes/fx/scfx_mant.h</includes>
    <includes id="a00158" name="scfx_params.h" local="yes" imported="no">sysc/datatypes/fx/scfx_params.h</includes>
    <includes id="a00167" name="scfx_string.h" local="yes" imported="no">sysc/datatypes/fx/scfx_string.h</includes>
    <class kind="class">sc_dt::scfx_index</class>
    <class kind="class">sc_dt::scfx_rep</class>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7856865d96ec59f1075928427007fd46</anchor>
      <arglist>(scfx_rep &amp;, const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>neg_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c1d5f377247f61ca17010d3bdaa2a6e</anchor>
      <arglist>(const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>mult_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a285a917dbd527c8b93c34ca99490e47d</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>div_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc1ea3eec3b7495711acc7d13a64c436</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_DIV_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>add_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afffefbd3e3ede8a6cc12866215d591f7</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>sub_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc90566db7ac23abb52a85e1bd12ee3e</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>lsh_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99ec8dfd7db50ace2cbddfbfb9ae7c4b</anchor>
      <arglist>(const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>rsh_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad70d0c6739b6fd8f00b0d1684a7a2c4c</anchor>
      <arglist>(const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cmp_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae65ba2bbf96fa8c7ada907eeb6118c16</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>quantization_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a655fdcac856937f1cd78feea2415fc28</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_params &amp;params, bool &amp;q_flag)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>overflow_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a199a0b666f49bbdd11adf4258d160c3f</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_params &amp;params, bool &amp;o_flag)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>min_mant</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f480fe345956f9a5947f5720cfccd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bits_in_int</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abe9ff4cc791b13b00baee44646dc3306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bits_in_word</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afa90f722a8aa6b18569f37d2b7d68206</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scfx_string.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00167</filename>
    <class kind="class">sc_dt::scfx_string</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>scfx_utils.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/fx/</path>
    <filename>a00170</filename>
    <includes id="a00125" name="sc_fxdefs.h" local="yes" imported="no">sysc/datatypes/fx/sc_fxdefs.h</includes>
    <includes id="a00158" name="scfx_params.h" local="yes" imported="no">sysc/datatypes/fx/scfx_params.h</includes>
    <includes id="a00167" name="scfx_string.h" local="yes" imported="no">sysc/datatypes/fx/scfx_string.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MSB_STATEMENT</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a842911b9a877b552c28fe646296dfad6</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LSB_STATEMENT</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a49a323234f71a30782f9771281a23a59</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_find_msb</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad060c75dcac3bff34aaad7566c504269</anchor>
      <arglist>(unsigned long x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_find_lsb</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67d1e070e7cff85c5c808d469162d06e</anchor>
      <arglist>(unsigned long x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_parse_sign</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a395131cdd634e91be42cebea8a21ea40</anchor>
      <arglist>(const char *&amp;s, bool &amp;sign_char)</arglist>
    </member>
    <member kind="function">
      <type>sc_numrep</type>
      <name>scfx_parse_prefix</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d77d34c773e6671de262ab48fb1f615</anchor>
      <arglist>(const char *&amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_parse_base</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab57cc226d2e1dbc481e59f0411d305ec</anchor>
      <arglist>(const char *&amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_equal</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a536b6b070ed4b614b8dfc9a5cbed8144</anchor>
      <arglist>(const char *a, const char *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_nan</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c9d47d97ab0c1a50bc186bbcf55804b</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_inf</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a16c2b3ec391561205e471a2cdde5df32</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_exp_start</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afb5534e36031b78f84c0b7c425796bb0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_digit</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1a70667adefc25d20dc089f8ed320ba0</anchor>
      <arglist>(char c, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_to_digit</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8f4dbf3f304359315fc31cb12f1eb1cd</anchor>
      <arglist>(char c, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_nan</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6a45c9eddf266f175cdf8633b368ba2</anchor>
      <arglist>(scfx_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_inf</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a31ec84c4d33e92f314f8627eae2b7f96</anchor>
      <arglist>(scfx_string &amp;s, bool negative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_prefix</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4ba0eeab8fbd76ed63d8bfcf36fcb3a1</anchor>
      <arglist>(scfx_string &amp;s, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_exp</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6759f57610516dc3ef24f3f701940fdc</anchor>
      <arglist>(scfx_string &amp;s, int exp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_tc2csd</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a127e274476a2d0d37b99d473cf143d4a</anchor>
      <arglist>(scfx_string &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_csd2tc</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a582fc0daca35ddc7d2d8d65e940e5e20</anchor>
      <arglist>(scfx_string &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bigint.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00173</filename>
    <includes id="a00200" name="sc_signed.h" local="yes" imported="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00209" name="sc_unsigned.h" local="yes" imported="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <class kind="class">sc_dt::sc_bigint</class>
    <class kind="class">sc_dt::sc_bigint</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_biguint.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00176</filename>
    <includes id="a00200" name="sc_signed.h" local="yes" imported="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00209" name="sc_unsigned.h" local="yes" imported="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <class kind="class">sc_dt::sc_biguint</class>
    <class kind="class">sc_dt::sc_biguint</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_int.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00179</filename>
    <includes id="a00182" name="sc_int_base.h" local="yes" imported="no">sysc/datatypes/int/sc_int_base.h</includes>
    <class kind="class">sc_dt::sc_int</class>
    <class kind="class">sc_dt::sc_int</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_int_base.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00182</filename>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00215" name="sc_value_base.h" local="yes" imported="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00185" name="sc_int_ids.h" local="yes" imported="no">sysc/datatypes/int/sc_int_ids.h</includes>
    <includes id="a00188" name="sc_length_param.h" local="yes" imported="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00206" name="sc_uint_base.h" local="yes" imported="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00389" name="sc_temporary.h" local="yes" imported="no">sysc/utils/sc_temporary.h</includes>
    <class kind="class">sc_dt::sc_int_bitref_r</class>
    <class kind="class">sc_dt::sc_int_bitref</class>
    <class kind="class">sc_dt::sc_int_subref_r</class>
    <class kind="class">sc_dt::sc_int_subref</class>
    <class kind="class">sc_dt::sc_int_base</class>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a52b8e52f2a13bfb2b5cca397e5afc26b</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aebe2864ca0d95e72a56d849fbfae788a</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79b4a602c7bb291b498f301e39bc1530</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8d64c7d8fd8762c112ae46f211503f77</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad86414a8d27d2afdcd786263470ec367</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0f7fab02514c9a007eb3b7c034b799bc</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3a7d98fd7830f24dce9ffc5e6e8572c9</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a523ab4c72ffead0d06514f30b7de3bf2</anchor>
      <arglist>(::std::istream &amp;, sc_int_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ea5e6016aea4c1e762212c1ede0ed50</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab86ce81bcc9d96c64ae567b8898cd5d1</anchor>
      <arglist>(::std::istream &amp;, sc_int_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2c0f2ff2691d402b6554422f40d32ada</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad4d57f281d313f0e45a478d6df5d936b</anchor>
      <arglist>(::std::istream &amp;, sc_int_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67f370080f954dd2800d815e8d60e2bb</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7bdbd2a8fd306ecd9489060b5e864158</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa252e6366ff6f6fcf4c0e7dc602691c2</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a68efb66b2fa515e736a330ce1e3ad1a8</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf2bb45fa6058e0efd14d9e8910ad528</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afdae976a89c3486d7ed31a602365061a</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2101f276e1032f6fdc800bd264ac30a5</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5b36262df9731c8c89dec5c4c2e4f7cf</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a89a7968ee39893c9d1b23d202ade4cc6</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0da1abf56530e17137eda7c30bdd3ddd</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea04231f49b7604846c402ec5b67d084</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8f41c1b52975945aa86d1e982e684137</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>const uint_type</type>
      <name>mask_int</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8081c802c1c72fce2175e1b1479aa355</anchor>
      <arglist>[SC_INTWIDTH][SC_INTWIDTH]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_int_ids.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00185</filename>
    <includes id="a00377" name="sc_report.h" local="yes" imported="no">sysc/utils/sc_report.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_REGISTER_ID_FAILED_</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ae657c9bf8ae7574a16641c70f9416f64</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_length_param.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00188</filename>
    <includes id="a00110" name="sc_context.h" local="yes" imported="no">sysc/datatypes/fx/sc_context.h</includes>
    <class kind="class">sc_dt::sc_length_param</class>
    <namespace>sc_dt</namespace>
    <member kind="typedef">
      <type>sc_context&lt; sc_length_param &gt;</type>
      <name>sc_length_context</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6e98a92a91036ae4af6adde14ccdc33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a45deb636c84c3717d74d02c45d7d7ab1</anchor>
      <arglist>(const sc_length_param &amp;, const sc_length_param &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06815c1c37ed2a88835f7590a7e42c44</anchor>
      <arglist>(const sc_length_param &amp;, const sc_length_param &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1eed766b520ddb94147c0d99b31f4f36</anchor>
      <arglist>(::std::ostream &amp;os, const sc_length_param &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_nbdefs.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00191</filename>
    <includes id="a00224" name="sc_cmnhdr.h" local="yes" imported="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00227" name="sc_constants.h" local="yes" imported="no">sysc/kernel/sc_constants.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DT_MIXED_COMMA_OPERATORS</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a14cc9339249bf50a84ed70c74c812a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NEG</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a389fe26f7a8b342d8fd4408190c80900</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_ZERO</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a98342000914a46f15358d895383e5bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_POS</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ada46c64cf37b4af7d72599dc0951e871</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NOSIGN</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a6c7486b7a782066ca607406e871b7492</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_BYTE</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a369ecd38b3ab077fc235f892354bb46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_RADIX</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>af813bcb05e1dcf204e1404395ac4e237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_MASK</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a25c8363b88d9b8f73cc6b1a98bba8d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG2_BITS_PER_BYTE</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a9794a22e433da1780d89dc408f225192</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTES_PER_DIGIT_TYPE</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a18464109b5f4fc79dd2891dc544ffd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_DIGIT_TYPE</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a2ebb0ab20be1fcafcf9762f604500366</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTES_PER_DIGIT</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a6294f65ce9fd0f3a47a51f47d0712a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_DIGIT</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac151ab516815f02c5566c6db21dd3850</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGIT_RADIX</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a15926de397795b354e674374a1ae9237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGIT_MASK</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a24522358dc4e1957d6b2afcf64adc4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_HALF_DIGIT</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ad5ccd4e50df2f3e89e4bc018dce43153</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HALF_DIGIT_RADIX</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a02c4f0a5ee7b5ffe06ec568e115e71d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HALF_DIGIT_MASK</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a3053d55bf90330c5d0d0c46d16c2cba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIV_CEIL2</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a6d90f649df39da8c7e440e79dd908fbd</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIV_CEIL</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a490ec0bd20745b2aaeab3d3eeff2f4cc</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_CHAR</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a844b54f8b6fad96bcab1648f54651aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_INT</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>af07b5175fb8244fc1bdd27f9012243fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_LONG</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a2f660aa23a5dbc0f4b8df48b4302b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_INT64</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a00d403d53e8ff422fc838892b967e2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_UINT</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aa177baea59265c6711cc4d3888f95eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_ULONG</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a158233c933acbd5262ad2a61f10d6451</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_UINT64</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a4a634f84877904d1c7efe1c6f24b6244</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_CHAR</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a2cd91a7889b99ce787efa35f4942ea08</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_INT</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aeacc1a5741545b52ac65a9b08168b293</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_LONG</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a68febac496c913325534f8fb6724c88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_INT64</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a4dd0c14291e9ccd90b6e47ac45fc9aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_UINT</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a3082149415e86f56f5df86f30e55d8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_ULONG</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a1e7ac1f05e6b679b21d1592d761e000f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_UINT64</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>abeca2ddcaac1f020fb793cf47d5b10ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LLWIDTH</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ae878d433a84ab8f5626810dc7ba720d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTWIDTH</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aeedc66c3baa6469c2924a58fd3613bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_INTWIDTH</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a6edb67bade708e206888b4c84fa3638b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad7f9b4978963cba9d617a37c385b228a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>small_type</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a24b5ab9d89d2201797c64885ed4a1495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>sc_digit</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac387c29028ace5ebdafd46a173a8146a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>int64</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7241d680b54f08c83418b8743a42b667</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>uint64</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0e509e6e05abf63a5c3f08a342e4cd91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::ios::fmtflags</type>
      <name>fmtflags</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2789e869da81040d303d767eca87589</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64</type>
      <name>int_type</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a91ee067e28f43380d62cc8656effe11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64</type>
      <name>uint_type</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa4830f7c702212e2450d5cda8603a21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_numrep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NOBASE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a57b0fc7080c8e8823dd373416e61e38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a307c54bef660788d5be06b7db68b7942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ab5bd29df600aa251432d9cf565e3969c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEC</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ae9985e111b26103887bc8cb856062d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a3bba378d8c598eaebcbfd61a3341413b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN_US</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a3f0b0a2200db8c111e7275278bac962c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a6b148eae66cb447584899b7b0b25e23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT_US</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a27b98a3dc7d893f39c987f846cd26ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a7422976e4f533f6c8989d33301ffbdb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX_US</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ac20afd6fc8d81e8c690b939a00319713</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a2269b5783b048c0d2c13abc7977c2e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CSD</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a1cec3b96584130b8fce5557f58cda822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT64_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9c2801ca37a185d67aa9278b407b63c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT64_ONE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a83a74813a41ca91db389982e1402828d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT64_32ONES</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab308094ea2477a764488560bf08585d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const small_type</type>
      <name>NB_DEFAULT_BASE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a80a10dce041d6248a0106188e641eafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aafc169e53c7fa9630225eba36bf0e789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT_ONE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a55423481107e039c4b5f9e9b24ab3703</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_nbexterns.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00194</filename>
    <includes id="a00197" name="sc_nbutils.h" local="yes" imported="no">sysc/datatypes/int/sc_nbutils.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_on_help</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3921f7ade17ffb1c421d4748e338fcf2</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mul_on_help_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a904e9ff6a0fea96c600d020f05d6ab1e</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>div_on_help_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af5a50ce79ba43a923a9d99f856d661bb</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mod_on_help_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a48de90c9fe8dfc01a42f07841b31c92e</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mul_on_help_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a46403290b72e490752dfbfe76698f24d</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>div_on_help_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a755579c1ef8ef3e398f949a956ed9c6b</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mod_on_help_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7659b5e856ed0cd22028fce8df295356</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>and_on_help</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aedd2604b7a2a8e7055f0f89bda1eebda</anchor>
      <arglist>(small_type us, int unb, int und, sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>or_on_help</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2d63469de9f74c4d32e4b2cd53b6e31a</anchor>
      <arglist>(small_type us, int unb, int und, sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xor_on_help</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a802a0c1f42ec6072129cbe908121a447</anchor>
      <arglist>(small_type us, int unb, int und, sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_nbutils.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00197</filename>
    <includes id="a00083" name="sc_bit_ids.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00185" name="sc_int_ids.h" local="yes" imported="no">sysc/datatypes/int/sc_int_ids.h</includes>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00377" name="sc_report.h" local="yes" imported="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>sc_numrep</type>
      <name>sc_io_base</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a4d6a1fe9854c877d21a3c4f3609b61</anchor>
      <arglist>(systemc_ostream &amp;, sc_numrep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_io_show_base</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5b4d6728dbab0f65e1855704137f9b78</anchor>
      <arglist>(systemc_ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6fe94d1205dc903ae30475295a4d245b</anchor>
      <arglist>(sc_numrep)</arglist>
    </member>
    <member kind="function">
      <type>systemc_ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a667d282692361dd9aff91510d0cc65ff</anchor>
      <arglist>(systemc_ostream &amp;os, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_valid_base</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af5ff578c91bcb6e1232245554d89048f</anchor>
      <arglist>(sc_numrep base)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>fsm_move</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac5aa5b4dcd3c28606f2d9ccd43402b2a</anchor>
      <arglist>(char c, small_type &amp;b, small_type &amp;s, small_type &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_binary_bits</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab1f6b9c4dc368e6ae6fe80b30eee0cd7</anchor>
      <arglist>(const char *src_p, int dst_n, sc_digit *data_p, sc_digit *ctrl_p=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_hex_bits</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad63b7228e8660882f8f6e1d462011d50</anchor>
      <arglist>(const char *src_p, int dst_n, sc_digit *data_p, sc_digit *ctrl_p=0)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_base_and_sign</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a878be67d31526d60a14587d0376b29df</anchor>
      <arglist>(const char *v, small_type &amp;base, small_type &amp;sign)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>vec_from_str</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a639e6d7b9b00b3e8360c6b2285f34fe1</anchor>
      <arglist>(int unb, int und, sc_digit *u, const char *v, sc_numrep base=SC_NOBASE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a52f549de414c2b831bd032e0091888c0</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad7aa3ecbdb13fce55bcc7ee4b8400a0</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add_on2</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aebe37f5dbaa18c275355c75bb49a52c1</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a637889230463954711e9cfaf3e9b956d</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add_small_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9d8b140ebe8ea39a3d1f89eff00e645b</anchor>
      <arglist>(int ulen, sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9d41b3cfa6492741a77cf06f87665d4d</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9c46fb4349b30ff0dbc1580c96137ab</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub_on2</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2dbdac246f56d5fb75452448b235cde6</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a75c69b396e80979b55821114b01b491d</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub_small_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a54f5d3fcb6577df65e67c929d975d4a8</anchor>
      <arglist>(int ulen, sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_mul</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a94282801a2fd01a4eaff2c4d6a3f5b</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_mul_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acf9544f32c2023f23731d36819058c81</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_mul_small_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a705fd702233215e0f819333c58db5291</anchor>
      <arglist>(int ulen, sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_div_large</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6694adb7785f8527bdbf364e47d7df4e</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_div_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66b8d633dc0820c79e82a4f785041c31</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_rem_large</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af30d7a3b44cf24be0719c36c9066d7e9</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>vec_rem_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0262382eef77fb7f26775d96bdf3f464</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>vec_rem_on_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a32f0d15309df87cc39ce57419b15a33a</anchor>
      <arglist>(int ulen, sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_to_char</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9bc1d7cfdb6c64437a177c27c118684b</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, uchar *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_from_char</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf85497aa259e9c0940d7a3602a6a30f</anchor>
      <arglist>(int ulen, const uchar *u, int vlen, sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_shift_left</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67f34f9ea59ba3f63ba9bf8c2e5fa1e7</anchor>
      <arglist>(int ulen, sc_digit *u, int nsl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_shift_right</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8c15a71757f1ff948c7df323054c852d</anchor>
      <arglist>(int vlen, sc_digit *u, int nsr, sc_digit fill=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_reverse</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a78f56786d262bad8a74643268665951d</anchor>
      <arglist>(int unb, int und, sc_digit *ud, int l, int r=0)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>low_half</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7f53824e85cf89b787dcbb6162764c63</anchor>
      <arglist>(sc_digit d)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>high_half</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a16ebc4ac03e86244730c6c809b9ceadb</anchor>
      <arglist>(sc_digit d)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>high_half_masked</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e8aac3a7f8e9c8bac24b3eed97c27c1</anchor>
      <arglist>(sc_digit d)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3678e6dd6f1ececfa99a4ecaae1c096e</anchor>
      <arglist>(sc_digit h, sc_digit l)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>one_and_ones</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2bee32fd52dc43857ccb08f9dd402d17</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>one_and_zeros</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af15484a06bfcff2e7f5d87eacc3fc6d3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_ord</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79bd522679e87defb63332b5288d1965</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_ord</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa06c483e577006db0c8c577213cd244f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_cmp</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a459d42cc477ec50df7b2ac2e6f106070</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_find_first_nonzero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1344c81493c1d3d0ae5703f4a977ad84</anchor>
      <arglist>(int ulen, const sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_skip_leading_zeros</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af70952510ac7e296d13961a5138133ec</anchor>
      <arglist>(int ulen, const sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_skip_and_cmp</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a477094057f284fea79eddd5da03a286c</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acd7b260c362883667ec539e187c71b55</anchor>
      <arglist>(int from, int ulen, sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9e55798828a40f43e477b98b9ee5472</anchor>
      <arglist>(int ulen, sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_copy</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a68e2f462a319f55f4148fb7b62f43938</anchor>
      <arglist>(int n, sc_digit *u, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_copy_and_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1be3153c54ddf31ff14d95b875046556</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_complement</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aacd270a84cd66dcc069475359ee09548</anchor>
      <arglist>(int ulen, sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from_uint</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a574898cc8e46dfbe5f10fc9ccb0e9fbd</anchor>
      <arglist>(int ulen, sc_digit *u, Type v)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>get_sign</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56829e7129d40de35b8e71c7a2e5bb27</anchor>
      <arglist>(Type &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>mul_signs</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac78a6cc3645f736bbb5140d7f47cb46f</anchor>
      <arglist>(small_type us, small_type vs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>div_by_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3160b2aadd5ced8617ab79fbc075701</anchor>
      <arglist>(Type s)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>check_for_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a98da822be56b23c5b31d2c21acf25aec</anchor>
      <arglist>(small_type s, int ulen, const sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_for_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8745c0481b978519229bd58f1e372038</anchor>
      <arglist>(int ulen, const sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>make_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6278b3af606ef9c2e9a9c61d88a9dfcb</anchor>
      <arglist>(int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae39d90eee9a739f9a056e62c5ec4ee65</anchor>
      <arglist>(small_type added, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_SM_to_2C_trimmed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a234484b4ac72e72bb038e396757fe358</anchor>
      <arglist>(small_type added, small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_SM_to_2C</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aacd92d3c15d3947a17d1d793f2fb210f</anchor>
      <arglist>(small_type s, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae07052aa69b02513903259ba37d423ce</anchor>
      <arglist>(int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>convert_signed_2C_to_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a10f44ae94f6e8d6ed999ce52f2fea577</anchor>
      <arglist>(int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>convert_signed_SM_to_2C_to_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a92f5a08a221d6cc9e0a18b6c209b13</anchor>
      <arglist>(small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_signed_SM_to_2C_trimmed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad0d4bde35cc3b47fc104d41abecfa8a</anchor>
      <arglist>(small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_signed_SM_to_2C</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5179aa530d251972bea2da6b6905684e</anchor>
      <arglist>(small_type s, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2dbe0285c1f7e3cf8e8762cea6af5b5</anchor>
      <arglist>(int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>convert_unsigned_2C_to_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a54d63a8a5410cab0f2d8883b76b13eda</anchor>
      <arglist>(int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>convert_unsigned_SM_to_2C_to_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a58cfad63a865f45af9fc2eaa8266c372</anchor>
      <arglist>(small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_unsigned_SM_to_2C_trimmed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a38294aae54e612e873231ac86a1aaafb</anchor>
      <arglist>(small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_unsigned_SM_to_2C</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae3e4096cd97601cccb08734096b397ca</anchor>
      <arglist>(small_type s, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_digits_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afca561d1374f9121b107740c552c85c1</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_digits_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ad9c02cb273d279cdaf1550caa36b99</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safe_set</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7e918b0b135007df6bafde052f01146a</anchor>
      <arglist>(int i, bool v, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0dec71a35d5224dc94e0843bd5ee0a9c</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0a04862b3d71c219a969e30e50b53bff</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_bad_double</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8009343f22a641b2941c1ff23bb4fff5</anchor>
      <arglist>(double v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_signed.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00200</filename>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00215" name="sc_value_base.h" local="yes" imported="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00389" name="sc_temporary.h" local="yes" imported="no">sysc/utils/sc_temporary.h</includes>
    <includes id="a00188" name="sc_length_param.h" local="yes" imported="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00197" name="sc_nbutils.h" local="yes" imported="no">sysc/datatypes/int/sc_nbutils.h</includes>
    <includes id="a00194" name="sc_nbexterns.h" local="yes" imported="no">sysc/datatypes/int/sc_nbexterns.h</includes>
    <includes id="a00209" name="sc_unsigned.h" local="yes" imported="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <class kind="class">sc_dt::sc_signed_bitref_r</class>
    <class kind="class">sc_dt::sc_signed_bitref</class>
    <class kind="class">sc_dt::sc_signed_subref_r</class>
    <class kind="class">sc_dt::sc_signed_subref</class>
    <class kind="class">sc_dt::sc_signed</class>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>sc_signed</type>
      <name>add_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a484c181cad6037661ca40c74ddc4134e</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>sub_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3428db8a44a94bf00b3186749e5ab58</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>mul_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8186c9eb7d3b23c68517cd6964e1f4ce</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>div_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a625ce4f0d644de8005d9a3d0a57676d2</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>mod_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ada4e15bed7988556353a6f1fc9af4140</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>and_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2ce27dd342080443853e506dd96de58a</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>or_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>add240bca7bd0a0d9ed50c43e04987957</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>xor_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a15b4c8405e647fbf0d8b4493b6686555</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b1266382119c8ec72391eb2d219b635</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c714830623df9af34fd88985ebaa9b4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac55cdc0cf9a2eca893393c148f0e7103</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aadc619659bba16d82b79512ac38f2ddd</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a76fb6e794bdf0945aa42eea683bd7d9d</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaa465006155e0964aee70135b54ab10c</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9bfd9b968805c4f2cb08864fd3362c2</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acfff80d322ceb1438d0a3756f2f5867f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a68371078c6ffba7155c192635e108f85</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad813fe6192386cbb51ebf2583a77a602</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae0515607c20ef91b965ffa026a6d50e4</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abda857890ca6e6047e2cdea2b750c249</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab0ee238ae7d05dc39a155b73b5975d8a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a18abdcf306a86c7f1dc15cf07cb6fcef</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6866761b1852a2b718a4fb5153a532a1</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a383c7d15ced3c03c2a0578194219a799</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae0a02238a028c298f964f9d6ca1cc53f</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3c90c73a3bcb79e81eb7fe63761c435</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adbd77b1783b4178692a2e75dc26b697c</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ace2894d4494be610f40f2a50317fa110</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6130aa270fac85f952b57114e48e4473</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a47ae7a5369a7557d223bc8ba1fecf4c0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a02b1ce0bf268394b2e7d2cd6b1378632</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2810dd2dd79f4ecfebc0ce3f4c3568e6</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a38a2c171e0c7212f39c92fcb6e6fa7e5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a60f91673b1ed2d225654f9075d21c139</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a765ce5ad179045fb0e0c53fe4ef09873</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a44f560f9426020ef240b4ef2fe360e8f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abbbc079bd97df8767fa1a8a9a04cc73c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aebee63f0432e16a784296ce98d86f5e4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d9261c9683aae516114f249e039b500</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa34442385aab7f221405548c1b8add91</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a520bf5e0a596f54d8c862307c602fa9d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a07c01b92fea95d6c0ad53da22a338b9c</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a501ef61f6793fe8cbd61a8dbceffd828</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9237c999b0104b538c34e6225a26b4d5</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a667fdbf4fd03c3dbcb8bfbb09d7ffc65</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f05742015b83308407c3de5ef27ea57</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9687e6bfbc60ae405e66feeba8d50be</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3192fd1632ca2a196b0c24dd605e846</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad2019fb3f16b4759e1aff4abf8263b22</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa02ddc1776d0df59a8ac01b13a1f7c41</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa2e609d545f7864905904525e49b2939</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad978067379445909451f860d9ff58455</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a42e1f4e030e3aa292941f38e502e757b</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afc2b6f1459ffceaa6b3cb3f9a5077b2a</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3ca81d0f36cfbfb176caa70cb3b0408f</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a34b85079af23b503ef93413cf04f958f</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a329cb1d7d6aa29be9c366ecd4c939c1d</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6a615f2617e265639b38cac87d841340</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a84f4a9137c5e0ae13842702f0c51a2a8</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a481dca2171f35c7be1990aa12bed5522</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a50ea68b0a493e7109853b39bd93f9289</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad9526a50bfa6cb19ce90c948d12ca3c6</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3b2f0c15bc2870cbe26cd831fe7dc4c</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a175274ffd375e4eecebe830a6807399a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff43fdb565ede39f6c3141b110dc57cd</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>affd3e439a7b08edc2b7abee2657d9612</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6a5e7e4b71c2e74d7c50a6a9be6438e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac93f76809b4a1f95a4f5dad90dca5b9b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aabd0841264ff8cb5d3b8fbb9ca60c5a3</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a822375e416feac789bbbb98db9d75893</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac2c49ab962dee5d8c2f2a9cb0f310c3a</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0df0f5f4e55ede4e338f7a9edc027173</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab7ad9c2ace0ed55b84feb427c02a5fa8</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ed60573b491aa5a8b3af3203eef753e</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9720d1241bd0cb12ca6c267078f9191d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5982578489684bd10868d0499810c30d</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc291bf56ed3166222bb31aeac84ed6e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a42b129588903cc2f6f879beefc8dbd29</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adc110307b260ff3de14f8a7343302c9f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae195f1cea200dc179113c7db900cd022</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2a1e7513f56677d6e2a089fb44df8012</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b6e1c86c018e9a389e719b11613b2db</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a69cb18fdf9ad5fd5d3dbe4a303de2732</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae6fbcd066b4e40b393042f95272ca525</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6e8acf0bac5207e7d5c63fe2678c9d4b</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6759a021a7dae8faf334e305cc414912</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6cc717f797987e4ba79ffad1c0f79e3d</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a761f97fa0faf299c12ca1c56ae0f0f2d</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79c3871cc2efc2b93e5bcb8da652a08c</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a32709b2add99abcdc18efe8ba22cd4f5</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aae1376c8355317dfe87244883a992d08</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1e2c03e2125c2ca0a851cae514867805</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab09fc18cd08b98566517ffb1024c5e80</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa283db7300622e60574df66bec86ed28</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a36044c3596b0bb5af64b84a8953bd493</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a13d467bf846a24cce77ac9034c8ce05d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeb0017b57a02fba6748c980751cc2318</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4c585e79c660f2458c870606e9aa4618</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a14dbfd9e607bcac05348bf3e4fb4eff0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a34aa9508e0f2ea4cba34c8bc78f9cacb</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a655935d40c4bacce6bb699c9f8adc0d6</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aafb42810c5e17001ee26bedd845f2f58</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6254871cb89d636d29f11eedf3b928bb</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56fd25832bdbb3d7850b1265cc31bae2</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0548f2156f8943d6037b72b6bcee7e01</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad85968bf5338e2fc4a7a1fd4ab603b91</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d31d8477d20c2521d75fb28711838d4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0f8928a6a13fbe76a9ec105884091642</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abed1a68f3c2d05bb3f44cf4666e14ce9</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a3a225ab69921fa083354d0397b9845</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ff2307c06f4156e35c5728e29ebf966</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a24615ab9dc7c43ab439606334e60bc9c</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a69d8e51d12a71fb3855e6454d158c36d</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa90d61e7313fdf81544e8852fb7ed1e6</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7c154c122060e9a11e862640f221d0e3</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3cc2c59ed878edd74e742a3db8df2491</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a54f8740e23990f8006fc1f3b126c3b7a</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae989ec8c31c3936ba014c6384cdfa61c</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7267c0b4cbd9c704c102f93dba3b0a70</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af991d2b1a52ed3a5c4f364dc325e9fe8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf33bf07b29bb7c03f24ceb0a8d435c9</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adc79a0bc289f583534648a0a507fd1e4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aed559c272f2894f085ee5f20f62465b1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a85183a955c00327ad77dd82a1b33555a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2f9755133f79e695e7e0dcbbb114f643</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6d777b6b8fc293c90c490028b383e8e7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a880a9c0d1abe0c01d57d7bdd439a208e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa33848633e314b97ec11277261576825</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a20ffe6b44360e432a05f9b4854c984c1</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad5d684ad1f667ff582e3a206d34a6017</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af33fcc39cafa5b03497625d0b6cc9cec</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad14b9ee7c159d72c454f949c9ba9d269</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8925098f4c622985b860a9c7029d9b40</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acdcfdf94ecdac75a8a0e0261ca7eac3f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6d976b54522095a493408d477f526f9c</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf0b2fa2cd16a434f16d8fc3812f7367</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8618edeb4a44b0907182b6bab6bde18b</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adef88397e2d0ab64b376db4ca0435803</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29883deeea343e5d54d10f054e412ab3</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abc1f9c8c6b5177cf564c4362dfa0be7e</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c93e40cb486730ef3de71b65271e8d1</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa54cbad44ea9dedc0b6c92e676cc1cc7</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a478d882170f723587c504d4af93548a8</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37f0efa0ca50e28b0104af6bd5ca96bc</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1cfb82aae0079e7191a805f7bd269376</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e81da7744347a37c690d12cbc73648f</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab73dd327a2aac70b7ae32a9dbaaafd58</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6874f8eaba4855fe66738c8e7ca05ab6</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa7ad1250eeefd1ebbc39f3e3d81a2b71</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a592109008ec2814bb7d0e7e5a19e79d0</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d4873e0605147173c1f76b74d542dd1</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad3240ed88fd0d69e7dab037479b67371</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c483d163e490dda81990b390ef76184</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa5944d5f8383517ad55950892282170e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a044c8885cf2b016c77f280fc2b6cd643</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae69e7f349f851eaa92d86eb04901abbc</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abcee6f61742fc8ac55bf0a8669c5ad56</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c54f9db8fa3bbcdc048689e431f6561</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae43bddc8c1f7f14c09699c847ffca748</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8ea2def19749c51e1055438fb3aed3c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad16a0ecf928d2585be65c931363e8151</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1cbf7a88e77e7aad9d047e6053acd076</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7bc92ff8160f180c535b20d033b94764</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a895ee3bd360edcc2dd24517a787aa7f3</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a74566734335651158970fd75c8f5b319</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a51483a760ba24e31f977157b244b8261</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe91a97446208dc8c4fdbfeb0d13b48e</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67c61c2184d9941640b4a2d56fe014fe</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7230a6e7e1044b13e106ac46be95bb8f</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1b89535765a4a880322ab0535b527c08</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1888cf061efcc8793c732881e5de05be</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ade138df5ca8ec1980bb53d80e04b2f8c</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7e7b0ae178fa7a4063309903b29431b5</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a756aa4a6e42a2e3b61c451b02b9cb0a4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a25d919b35e53a53b843feaee931b895b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a30f4b1689f53e1b85328089a2f9e851e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d72390288c23801f7dfeefb5ca8fc3b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d0cc1f421fb9ac3cc17bd42618df82a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9c6fb20861081d977cc59c01355b8439</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a771fe6578af0bc9dbdfeec3bff2fbe8e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa15a2b02302ba7d9ffaa4c5c8a503d0e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a71cbce80531630816f4f3e33b1d767ab</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a83d726a8a89def64ba26b1219c14b9d7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a509c274298c8f6f67107c4f0c719d83e</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a38596ff4bf12b13abfdc5a00aba0d840</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aede4fdff38ad5420887683af27dfa6f9</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc8c842ee71ad18aec8494a92de753cf</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e0567d4f1f979f8b96ffe509e34c398</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad8088ff65d732cb528c06b7a32a1f48d</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4393b4facf8f164c7e1b9b34025377c3</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1df24849e9f6d4c0af85e28e5ade5716</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a737633284aa76221041ba68a7b2d650b</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acb4fe26dd6040e31dba7e06c3d209eae</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66207f0d0c15811306d7402a5299e09c</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a55ee314699b64c4b01db20a381e83374</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adb4764dd3196f30663eac7bfdca6524a</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac713fb93684062f9338941695869342f</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8e856481cffda6562039cdce96b65f78</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a099385b0a36b1df6036c5b0b82123d97</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9af77414058e3b1fb21f7dbcf0e0c926</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a686870eb86d8f64b01e92b87cdd68b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abe596400ea8f9dc1e40e83b1c554fd2e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2403542cc57723a9c89307c749bf5ad</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a471a6e8f080143e9d1fa17f968dd60d6</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a53cc9edb239634fbd9d87c560e7663ea</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a046b0037937c17e78223998002f679bc</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a912fb77129ad5655881d49f88a033665</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a274390bf02d3c2bee7a0e01705187a75</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad29b3cf56510a01a7b9458bc65f25b71</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae569689d9511da5b54ce578423020f44</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ada4fa68f5f8c5078b3955cd9fbb08296</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad7a5dd3e30db52ea0df9f019b31cf356</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c947091636d44009bbeb872a8fc7f62</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d459b0b73da43fdeb24eabbeba21cda</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa22cdb210771560b4412efeb0ef986ba</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8bd84070b4e8a84aa7aea6fcb2b46657</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29f55e7f52d32f7dc890934149ccaa28</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a281bb089ff94fcfaf8f77d0a4d2bb945</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7fd90bea4c7fbd396a6fdaf80a48037a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af0d5ca160477c689b2e3c482b5412c86</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c23bb20654f44bec3f638e12aaa9ddf</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a48e4159e8064afa51767ffcbbe0faf78</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92dc3fa1fc43e3f2580f4427d1b9b63b</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1a4e26d7ceef26e585d479cb79cef145</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5623ae26a29b277b661c6b1025aee359</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad4398ffa658acc500d1b78a14b0d7b3</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5269718805a1dbfc40593c4658c51cd7</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a77770eed3c850c00f7bad0902bc2d51e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4e6d0f094477bf120eb746fa0edd064d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abfed89a57c167bbfca3c650e9d539a52</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a907d49f78a0203e6f5b4f9d1be0a39e5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7472e2b3316b1c00c73f219cc1f6ed9a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2f128775eb3c4291b28f96421c59da7</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a18b2e3020a66acc6398cdc93888e4989</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae200b248393ae47b1b21320f7bc95b01</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef5834e4ec6ecebc492171667c4e29ac</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abcaab0fdefeccaa5f9d16377ff94910c</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a740cfa9bd1a0085e9b0c86a537d0f856</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5ab5a82cb2381a86f9c93156d13cdf8b</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adfbb6eaf4e7813acb394c596a5e77093</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ee0f85bcf28251f5e4a43e481ca922e</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea535356cbe50541b6a7d29f159b8c51</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac0590170ced0e3183b1e3f13a159f32d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ba6eb1afa04ff68306772361308aa4b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5348eb35f17cb46a79fbf83e385f7355</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a53c546918325f3b6321bdc74e7e1acea</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae732cd0b95b4ce4283075d0cbfb8f78e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8105b5be99a191ab81c7dd301b82afb4</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a08f00329b1308cba1215a61c6fcd74d2</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6051957b623620902bceea32b2e5a7d</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c21c59fb930a70a67269f80e2bbdd2c</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5fa79e42eb059aeaa987a19e4d666d67</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad58580e47a5e48ade447debc372c6c9a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae880b5f22275823171ad3a0dc4dbabab</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5247833ceaa6871a26800e3232e7a011</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4545d6efb6dee5c4ab253b5741dd3d34</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a813220fcfc3e608dfebb2b19b71387</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff477552b59658bb8e82d5558eab6204</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8bd10f79fe77b30f03bed3dd6552d8ba</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a98b4f50cc1ba5e0d662ec25b5217f7a4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c060c1b4bb86554dd1d4ce64c55940d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9863335743bfb5681303a8b99b397a43</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7f2224eacb54b1028ff0d6466c1ee55b</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9450160422c5531471731b3c2dfaa24e</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7599ef3875c409df866a6848443b8c2a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8c21fe66105f3f8015449359b513802b</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37b5ac325e7c36c864bd1edb3fad4aa4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06699a889f446c2b2f9d251774431aa5</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac47a97cceddac1375d0c46a5f9aaa8fe</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7912c00acafb1cf63644a0635cd37a2d</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abc76f2448acadaf200728fbaa5036626</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af42be71266a2ca12fd330f3f491991b7</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae6a328e86166bd377de7d2b0dde41580</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a87894606af992f23d81fc39c12e8ee01</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad2dba9313ee449aad82cc24721b28a63</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad6317b41ec97d82f661423c72342a8a8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92e3390450026f0654242be5ebf2ab36</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa9c49a4e829e82ae0b1a02352b3528cb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7dfdddb93d91fcec663073309ab5c368</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aca04429c9183363bbd9889ffc12fac4a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae5b98d2fd00beb10177e4ddf5ac09c20</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6b10a1b26e70b79feb020290d1270310</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aed8d7951babd0f803a6c7f56ac9232e7</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a581ff07002f291bb208c2c288049e509</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a11bb54a1db395e144b6c260efcff3a97</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a15c39176e20a9b05c35e85716a331435</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a31cf43c5721b7a347308c387f8916f8e</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37e184a431412dad3a45b434aeaf511b</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7c22fbe271171599b85246ad3edabaa1</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac1f87ab108538ea8814001723b791993</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a171072da1da1d34b068bf9a5ee29a430</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab802c109318b58ca877a2011c81a95f7</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab32e97430f398d1c36d4e12d272e9618</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9deee045a2fc583be522c541e371a092</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9e312fc717163dc7f7481913bb06dd52</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1713a5388188f5e11f77e27d907d86f6</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa2f3f3ec4958c6438f6d7b2e6b91f520</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>addd474247ead48b2e6553ffd697e88a4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a33283c6cf0624846b4e0ceb7a88bb0c5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2d3620c3212fc0139b8683bbd8723f8</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a69a6791fd777f580c6c05bd42a19f34b</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a782c335519c7df37c2639a75e286745f</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0f9df2fa15563439525e2a5f83c151d6</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2ace53ef2506e4155021091e6b60bcda</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aadb575412b01a4d82c36ebd2d3743cc0</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab1a3766f9793b8a28b332af9e9eaf35f</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ae128d40537665cb08db6e1201c0d79</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ca11306b250bb2adf3cf89ecc6fb240</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6aae39a5e8b0e2d82610fa4c9825e2c8</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acec2d1a6a065e26c1042cc27cd2cf056</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf792bf24e17c08731bf5ae4cf2123b4</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a068300ed1a2a34d6448fd29836faac55</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a49497f455498ab4d1ac36eb6a04a9e6f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4ba74b2305c8afb7e02fa25adab0e488</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad644fe8f0024e8446dc25bdbe50e065f</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a253c9e9c717dd837badd88d6f32ecde9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2dcd44d523a64715ca12e3734f08d45</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af05226789c6abce7f5b34d987498a70d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7ec6e8907d36523808ca49ff40f32530</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad40b385e37119ca140db04ec1e9a79a7</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4128627168c1f18df299ef9507e8e94a</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a976fb5ac573e769f9378757b5c2835a1</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a63810cc1415b7df65c413f30991a28ac</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0963f51d2f13df91fe15465aaf16263</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a029ff8d3166631e9817176395e8c4e56</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a944331773bf8b3974130b3858c49cc6c</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aae1ea248924c70686ccddd1f1d49e4e9</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c1a6c92d56933273e2afa9c39faa07e</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab592e67b6dcc9044373161f97f333720</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a36b332107ae0deddad8d3eb36884d7b9</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afffb559f0d888fdb9e0e175e58e6bc54</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeb75b09330f19ed88d07ce67a32e8c4f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3ce3feec0041374f4fffaeed45fddf34</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4b948f1930a2022fd165a602a696adf1</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af3471c839a4104f07017fc654d3c6be8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>addd17e3e5ff5aba35791d8e4b00dba07</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a322efbf68a14f7ad270eb56325a1d22e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06e04667bfac59325ef23b9bfb3ff053</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b5028f1a7df00a4024e1db7d668005f</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af294ead67604477f92ffb789617ae85f</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5fbf5755db8c03eb32ce4d087fa6be0a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a185d812c1bea299709fd55d34c0c2eff</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af0658e253b1816175f6fc1893aac8639</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab80109a6f479da8559e11d7022bb23a4</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f46bb3fd4f262730a5a6bdf3ee1651b</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6f8fba2e40c223f351364c554a578284</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac4866218488a41875c6c57d17378d5b0</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4a262bc8d81c5c7e7baed723f1e57d21</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adb7f9ea4143be8f0618c8a34829f9218</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a21fc9753ec6db3e3c3493e33f13bc95b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab707906ea3fc74ec7f373db4f48b1c90</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8d576fb0d3deb16c1a4c66799130d4fc</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6a8e71ea6ccaa3dff057b82c15f55aee</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa1ad51fe9d9599b06e12c732952e73a9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a62b7a711bcc20db2687d0dab66e39c36</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae19d79b127dae5358fea27d8a626ec2d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5afc8d885c05b88bb696dfe5d94c6df8</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a472b62517542c00f1a1117776c551f7c</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae4349dd867655985decb01cc75cdadc8</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a17354e2877d8d76ca7e17b88018d54b4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7510b614ef57d990ea7235fbabb64467</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5eb4b2ff0fc051ae7552020f74d4eb10</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad92f519512a2a9d9dcf4e6d4a6d032c0</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab09401fbdd1e29fff4f231b508a4bb09</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f560777920d7411e5cd4f69fb322232</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7e14534fa334b0a649a6cb8963e2de61</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afd5a3a1dd9ef898606e9ddbe92e99759</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a61f38368315f868936b6a50a7bcf44f1</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af4487668e8f3de8745770bd851fd52ad</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae6e7b126a2d160917caffe828f6b1596</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa26da29ca4126166bd542a9a68a43caf</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab64008abdf2d6e772a1475abcc9f4785</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator~</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a55c8ab6867bb2ec6062fedee07d3ff17</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a434bf004f9b2d011efe79463190daaff</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a93fad799ce81786200b79661b83d2eea</anchor>
      <arglist>(::std::istream &amp;, sc_signed_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeae4b7735f7f34dc44416cb387b044ef</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4fddf3ee91d29d9da3da994e1ab61ded</anchor>
      <arglist>(::std::istream &amp;, sc_signed_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe93053c8d25b8a91a947247ffa1ba75</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7e16827f0d31922cffa4f3e4fd3f370f</anchor>
      <arglist>(::std::istream &amp;, sc_signed &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_uint.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00203</filename>
    <includes id="a00206" name="sc_uint_base.h" local="yes" imported="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <class kind="class">sc_dt::sc_uint</class>
    <class kind="class">sc_dt::sc_uint</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_uint_base.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00206</filename>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00215" name="sc_value_base.h" local="yes" imported="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00185" name="sc_int_ids.h" local="yes" imported="no">sysc/datatypes/int/sc_int_ids.h</includes>
    <includes id="a00188" name="sc_length_param.h" local="yes" imported="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00149" name="scfx_ieee.h" local="yes" imported="no">sysc/datatypes/fx/scfx_ieee.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00389" name="sc_temporary.h" local="yes" imported="no">sysc/utils/sc_temporary.h</includes>
    <class kind="class">sc_dt::sc_uint_bitref_r</class>
    <class kind="class">sc_dt::sc_uint_bitref</class>
    <class kind="class">sc_dt::sc_uint_subref_r</class>
    <class kind="class">sc_dt::sc_uint_subref</class>
    <class kind="class">sc_dt::sc_uint_base</class>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a43406b86ef66259e456891b3a0f788ed</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d4572459846ba9f89d5a294871189a3</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a512b1b0fd5242cc38c48a28ca2e89f49</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aba50061cdd2ee31e89749c46800925fe</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92121a8fd116bbabf6336f0fa7eab888</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab2a4dd0ee86661ae9c8cda0ba2e44835</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab0ae15782ddf76c6ddc81f9c06c16037</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7088f7ca94020e2d4440eedf73567891</anchor>
      <arglist>(::std::istream &amp;, sc_uint_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc69669bc23a8b22e6caddfa7e60d999</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad66f74054fac5e4571e2e7a256bccd89</anchor>
      <arglist>(::std::istream &amp;, sc_uint_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e4cee06b01798c012b9cb99385a3fa2</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a654be12b215a2852e04bc63f3c05ae9a</anchor>
      <arglist>(::std::istream &amp;, sc_uint_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a22eeccbf4d9c48639dd195211a769657</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5db8680f9b4a2b815fe733e78ae89e06</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeade562ae63dec48ca4b7af20bb411e8</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0989c490343a7d848d46d33d84831a09</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac60f4dfc7ba1315cc229df7b34cf048d</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aee27e3090fac6203a0be06ed848609b2</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff1c3898ed37eea41a978eff67a1b3d4</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afcf17439e5ef462db824daa1ed155673</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf04a62e64afa5e9935205eb8543efb6</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad7d87d137b6eae57718d3bfdccd5811</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a686158e18dcfa7fcf2b421d69ad56e98</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1578e8f9ef9c87bed861ab8fbf29b74f</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_unsigned.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/int/</path>
    <filename>a00209</filename>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00215" name="sc_value_base.h" local="yes" imported="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00389" name="sc_temporary.h" local="yes" imported="no">sysc/utils/sc_temporary.h</includes>
    <includes id="a00188" name="sc_length_param.h" local="yes" imported="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00197" name="sc_nbutils.h" local="yes" imported="no">sysc/datatypes/int/sc_nbutils.h</includes>
    <includes id="a00194" name="sc_nbexterns.h" local="yes" imported="no">sysc/datatypes/int/sc_nbexterns.h</includes>
    <class kind="class">sc_dt::sc_unsigned_bitref_r</class>
    <class kind="class">sc_dt::sc_unsigned_bitref</class>
    <class kind="class">sc_dt::sc_unsigned_subref_r</class>
    <class kind="class">sc_dt::sc_unsigned_subref</class>
    <class kind="class">sc_dt::sc_unsigned</class>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>int</type>
      <name>compare_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99c29af7f5c701835673c023e3b54a73</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd, small_type if_u_signed=0, small_type if_v_signed=0)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>add_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf1873797190f85b14680e6c8efb8358</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>sub_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29c7964b019b7cd52270d2152373d331</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>mul_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a81c6cd97e6651ca94c09ee08ce329ae6</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>div_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d93a3d01c2ae362b749a9afd9b66087</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>mod_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a51e82e17b1772a399ed9f39c9d7121df</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>and_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab2a46d89cd801d21cd6df4e714f3edfa</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>or_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7440a5e5f564522e05967f018c7ee3e3</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>xor_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab5617e69ac54e58266776880c65c858c</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b1266382119c8ec72391eb2d219b635</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c714830623df9af34fd88985ebaa9b4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6dacdfd84643b23ace16aff4dc5663e4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac55cdc0cf9a2eca893393c148f0e7103</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a723e0abc3ecc842230de8f7833dc6382</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aadc619659bba16d82b79512ac38f2ddd</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2a7e976b1758b9dc6f9702b9a0bce657</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a76fb6e794bdf0945aa42eea683bd7d9d</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a442695b7eb008d8bcc9ea3587c50defd</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaa465006155e0964aee70135b54ab10c</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abea1a5b397bfeb495bb77d3844127018</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9bfd9b968805c4f2cb08864fd3362c2</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8dc5ed8e3205ee3a2995b334c3155804</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acfff80d322ceb1438d0a3756f2f5867f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af3168f21d75606a9a23f736e8ffe2b07</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a233dd3d8483c3248fdbd33695d85db00</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a47ae7a5369a7557d223bc8ba1fecf4c0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a91c5d2cba840c7de20bdc9ff0a0a03a2</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a02b1ce0bf268394b2e7d2cd6b1378632</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a44f560f9426020ef240b4ef2fe360e8f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abbbc079bd97df8767fa1a8a9a04cc73c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aebee63f0432e16a784296ce98d86f5e4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d9261c9683aae516114f249e039b500</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa34442385aab7f221405548c1b8add91</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a520bf5e0a596f54d8c862307c602fa9d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a07c01b92fea95d6c0ad53da22a338b9c</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a501ef61f6793fe8cbd61a8dbceffd828</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9237c999b0104b538c34e6225a26b4d5</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a667fdbf4fd03c3dbcb8bfbb09d7ffc65</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f05742015b83308407c3de5ef27ea57</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9687e6bfbc60ae405e66feeba8d50be</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3192fd1632ca2a196b0c24dd605e846</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad2019fb3f16b4759e1aff4abf8263b22</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa02ddc1776d0df59a8ac01b13a1f7c41</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff43fdb565ede39f6c3141b110dc57cd</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a175274ffd375e4eecebe830a6807399a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6a5e7e4b71c2e74d7c50a6a9be6438e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>affd3e439a7b08edc2b7abee2657d9612</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0df0f5f4e55ede4e338f7a9edc027173</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab7ad9c2ace0ed55b84feb427c02a5fa8</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1f8908026d3ad99fce3b9f5da7f3b281</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ed60573b491aa5a8b3af3203eef753e</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af01c3d5826c08b9997b811183f130adb</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9720d1241bd0cb12ca6c267078f9191d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a01d9edb0b234ebeb30e0d9f0bc0d12e1</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5982578489684bd10868d0499810c30d</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a27d89e1c43c8eb4cb5125aff620f4b42</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc291bf56ed3166222bb31aeac84ed6e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac42e5232960fb8bc43ea073240e030ce</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a42b129588903cc2f6f879beefc8dbd29</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a82b3c90eb15823034343b02abc7f5dfa</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adc110307b260ff3de14f8a7343302c9f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adb2be61758b9d3b2a4f35fc90929c9f4</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abadcd3afebd74f9f13562a84c370c163</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab09fc18cd08b98566517ffb1024c5e80</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1dddf2d891536ad247f8492352c73d48</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa283db7300622e60574df66bec86ed28</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a14dbfd9e607bcac05348bf3e4fb4eff0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a34aa9508e0f2ea4cba34c8bc78f9cacb</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a10bb3f2b06c13518e17246f1f4345e3e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a655935d40c4bacce6bb699c9f8adc0d6</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a95fb87c4339bd9a00973291650ffb068</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aafb42810c5e17001ee26bedd845f2f58</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4583f58fd62521d52f541f7c838ad5ff</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6254871cb89d636d29f11eedf3b928bb</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adafdbea2fc845c7377626c8f8f595210</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56fd25832bdbb3d7850b1265cc31bae2</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac493e1cdf0d9d41d2f7174391231ff9e</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0548f2156f8943d6037b72b6bcee7e01</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92c232a220eb30601b0a5727270cbd8a</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad85968bf5338e2fc4a7a1fd4ab603b91</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a599b9347436eaa3b488689a0ced5c3cf</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a45c8cb921385df5972ecc744232897d4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af991d2b1a52ed3a5c4f364dc325e9fe8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a22909030e1bd9ee6137c181530b77bb3</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf33bf07b29bb7c03f24ceb0a8d435c9</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6d777b6b8fc293c90c490028b383e8e7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a880a9c0d1abe0c01d57d7bdd439a208e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a95f5a4c72c6017e0ebea974296972845</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa33848633e314b97ec11277261576825</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2593488a703490f719abc3058b890ce4</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a20ffe6b44360e432a05f9b4854c984c1</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a57cd57bbad3d30a8ed9bfd65cdee4f9d</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad5d684ad1f667ff582e3a206d34a6017</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1b8cf4067a82c79186e525af7f40d99d</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af33fcc39cafa5b03497625d0b6cc9cec</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afb193d09db9bbcdffc0278ce7da5bfca</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad14b9ee7c159d72c454f949c9ba9d269</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef6e0e5443e91c46a58180c3e98c6aa0</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8925098f4c622985b860a9c7029d9b40</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acf4fe32d824277665a9826cfda2afd4e</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe01797f55a7cbfb7914a49dbf118b1b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab73dd327a2aac70b7ae32a9dbaaafd58</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a552ac6ec2cdccb5d10afddb9e034f0d4</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6874f8eaba4855fe66738c8e7ca05ab6</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c483d163e490dda81990b390ef76184</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa5944d5f8383517ad55950892282170e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad85d9065aa3d45b5d10f2f1746f09b91</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a044c8885cf2b016c77f280fc2b6cd643</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac849a9815793485e3517933f6f6d101e</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae69e7f349f851eaa92d86eb04901abbc</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6abf9b8913cad6eeeb4fa8203fdafe2e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abcee6f61742fc8ac55bf0a8669c5ad56</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99f72be25d18a8af1d10fd32a5e96213</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c54f9db8fa3bbcdc048689e431f6561</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef1d382a0b4517e6fc2134a7abb35327</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae43bddc8c1f7f14c09699c847ffca748</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a03058e7f97319baa3466c3d197ef2dea</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8ea2def19749c51e1055438fb3aed3c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37b8595b9319d0636d8b0a45724c65f2</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6cbd56dab55bab0e5027744ac2431401</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a756aa4a6e42a2e3b61c451b02b9cb0a4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8372f65675e8d763c288e21bc8f42eb0</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a25d919b35e53a53b843feaee931b895b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a771fe6578af0bc9dbdfeec3bff2fbe8e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa15a2b02302ba7d9ffaa4c5c8a503d0e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a97a2bae1a944746c90b99e8c474e430a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a71cbce80531630816f4f3e33b1d767ab</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a2e5a464f453d50cdfdf031f376d2a7</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a83d726a8a89def64ba26b1219c14b9d7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2f906d1fa17d2d3023ebffa4c5734079</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a509c274298c8f6f67107c4f0c719d83e</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a04a52c86471a20e3732885090a57c486</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a38596ff4bf12b13abfdc5a00aba0d840</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff127314dab71dfdf65cf8ca778395f3</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aede4fdff38ad5420887683af27dfa6f9</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0159de03b55f6ab69e94104e4681140f</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc8c842ee71ad18aec8494a92de753cf</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a64a38cc0bb9fe45a185b6808765f06b7</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8459d0774aecb924558e7091a3082739</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a686870eb86d8f64b01e92b87cdd68b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2a35cdabef35269610b6c309809ecb54</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abe596400ea8f9dc1e40e83b1c554fd2e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a912fb77129ad5655881d49f88a033665</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a274390bf02d3c2bee7a0e01705187a75</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5d3e2d1fa8fd1351ef987b6ffff89669</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad29b3cf56510a01a7b9458bc65f25b71</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4360c6bd986f23b1857c0f4cd061780d</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae569689d9511da5b54ce578423020f44</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a65673a0f951aa5d5cfd2e47ba1881444</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ada4fa68f5f8c5078b3955cd9fbb08296</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a80fbf53fd59acac8cf15a9429cf81fae</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad7a5dd3e30db52ea0df9f019b31cf356</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af4d3987a8aeca0552156ae6b7b079509</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c947091636d44009bbeb872a8fc7f62</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af46b3d105eea85ccc559e8e66004010e</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d459b0b73da43fdeb24eabbeba21cda</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea3fd817106e09b3e0d9511a863df167</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6eef3503c9cfec43300ae83ad83351d4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a77770eed3c850c00f7bad0902bc2d51e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf57d8122898e2d3f68fff7103441142</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4e6d0f094477bf120eb746fa0edd064d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a18b2e3020a66acc6398cdc93888e4989</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae200b248393ae47b1b21320f7bc95b01</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a199d8e60576da0475a38d6f521648383</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c8083bb53c4c517e608772ad7cf1407</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae0a557fe2c8486c3c8a0dd012ce36fe2</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67f5c98884527fba593ea4c20c3d77d2</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6038c340967bc2bb36fcf0c7561edbbf</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2db11110fe2f912816f4da95c8463040</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a006b3f536e67fc3b5ec1933b86414303</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae13c42aed0c5cca2f4634b6c5ee0a1f2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6930e7b61eb3bdcd14a703bd747ab16e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5348eb35f17cb46a79fbf83e385f7355</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a53c546918325f3b6321bdc74e7e1acea</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b46a1f62ec9aeaf93e9bbe49043dade</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a45148996cc016fa243494a46749641</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9bfa61370fdd192fca271acf87177e2e</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adda12a6e4de0440eab97d57671980085</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aca69d04a264d9f4017d9fdfefd6d6aac</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac586915fcf8d45e9230f929528f00680</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6bfe386b6dc833c383705b41873e213</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a91e53fe0048620528bf3643f95cbe983</anchor>
      <arglist>(const sc_unsigned &amp;, const sc_uint_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d3f593ef35e43a7ec4b100e69121a1c</anchor>
      <arglist>(const sc_unsigned &amp;, const sc_int_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a1fb41fad842c98c08ad7d325cd2e45</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff477552b59658bb8e82d5558eab6204</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8bd10f79fe77b30f03bed3dd6552d8ba</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a98b4f50cc1ba5e0d662ec25b5217f7a4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41bba7bf2dbc9813cb59af9083edd898</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac659f69aedb42c92007099825b6d2820</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d210ede38f3eacb5efd9fbd065e90c1</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aab35752961600b8c2036ed00304b6991</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8cee034a5637a45af8d9b153432d48f9</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa6b473dc90eba6ae511140366c402c87</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef758cf75d83e7df0e155902c032d398</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a61052394d7a9c7f7823248bfb5ce98c9</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acedb20bd21a5a8d6dcd73a9c62f3fa3b</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a07c5945d4dd0448367b7da7b881a5dd5</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8fc02713270f10bdb1e00f2846ac058f</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9d02923ad2ab4f3eac893f9424a9815</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>addf2924105bd74892103584a7951b9e8</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0cc5784dc64029b6278394c4a750a3cb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa05d38410d01a8e7c62d40efd4ab6d45</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acd86f7cb1d6f3e37520047b6ebe249e8</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aabc45e9f2ca5e7bc50d1a55d56aecc4a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa9c49a4e829e82ae0b1a02352b3528cb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7dfdddb93d91fcec663073309ab5c368</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a74281416fbacd4230f1254bf85ce2729</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3a5d806990939ffb0cff6a65684a0e1</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a848a802481339c5e935ef867b27245ce</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a09c7cf8333955b6d1c973c2451fdc4d1</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3b646e2449745352825819246d47f5c4</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a336f42c70755e0ee4d4d5a3951d07e7b</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a78499b070582b75fbbe1ecc774eab0f1</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3679a3663495a2e7414c23619ba3b44e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adb11a84ebedc20eb9db48a25088bfab0</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a773b30500c2758c61837f7430127a5d2</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa984f00cc83925778b8f98338bac586e</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8fb9926cbf754e8844eed77fa3a5a265</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afd90bfb7964fd9a3bef98b742f97b9e4</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acdff975d4cc55759570d08ce1e082ba5</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a924a78075ecf4d0f82c2bc9b3098bc88</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe272d90833f8ab62f9a36db1e82a072</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a47671600731acc65f18f2e5236489036</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa2f3f3ec4958c6438f6d7b2e6b91f520</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>addd474247ead48b2e6553ffd697e88a4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4e0749c2f0264e168d0a95b9a375e19b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3645d40c2cd6e2fef65d438428c11b2f</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0ae8da575ce39781640de6b3d8e11c5d</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff28de07e4c6460cc429858d1983486f</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab8855e9bac66c6d5b6c133cb9f020c30</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a606f3c031fec1d87451868af3d49158b</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac55846b243171da7b8c8d252c49e689e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a58c45a37c1cc8f8887d248fdc7aa9ccf</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4fbc503ad56d8532fc5cf14d7df5097c</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a182e41b3d951f368d28aab56c41e0520</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4a144b935eb3386b49990f0a1e31f510</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac496d6702e28e5efb00d1a22ec1b0c5c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad5a817a8760c286b1c27df5c318efd97</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e40602dc81a965d3c4a132c30166769</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66b101bcbfb7bab48a25d38a647ac6d4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac53e6f801cb97f8c361cd70c7b9824dd</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a22fb2483d14292d546d3aaeb5938ed79</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a253c9e9c717dd837badd88d6f32ecde9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2dcd44d523a64715ca12e3734f08d45</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ada0694f806a2c158efe0d6e18af02f00</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a70f42e05564dc25236dde554c1355063</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0826583a55b38572f0b3f0ff4110ec01</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3398778f1225d9e38e724cbbfef6987d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afc459b948892105a6afbe230cfd4342a</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8830fd528e379214af680626529e7daf</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6d610bc43a20e85c9320c4ade73e08cc</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad62bbd63f16991695f912427baaa5d8c</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad23d79997077d8b067b230b8ad060412</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af8b378db0239f48cc7e19611ebc085d0</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad8b907873a1d597f14643f10f3d8db83</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9f7b5514879d8dd27b074fe4a7e8e955</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab39fed4393db848b675c91d48d4f60de</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae41e0f79a1cd2f956d0495c0b76446d3</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab4bbfcd25af8c3e135f1bcb899270dee</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a458d618b751368b5b343d354c4865145</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4c1494133a2c719994231bbfc8b3ff9d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af3471c839a4104f07017fc654d3c6be8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>addd17e3e5ff5aba35791d8e4b00dba07</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06bdd1cc8165ef7dee3690f1850ce3c4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a89a67489166bd077fb94679f0f914025</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a63b9b9a0fe6b165c02a5d906542cd847</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac729d730f80d096ff7367d092b5944a5</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9cac6bdb9cc2ab389e986d047e9214f</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1e61f8fe1653f2bdffa1e10bbd6a35b3</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5fe1bac11149aadf137d5e18fdb1009e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a149c795947ed940ef503de600c0ebede</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a40bb59e681f1a3b653e4b312b8eb447a</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abd861dc18b69236962867f108e6e3032</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae13094051d1174d522596f950e10f403</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab37b064e400dc52d75719e802432ef8f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2acbf942eaceae98c19b2f9f2d9080d6</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa838f020ae867e1156423001e0d7e233</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2d6876869b65978858f17a25f85c5ca9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff2b991114b60381076bdef9afcf9358</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe25758ef6c1bca3e356163e7460971f</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa1ad51fe9d9599b06e12c732952e73a9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a62b7a711bcc20db2687d0dab66e39c36</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2ca5d340264161551aeef4781982d5fe</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af0a0eb3ca15acb9be0f133b0053912d0</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0bbf03b75fb165e3819eba777a59d353</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9af436ea78643a78fb7bd4763cc3d80d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9834be3dda58ff22d95ef3d22fee05ec</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9e5ebfc881f1d1b744245073607e7b4</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeedf6cd85a85fb702f0077484b411579</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad127348481941ca0c4195d452658c655</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a244afc8b72735e627d891b0c4cc10f80</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a561c387a9749c1f3efee0deac8e3a778</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a297de0637c55c43512e05cfcf3ba430d</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a951e4510c3f8cd427545734bcbbf2b0d</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a969b54425d6633835a4a31d9594eae71</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af04c284c2b4e41cc7b7c667bb270e64b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac57a34480f11d957e9b18d3d94498899</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa74d6fb9607a196719ba514b35196a05</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad8f497faf061e358768a21dbe3821ce7</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator~</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af5b1f173b844f646b0ac623b6581f09d</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a71c798bf928dc18c95a38134ba357acf</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af04b85fdd9dd052c766a98fdb6f738b5</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ababd6d2b2c0e0706a32bde366159463d</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0b20b251c089a32b19da5d9540481054</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6cb71a0a6e45e0e2b521f5c971a82bda</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3b146b777bb1a1dc1ad858d11291860d</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_concatref.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/misc/</path>
    <filename>a00212</filename>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00215" name="sc_value_base.h" local="yes" imported="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00389" name="sc_temporary.h" local="yes" imported="no">sysc/utils/sc_temporary.h</includes>
    <includes id="a00089" name="sc_bv.h" local="yes" imported="no">sysc/datatypes/bit/sc_bv.h</includes>
    <includes id="a00098" name="sc_lv.h" local="yes" imported="no">sysc/datatypes/bit/sc_lv.h</includes>
    <includes id="a00182" name="sc_int_base.h" local="yes" imported="no">sysc/datatypes/int/sc_int_base.h</includes>
    <includes id="a00206" name="sc_uint_base.h" local="yes" imported="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00200" name="sc_signed.h" local="yes" imported="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00209" name="sc_unsigned.h" local="yes" imported="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <class kind="class">sc_dt::sc_concatref</class>
    <class kind="class">sc_dt::sc_concat_bool</class>
    <namespace>sc_core</namespace>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_OP_TYPE</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a159127fe83ced79748eb34e49ae217ac</anchor>
      <arglist>(RESULT, OP, OTHER_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_OP</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a23967b280995669eaa2ce47dd513453b</anchor>
      <arglist>(RESULT, OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_BOOL_OP</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ae25ab91d8b3368afd1ea67a0db09f2cd</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3b63945310f83b83ece57a904d03047a</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a225a0db712d929a6a9a3bf49e093d1dd</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a071c953a8ec70dc9bc9bc7a7f19b265b</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1865de7fb2f58a9dde27fb7db34a53b6</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5b3f982f3a65758dc783dbfa01f6aac6</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0257198d05c106d31606deea7f2d8e15</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae686e5795fbefe6b3b97f64e522597f2</anchor>
      <arglist>(const sc_concatref &amp;target, uint64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a200a6958a66b4b7e48be78e4c3f6544c</anchor>
      <arglist>(const sc_concatref &amp;target, int64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4afedaecc0acf2113e7f71ef3b28667c</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a07c19b61fa11e64f24121b539394a29c</anchor>
      <arglist>(const sc_concatref &amp;target, int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4482738a647f09dc16cbd508c48a8d78</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac20e0ad62bf0181b49914fd3fdc42547</anchor>
      <arglist>(const sc_concatref &amp;target, long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3ff016d78e454c3f683de2bf44e18fb2</anchor>
      <arglist>(const sc_concatref &amp;target, uint64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae2fab2d7efae7aea5b8f59380743cde0</anchor>
      <arglist>(const sc_concatref &amp;target, int64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56c81fb47e42cea717fb955411d786d8</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0f6798d896b8b8f514628fb0e926c4b</anchor>
      <arglist>(const sc_concatref &amp;target, int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea9af377b19f2962d083edcb1aa01fc7</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ac1a12595cb38c1e2e1e2aab081dd9f</anchor>
      <arglist>(const sc_concatref &amp;target, long shift)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae6779b3ec9596f1ff50edc22210acfb4</anchor>
      <arglist>(::std::ostream &amp;os, const sc_concatref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf61da9a0e2a359532769df02cf9fe96</anchor>
      <arglist>(::std::istream &amp;is, sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a17f911808b0f5a56ba3c1eb3d864fd53</anchor>
      <arglist>(sc_dt::sc_value_base &amp;a, sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad916638f672b4360db099a261064c771</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acf6e9dc159e1ac20975542a352971d45</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8482b96f8374e960aa1fbaf5c5fcc5c5</anchor>
      <arglist>(bool a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a046ec3a0652d8b99161098d3405eb82f</anchor>
      <arglist>(sc_dt::sc_value_base &amp;a, sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3f5d863a43654052f59d4445be08d13f</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>affb68ebb335e51d3c98cb4fb130597f8</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b4c18e113cac3b399b59ffddfe0dfab</anchor>
      <arglist>(bool a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>sc_byte_heap</type>
      <name>sc_temp_heap</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad3584a081bd53fca85a4bfaa07ca0665</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_value_base.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/datatypes/misc/</path>
    <filename>a00215</filename>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <class kind="class">sc_dt::sc_value_base</class>
    <class kind="class">sc_dt::sc_generic_base</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_attribute.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00218</filename>
    <class kind="class">sc_core::sc_attr_base</class>
    <class kind="class">sc_core::sc_attr_cltn</class>
    <class kind="class">sc_core::sc_attribute</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_boost.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00221</filename>
    <member kind="define">
      <type>#define</type>
      <name>sc_bind</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ac5a4fedd28740c7d97dadc41be9a74c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sc_ref</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>acf79868cdfc90758572ac2346acc6411</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sc_cref</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a513685aab89f35505133637232bcccbf</anchor>
      <arglist>(r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_cmnhdr.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00224</filename>
    <member kind="define">
      <type>#define</type>
      <name>SC_LIKELY_</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>acf2e425249d8e3ebb7e2f79a5c56a2bc</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_UNLIKELY_</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a3caa42f97b389c2842a212d80af8548b</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_constants.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00227</filename>
    <namespace>sc_core</namespace>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_STACK_SIZE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a175996e4e020a8e63bde319c66da2d5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_cor.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00230</filename>
    <class kind="class">sc_core::sc_cor</class>
    <class kind="class">sc_core::sc_cor_pkg</class>
    <namespace>sc_core</namespace>
    <member kind="typedef">
      <type>void()</type>
      <name>sc_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aef08e4f9c2a6544330f1ae8edcc03578</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_cor_fiber.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00233</filename>
  </compound>
  <compound kind="file">
    <name>sc_cor_pthread.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00236</filename>
  </compound>
  <compound kind="file">
    <name>sc_cor_qt.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00239</filename>
    <includes id="a00230" name="sc_cor.h" local="yes" imported="no">sysc/kernel/sc_cor.h</includes>
    <class kind="class">sc_core::sc_cor_qt</class>
    <class kind="class">sc_core::sc_cor_pkg_qt</class>
    <namespace>sc_core</namespace>
    <member kind="typedef">
      <type>sc_cor_pkg_qt</type>
      <name>sc_cor_pkg_t</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57ab3d3104d7157c2c6f43e6ffa53e3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_cthread_process.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00242</filename>
    <includes id="a00326" name="sc_thread_process.h" local="yes" imported="no">sysc/kernel/sc_thread_process.h</includes>
    <class kind="class">sc_core::sc_cthread_process</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>void</type>
      <name>halt</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa2bff719f3e3d3cddf849609835e6a33</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2b347007e37cc19ff3bf85ad6ac7cc05</anchor>
      <arglist>(int, sc_simcontext *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_dynamic_processes.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00245</filename>
    <includes id="a00251" name="sc_except.h" local="yes" imported="no">sysc/kernel/sc_except.h</includes>
    <includes id="a00317" name="sc_spawn.h" local="yes" imported="no">sysc/kernel/sc_spawn.h</includes>
    <includes id="a00257" name="sc_join.h" local="yes" imported="no">sysc/kernel/sc_join.h</includes>
    <includes id="a00221" name="sc_boost.h" local="yes" imported="no">sysc/kernel/sc_boost.h</includes>
  </compound>
  <compound kind="file">
    <name>sc_event.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00248</filename>
    <includes id="a00224" name="sc_cmnhdr.h" local="yes" imported="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00260" name="sc_kernel_ids.h" local="yes" imported="no">sysc/kernel/sc_kernel_ids.h</includes>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00077" name="sc_writer_policy.h" local="yes" imported="no">sysc/communication/sc_writer_policy.h</includes>
    <class kind="class">sc_core::sc_event_expr</class>
    <class kind="class">sc_core::sc_event_list</class>
    <class kind="class">sc_core::sc_event_and_list</class>
    <class kind="class">sc_core::sc_event_or_list</class>
    <class kind="class">sc_core::sc_event</class>
    <class kind="class">sc_core::sc_event_timed</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_KERNEL_EVENT_PREFIX</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>aed43f45b5f964bffedcb3b0edc858ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_event_expr&lt; sc_event_and_list &gt;</type>
      <name>sc_event_and_expr</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>adf9ec2914d09ed71a42fe16b0ef2bc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_event_expr&lt; sc_event_or_list &gt;</type>
      <name>sc_event_or_expr</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>adec71d2c2ad4f26ae5492d164fb6c04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_notify_time_compare</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae7c7c83444a1845f3e6770a119a78302</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a762b620af35370b37c72768033149954</anchor>
      <arglist>(sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6a0b7eb2185b932dd25cb7501e09a53a</anchor>
      <arglist>(const sc_time &amp;t, sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a91906d71afc4d3c5db0eff773a441beb</anchor>
      <arglist>(double v, sc_time_unit tu, sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0a701f4df07d5830536f30d8448a37ac</anchor>
      <arglist>(sc_event_or_expr expr, sc_event const &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abb30e458bee873a3c34a8ad76626c2a8</anchor>
      <arglist>(sc_event_or_expr expr, sc_event_or_list const &amp;el)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af00461ffb0e10200b7ef965c1772074f</anchor>
      <arglist>(sc_event_and_expr expr, sc_event const &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a017de5c3cc45f92449aa72bfc0055fde</anchor>
      <arglist>(sc_event_and_expr expr, sc_event_and_list const &amp;el)</arglist>
    </member>
    <member kind="variable">
      <type>sc_event</type>
      <name>sc_non_event</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a214447cbe6b7db86833ef2bba63fd7b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_except.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00251</filename>
    <class kind="class">sc_core::sc_user</class>
    <class kind="class">sc_core::sc_halt</class>
    <class kind="class">sc_core::sc_kill</class>
    <class kind="class">sc_core::sc_unwind_exception</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aabd066bb337994094ef03529230382f5</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function">
      <type>sc_report *</type>
      <name>sc_handle_exception</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af1287566ec137f1171e9b3ef519f5649</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_externs.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00254</filename>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>int</type>
      <name>sc_main</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a82266acdd954cb0398aa91e591db9b99</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_elab_and_sim</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>afb25c96e28f6b8d89eb65ffd8f78420c</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_argc</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1c4aefc79b57cb5228247dce6920b929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *const  *</type>
      <name>sc_argv</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a93910b8a9898df3050a66454d46dbf53</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_join.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00257</filename>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00335" name="sc_wait.h" local="yes" imported="no">sysc/kernel/sc_wait.h</includes>
    <class kind="class">sc_core::sc_join</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_CJOIN</name>
      <anchorfile>a00257.html</anchorfile>
      <anchor>a6732ab71df2dd267fa98b6528d44f742</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FORK</name>
      <anchorfile>a00257.html</anchorfile>
      <anchor>aa6488e2f40cebc11798144712cfcfd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_JOIN</name>
      <anchorfile>a00257.html</anchorfile>
      <anchor>adcabfc9c61137bd1ac57a025083d79a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_kernel_ids.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00260</filename>
    <includes id="a00377" name="sc_report.h" local="yes" imported="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a0063e78ac4f5d8631009dfc51e3527cf</anchor>
      <arglist>(SC_ID_NO_BOOL_RETURNED_, 500, &quot;operator does not return boolean&quot;) SC_DEFINE_MESSAGE(SC_ID_NO_INT_RETURNED_</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator does not return int&quot;) SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a02d3fc95afe661d2019dc6c0e17768d4</anchor>
      <arglist>(SC_ID_NO_SC_LOGIC_RETURNED_, 502, &quot;operator does not return sc_logic&quot;) SC_DEFINE_MESSAGE(SC_ID_OPERAND_NOT_SC_LOGIC_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>abb3c7767e2ad31d54d52ad254becf9d7</anchor>
      <arglist>(SC_ID_OPERAND_NOT_BOOL_, 504, &quot;operand is not bool&quot;) SC_DEFINE_MESSAGE(SC_ID_INSTANCE_EXISTS_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a4bb95c725b9b137daee9e358a613d95e</anchor>
      <arglist>(SC_ID_ILLEGAL_CHARACTERS_, 506, &quot;illegal characters&quot;) SC_DEFINE_MESSAGE(SC_ID_VC6_PROCESS_HELPER_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module</type>
      <name>exceeded</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a37fe1c5f9ac3de024ec212c6a0df5d67</anchor>
      <arglist>(VC6)&quot; ) SC_DEFINE_MESSAGE(SC_ID_END_MODULE_NOT_CALLED_ </arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a9ffbeb475ceafec8439e062808696f69</anchor>
      <arglist>(SC_ID_SET_STACK_SIZE_, 511, &quot;set_stack_size() is only allowed for SC_THREADs and SC_CTHREADs&quot;) SC_DEFINE_MESSAGE(SC_ID_SC_MODULE_NAME_USE_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>ab6ffda222efd211231d7cd8a7dd2c32c</anchor>
      <arglist>(SC_ID_SC_MODULE_NAME_REQUIRED_, 513, &quot;an sc_module_name parameter for your constructor is required&quot;) SC_DEFINE_MESSAGE(SC_ID_SET_TIME_RESOLUTION_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a8ad6277b8383b48e151c4c3be19abf84</anchor>
      <arglist>(SC_ID_SET_DEFAULT_TIME_UNIT_, 515, &quot;set default time unit failed&quot;) SC_DEFINE_MESSAGE(SC_ID_DEFAULT_TIME_UNIT_CHANGED_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a5d0758d6896e9035f794f644624b6103</anchor>
      <arglist>(SC_ID_INCONSISTENT_API_CONFIG_, 517, &quot;inconsistent library configuration detected&quot;) SC_DEFINE_MESSAGE(SC_ID_WAIT_NOT_ALLOWED_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution</type>
      <name>wait</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a9e21e9ada043c0d8ff611cf2a515a5dd</anchor>
      <arglist>() is only allowed in SC_THREADs and SC_CTHREADs&quot; ) SC_DEFINE_MESSAGE(SC_ID_NEXT_TRIGGER_NOT_ALLOWED_ </arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution</type>
      <name>next_trigger</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>aea088a9aea02390cd3ec562c164e3ebe</anchor>
      <arglist>() is only allowed in SC_METHODs&quot; ) SC_DEFINE_MESSAGE(SC_ID_IMMEDIATE_NOTIFICATION_ </arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a76b8a3bee32c40e966c876df1bd709a2</anchor>
      <arglist>(SC_ID_HALT_NOT_ALLOWED_, 522, &quot;halt() is only allowed in SC_CTHREADs&quot;) SC_DEFINE_MESSAGE(SC_ID_WATCHING_NOT_ALLOWED_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase</type>
      <name>watching</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>aa439e2d867ff4f27e118f06eb9bb01d9</anchor>
      <arglist>() has been deprecated</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase use</type>
      <name>reset_signal_is</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a009607354965e35c8bd3749faa52afe4</anchor>
      <arglist>()&quot; ) SC_DEFINE_MESSAGE(SC_ID_DONT_INITIALIZE_ </arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase use</type>
      <name>dont_initialize</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a5079ea3eb7b029192ee87d024250bb4e</anchor>
      <arglist>() has no effect for SC_CTHREADs&quot; ) SC_DEFINE_MESSAGE(SC_ID_WAIT_N_INVALID_ </arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase use</type>
      <name>wait</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a02d45b881240bf59ed1b6abceaae7d97</anchor>
      <arglist>(n) is only valid for n &gt; 0&quot; ) SC_DEFINE_MESSAGE(SC_ID_MAKE_SENSITIVE_ </arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase use make sensitive failed</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a6076c5ddd49bbab98f3e91018394b5c5</anchor>
      <arglist>(SC_ID_MAKE_SENSITIVE_POS_, 527, &quot;make sensitive pos failed&quot;) SC_DEFINE_MESSAGE(SC_ID_MAKE_SENSITIVE_NEG_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase use make sensitive failed make sensitive neg failed</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a7232e96b7f00ae7eff5b3f8c6a87142c</anchor>
      <arglist>(SC_ID_INSERT_MODULE_, 529, &quot;insert module failed&quot;) SC_DEFINE_MESSAGE(SC_ID_REMOVE_MODULE_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase use make sensitive failed make sensitive neg failed remove module failed</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>abefd9329ed66d720dd6f3bdba9e893ba</anchor>
      <arglist>(SC_ID_NOTIFY_DELAYED_, 531, &quot;notify_delayed() cannot be called on events &quot; &quot;that have pending notifications&quot;) SC_DEFINE_MESSAGE(SC_ID_GEN_UNIQUE_NAME_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase use make sensitive failed make sensitive neg failed remove module failed cannot generate unique name from null string</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a589a4af7c280ddaf74713b67d861a4d1</anchor>
      <arglist>(SC_ID_MODULE_NAME_STACK_EMPTY_, 533, &quot;module name stack is empty: did you forget to &quot; &quot;add a sc_module_name parameter to your module &quot; &quot;constructor?&quot;) SC_DEFINE_MESSAGE(SC_ID_IMMEDIATE_SELF_NOTIFICATION_</arglist>
    </member>
    <member kind="function">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly hierarchical name as shown may be incorrect due to previous errors incorrect use of sc_module_name set time resolution failed default time unit changed to time resolution immediate notification is not allowed during the update phase use make sensitive failed make sensitive neg failed remove module failed cannot generate unique name from null string immediate self notification ignored as of IEEE</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a427b31a672f25ff34e0ad01ee89a5087</anchor>
      <arglist>(SC_ID_WAIT_DURING_UNWINDING_, 537, &quot;wait() not allowed during unwinding&quot;) SC_DEFINE_MESSAGE(SC_ID_CYCLE_MISSES_EVENTS_</arglist>
    </member>
    <member kind="variable">
      <type>operand is not sc_logic object already exists internal</type>
      <name>error</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>ab1af4ffd287f872c714356cb48070734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>operand is not sc_logic object already exists internal maximum number of processes per module module construction not properly</type>
      <name>completed</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a3901fd6c16add214f015f1aafcb3721e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_macros.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00263</filename>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_STRINGIFY_HELPER_</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a8417e584380e3c0fe8f8e1f8b00d78ec</anchor>
      <arglist>(Arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_STRINGIFY_HELPER_DEFERRED_</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>aaf78fdf4a5876b04d090b4c1a0ef6307</anchor>
      <arglist>(Arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_STRINGIFY_HELPER_MORE_DEFERRED_</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>aaa96f8e478a10d388b7ddcdb8ea3f335</anchor>
      <arglist>(Arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_HELPER_</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a73563c25b807e67f019c8a016be0aaf7</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_HELPER_DEFERRED_</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a64c4a37a8ef04c1ed432e1c9259eac69</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_HELPER_MORE_DEFERRED_</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>ab4771a61142e3d0112cb9e6841c862ed</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_UNDERSCORE_</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a69ead502416164223e166df9b5456a7f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAIT</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>ae0fa5e0b910fbe20eb9d6077386cabaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAITN</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>ac33ccbe469f60f428f32de3c45f5cba4</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAIT_UNTIL</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>a30745de4197721fe4c7558f240afd8bb</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_min</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6cb4684e5692dd4775e0ae72516a9c35</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_max</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9581de8910dbf6afa1f540eba7492667</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_abs</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a70309af0a57c62146ef043406ee357ed</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_method_process.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00266</filename>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00320" name="sc_spawn_options.h" local="yes" imported="no">sysc/kernel/sc_spawn_options.h</includes>
    <includes id="a00230" name="sc_cor.h" local="yes" imported="no">sysc/kernel/sc_cor.h</includes>
    <includes id="a00248" name="sc_event.h" local="yes" imported="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00251" name="sc_except.h" local="yes" imported="no">sysc/kernel/sc_except.h</includes>
    <class kind="class">sc_core::sc_method_process</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MSG</name>
      <anchorfile>a00266.html</anchorfile>
      <anchor>a50c4771b351410a2a97e1be09e93686d</anchor>
      <arglist>(NAME, P, MSG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_method_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa27d4cc22d2deb63c6c43560dfd1b09d</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_cmethod_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3eb1b48e1c3d642e474067e0a4f30ed6</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aef4a18cdb772e370b81562b77b79d09b</anchor>
      <arglist>(sc_method_handle, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a527f764a707fee96e78709ce773b63b5</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0b1b4af9c1331d084902c50243b5bd2d</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a977da790be235a4570df32d91bb65efd</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7bbad4fa37276cb1920a4775d0cbe046</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a99c04fca269df4ec0dbc3ce88245a1b4</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abb03bcce9b0663645a91ab36cb83a424</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a121dda9aa51107b94569845cb9607144</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a103650be1249b0a56f310023cbf44328</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_module.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00269</filename>
    <includes id="a00260" name="sc_kernel_ids.h" local="yes" imported="no">sysc/kernel/sc_kernel_ids.h</includes>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00272" name="sc_module_name.h" local="yes" imported="no">sysc/kernel/sc_module_name.h</includes>
    <includes id="a00308" name="sc_sensitive.h" local="yes" imported="no">sysc/kernel/sc_sensitive.h</includes>
    <includes id="a00329" name="sc_time.h" local="yes" imported="no">sysc/kernel/sc_time.h</includes>
    <includes id="a00335" name="sc_wait.h" local="yes" imported="no">sysc/kernel/sc_wait.h</includes>
    <includes id="a00338" name="sc_wait_cthread.h" local="yes" imported="no">sysc/kernel/sc_wait_cthread.h</includes>
    <includes id="a00296" name="sc_process_handle.h" local="yes" imported="no">sysc/kernel/sc_process_handle.h</includes>
    <includes id="a00362" name="sc_list.h" local="yes" imported="no">sysc/utils/sc_list.h</includes>
    <class kind="class">sc_core::sc_in</class>
    <class kind="class">sc_core::sc_inout</class>
    <class kind="class">sc_core::sc_out</class>
    <class kind="struct">sc_core::sc_bind_proxy</class>
    <class kind="class">sc_core::sc_module</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_NEW</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a324b9d8aa070f66fab9db3697c35694e</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MODULE</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a0e65c5055705b9e5f558d3f0ec28a120</anchor>
      <arglist>(user_module_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CTOR</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a6d981485fe8c8c7ea1a42fcd4487e6a1</anchor>
      <arglist>(user_module_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_HAS_PROCESS</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a953ad5e9c23f1b57674829b94bd63858</anchor>
      <arglist>(user_module_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>declare_method_process</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a04fdb7e1347a02ea629f9e972b009493</anchor>
      <arglist>(handle, name, host_tag, func)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>declare_thread_process</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a7ddbc3a0b09f76f1b667dac0966f6876</anchor>
      <arglist>(handle, name, host_tag, func)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>declare_cthread_process</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a512b3eabefc9a01d209d7cf4eb5511e0</anchor>
      <arglist>(handle, name, host_tag, func, edge)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CTHREAD</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a23883363081d0be73feee33386613ca5</anchor>
      <arglist>(func, edge)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_METHOD</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>abae90c038bc848595410dcddde76358a</anchor>
      <arglist>(func)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_THREAD</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>a78f626bc71b853c1f8618e74ec6f0512</anchor>
      <arglist>(func)</arglist>
    </member>
    <member kind="typedef">
      <type>sc_module</type>
      <name>sc_channel</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af303b578693eec7ce3af9499416f6857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_module</type>
      <name>sc_behavior</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a21a2932d7b876e0312e0616bc16455cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sc_module *</type>
      <name>sc_module_dynalloc</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a64af8d26ef0ea3c9c859bc07988ffa0e</anchor>
      <arglist>(sc_module *)</arglist>
    </member>
    <member kind="variable">
      <type>const sc_bind_proxy</type>
      <name>SC_BIND_PROXY_NIL</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1a8a27f587d014965b7b767736abeae5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_module_name.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00272</filename>
    <class kind="class">sc_core::sc_module_name</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_module_registry.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00275</filename>
    <class kind="class">sc_core::sc_module_registry</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_name_gen.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00278</filename>
    <includes id="a00356" name="sc_hash.h" local="yes" imported="no">sysc/utils/sc_hash.h</includes>
    <class kind="class">sc_core::sc_name_gen</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_object.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00281</filename>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00218" name="sc_attribute.h" local="yes" imported="no">sysc/kernel/sc_attribute.h</includes>
    <class kind="class">sc_core::sc_object</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>sc_object *</type>
      <name>sc_get_parent</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acf69826489ad31814605c99418ffef08</anchor>
      <arglist>(const sc_object *obj_p)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_HIERARCHY_CHAR</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab7f69e2a7adbc571158670cf88bcd11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sc_enable_name_checking</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ada1ba7c0f47b3fc2958d9b104600f861</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_object_int.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00284</filename>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00269" name="sc_module.h" local="yes" imported="no">sysc/kernel/sc_module.h</includes>
    <includes id="a00314" name="sc_simcontext_int.h" local="yes" imported="no">sysc/kernel/sc_simcontext_int.h</includes>
    <includes id="a00290" name="sc_phase_callback_registry.h" local="yes" imported="no">sysc/kernel/sc_phase_callback_registry.h</includes>
    <class kind="class">sc_core::sc_object::hierarchy_scope</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_object_manager.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00287</filename>
    <class kind="class">sc_core::sc_object_manager</class>
    <class kind="struct">sc_core::sc_object_manager::table_entry</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_phase_callback_registry.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00290</filename>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00284" name="sc_object_int.h" local="yes" imported="no">sysc/kernel/sc_object_int.h</includes>
    <includes id="a00323" name="sc_status.h" local="yes" imported="no">sysc/kernel/sc_status.h</includes>
    <class kind="class">sc_core::sc_phase_callback_registry</class>
    <class kind="struct">sc_core::sc_phase_callback_registry::entry</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_HAS_PHASE_CALLBACKS_</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a2e89536a845e5a138f3cc272592ed905</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_process.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00293</filename>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00227" name="sc_constants.h" local="yes" imported="no">sysc/kernel/sc_constants.h</includes>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00260" name="sc_kernel_ids.h" local="yes" imported="no">sysc/kernel/sc_kernel_ids.h</includes>
    <includes id="a00020" name="sc_export.h" local="yes" imported="no">sysc/communication/sc_export.h</includes>
    <class kind="class">sc_core::sc_process_host</class>
    <class kind="class">sc_core::sc_process_monitor</class>
    <class kind="class">sc_core::sc_throw_it_helper</class>
    <class kind="class">sc_core::sc_throw_it</class>
    <class kind="class">sc_core::sc_process_b</class>
    <class kind="struct">sc_core::scoped_flag</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_USE_MEMBER_FUNC_PTR</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a3ec2c3fbb7cd8f5b4ff497b9dfbd0451</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_DECL_HELPER_STRUCT</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>ac71456eed513159ded63fbfa40439b13</anchor>
      <arglist>(callback_tag, func)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MAKE_FUNC_PTR</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a580e4861b4550717077ee2267c2097ca</anchor>
      <arglist>(callback_tag, func)</arglist>
    </member>
    <member kind="typedef">
      <type>class sc_cthread_process *</type>
      <name>sc_cthread_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a12cf2d7e3f6fa06b86b6a787eecdeb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>class sc_method_process *</type>
      <name>sc_method_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a241f0ad0f913c222aa11123bdc0ec330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>class sc_thread_process *</type>
      <name>sc_thread_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a624b4003393c71616779c6342b40c076</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(sc_process_host::*</type>
      <name>SC_ENTRY_FUNC</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3c3c6a60b0462a2cb00c7c294417c02e</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>sc_process_b</type>
      <name>sc_process_b</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a85f3e5fe082e73bd7888c38a70072779</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_curr_proc_kind</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NO_PROC_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a3da47e1b40676e185c64e09ca47f2b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_METHOD_PROC_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045ac8e76cc55a0ad8061121cd1e78f947c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_THREAD_PROC_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a65c7898e756af3c6eb086fe2a2d14abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CTHREAD_PROC_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a8a9b185b1d0a071b20355f9593e86ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_descendant_inclusion_info</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NO_DESCENDANTS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298aaf9243a80d08aa59c1ee5689a99747af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INCLUDE_DESCENDANTS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298af29b3ba60742a626758f93eaabb1d895</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INVALID_DESCENDANTS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298afc70e35380bb92b642ccb41a406d9d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_gen_unique_name</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acfe7915935d5f15045d5d3b3c11c3819</anchor>
      <arglist>(const char *, bool preserve_first)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_get_current_process_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6ca888c2e4285ec4e03a3018ba2100c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aabd066bb337994094ef03529230382f5</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a196d815508abe91dd05e3885490872e3</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad36cce03f17ea25819292d3124b0ddb3</anchor>
      <arglist>(sc_thread_handle, std::size_t)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sc_allow_process_control_corners</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>adfebaf9e7dbe988e172e607fc6ce17df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_process_handle.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00296</filename>
    <includes id="a00269" name="sc_module.h" local="yes" imported="no">sysc/kernel/sc_module.h</includes>
    <class kind="class">sc_core::sc_process_handle</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a427c55e6f664fa62ad98d4bf31c190ec</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2fae36ee9e3dedac84dcedba1b46fb6a</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aac3300068b2dca5cacbd758056bd2248</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_get_last_created_process_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a39bcb1ae848a339870b1836c57cbcad3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_reset.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00299</filename>
    <includes id="a00077" name="sc_writer_policy.h" local="yes" imported="no">sysc/communication/sc_writer_policy.h</includes>
    <class kind="class">sc_core::sc_signal_in_if</class>
    <class kind="class">sc_core::sc_signal</class>
    <class kind="class">sc_core::sc_in</class>
    <class kind="class">sc_core::sc_inout</class>
    <class kind="class">sc_core::sc_out</class>
    <class kind="class">sc_core::sc_spawn_reset</class>
    <class kind="class">sc_core::sc_reset_target</class>
    <class kind="class">sc_core::sc_reset</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4059f598479ff4d935378db16d65fdbd</anchor>
      <arglist>(std::ostream &amp;os, const sc_reset_target &amp;target)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_runnable.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00302</filename>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <class kind="class">sc_core::sc_runnable</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_runnable_int.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00305</filename>
    <includes id="a00302" name="sc_runnable.h" local="yes" imported="no">sysc/kernel/sc_runnable.h</includes>
    <includes id="a00266" name="sc_method_process.h" local="yes" imported="no">sysc/kernel/sc_method_process.h</includes>
    <includes id="a00326" name="sc_thread_process.h" local="yes" imported="no">sysc/kernel/sc_thread_process.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MSG</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a50c4771b351410a2a97e1be09e93686d</anchor>
      <arglist>(NAME, P, MSG)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NO_METHODS</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>acd8f4b9f3b5a551e6c7da1b19427206b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NO_THREADS</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a7598419fb77433874564e1e2ee430832</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_sensitive.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00308</filename>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <class kind="class">sc_core::sc_in</class>
    <class kind="class">sc_core::sc_inout</class>
    <class kind="class">sc_core::sc_signal_in_if</class>
    <class kind="class">sc_core::sc_sensitive</class>
    <class kind="class">sc_core::sc_sensitive_pos</class>
    <class kind="class">sc_core::sc_sensitive_neg</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_simcontext.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00311</filename>
    <includes id="a00224" name="sc_cmnhdr.h" local="yes" imported="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00323" name="sc_status.h" local="yes" imported="no">sysc/kernel/sc_status.h</includes>
    <includes id="a00329" name="sc_time.h" local="yes" imported="no">sysc/kernel/sc_time.h</includes>
    <includes id="a00356" name="sc_hash.h" local="yes" imported="no">sysc/utils/sc_hash.h</includes>
    <includes id="a00371" name="sc_pq.h" local="yes" imported="no">sysc/utils/sc_pq.h</includes>
    <class kind="class">sc_core::sc_plist</class>
    <class kind="struct">sc_core::sc_curr_proc_info</class>
    <class kind="class">sc_core::sc_simcontext</class>
    <namespace>sc_core</namespace>
    <member kind="typedef">
      <type>sc_plist&lt; sc_process_b *&gt;</type>
      <name>sc_process_list</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae81cf49b79d92ac54244c55cf6f89716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const sc_curr_proc_info *</type>
      <name>sc_curr_proc_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7c1a29da0f39e50b4a5921b92584de49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_stop_mode</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP_FINISH_DELTA</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38a40acc4c550f4e877e25384256ae0be97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP_IMMEDIATE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38ad6c67dddbb72436a264adc5c77049b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_starvation_policy</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_EXIT_ON_STARVATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0a5720eaef89e899fdd4dafc6a724bf993</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RUN_TO_TIME</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0a1812ba80b3bc5df8a28e6c4f11518aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_stop_mode</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae2f496f075f6b529167ae3cc01c8c4ce</anchor>
      <arglist>(sc_stop_mode mode)</arglist>
    </member>
    <member kind="function">
      <type>sc_stop_mode</type>
      <name>sc_get_stop_mode</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aee38854f1cb968e5bde827c8b5cdb8b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a936188d8e1f8a8c32441a0ae23f8c2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2b6b88d4ec7805cc7b2655d2cafc37f1</anchor>
      <arglist>(const sc_time &amp;duration, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae92d723099406df12a7b68146e94bf3f</anchor>
      <arglist>(int duration, sc_time_unit unit, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ade235733e6612dc6b2f6ebb7fc9a4b7b</anchor>
      <arglist>(double duration, sc_time_unit unit, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_stop</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0e04db2bace88f9fc5b303fef63c2b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::uint64</type>
      <name>sc_delta_count</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a10a9d634e05cdf1b4bce4da664791c93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>sc_get_top_level_events</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aaff5fb0604167d69b663a980440b6112</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>sc_get_top_level_objects</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a9e2db9ba4c5fe75d4e15f5a548deef64</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_is_running</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac58f07d42225f2a52b21d0836c0354f5</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_pause</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad0798c182606189eac02afc1ad10a133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_end_of_simulation_invoked</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3967acdfb038df2b85c0691fcfe90000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_start_of_simulation_invoked</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a01adc2d0e5e2256882dae9cbf8c34454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_time_resolution</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a062fc9289ececea69292879f0d7082dd</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>sc_get_time_resolution</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad4f53ba4501a95d071003d17a82c8dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_default_time_unit</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8981054f1ab75524c02222f2440f89e7</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>sc_get_default_time_unit</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acdc2a9970e6f3adbbc4cf98dabf60ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_pending_activity_at_current_time</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad70697ef21427fd69faa4184bd6749ce</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_pending_activity_at_future_time</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3dc9dc634d932155942254cbf47ac345</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>sc_time_to_pending_activity</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0d410a1cf12f8485827f7361f97ee162</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>sc_get_curr_simcontext</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a84d407a02a02ab5bc1ce70aacfca86c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_status</type>
      <name>sc_get_status</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2676f7bf4be873cb57ef2605d7b634a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_get_current_process_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6ca888c2e4285ec4e03a3018ba2100c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>sc_get_current_object</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa40987e3a3da0a7a1141262d8da48318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_b *</type>
      <name>sc_get_current_process_b</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a167a87a89330c182bae092147195f18f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_b *</type>
      <name>sc_get_curr_process_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aea759233a4c8cf2fe61a287193f77400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_kind</type>
      <name>sc_get_curr_process_kind</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8299a644726c996dc11fed98ed262e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_get_simulator_status</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a036350c291eda58610eda6538430b331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_gen_unique_name</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acfe7915935d5f15045d5d3b3c11c3819</anchor>
      <arglist>(const char *, bool preserve_first)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_random_seed</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae0af7405a9fd5281c56adeafe3e395b3</anchor>
      <arglist>(unsigned int seed_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_initialize</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a60ff96ee3879fd6897129034171d4114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>sc_max_time</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5e2882df2255b6161790d0b4b9e744a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>sc_time_stamp</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa548ef3d6a2b67db9556f636a2272eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sc_simulation_time</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8edc015355f4220ae0a90a3b4413a78c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event *</type>
      <name>sc_find_event</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6ca06edf4b05d9e43d33ad36f6556f92</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>sc_find_object</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>affc1ae62cab5f010d9339adade444ab4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_is_unwinding</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>add54ac2dff4785ec01c826320c25185a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_pending_activity</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac6db6f271e38b140921cda6313724ee1</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_hierarchical_name_exists</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab033fdacc5758a6fdbf78e4df1d7667b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>sc_simcontext *</type>
      <name>sc_curr_simcontext</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aac60a9b1d65dc46b984fee0bbdd22bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_simcontext *</type>
      <name>sc_default_global_context</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5fd38fb44941b0b022d1372ff0030757</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_simcontext_int.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00314</filename>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00302" name="sc_runnable.h" local="yes" imported="no">sysc/kernel/sc_runnable.h</includes>
    <includes id="a00305" name="sc_runnable_int.h" local="yes" imported="no">sysc/kernel/sc_runnable_int.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MSG</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a50c4771b351410a2a97e1be09e93686d</anchor>
      <arglist>(NAME, P, MSG)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_get_current_process_name</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a89f8efd882968ca4aeb935c550dbf1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_defunct_process_function</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ade1906e695e044cfc069e7c535ead2e6</anchor>
      <arglist>(sc_module *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_spawn.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00317</filename>
    <includes id="a00296" name="sc_process_handle.h" local="yes" imported="no">sysc/kernel/sc_process_handle.h</includes>
    <includes id="a00320" name="sc_spawn_options.h" local="yes" imported="no">sysc/kernel/sc_spawn_options.h</includes>
    <class kind="class">sc_core::sc_spawn_object</class>
    <class kind="class">sc_core::sc_spawn_object_v</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_spawn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab979b26b209b5464e7c025fea8e4625b</anchor>
      <arglist>(T object, const char *name_p=0, const sc_spawn_options *opt_p=0)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_spawn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af3beab799c1bd0cd058697eef6ebb935</anchor>
      <arglist>(typename T::result_type *r_p, T object, const char *name_p=0, const sc_spawn_options *opt_p=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_spawn_options.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00320</filename>
    <includes id="a00020" name="sc_export.h" local="yes" imported="no">sysc/communication/sc_export.h</includes>
    <includes id="a00062" name="sc_signal_ports.h" local="yes" imported="no">sysc/communication/sc_signal_ports.h</includes>
    <class kind="class">sc_core::sc_spawn_options</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_status.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00323</filename>
    <namespace>sc_core</namespace>
    <member kind="enumeration">
      <type></type>
      <name>sc_status</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNITIALIZED</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a30e52f9c3f6f99e642c809def0009b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ELABORATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ab3bf1ea23134285c41c66dbfd2c1e11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BEFORE_END_OF_ELABORATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3acf77174ce41f4178f3c7cb06f56aa930</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_ELABORATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a2f2a69ac781207a71385a11a2296fbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_START_OF_SIMULATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3afae4c033c34efff45159278010c1cb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RUNNING</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ac842e49e579b5219ef5e665a9b5ce0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PAUSED</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ada46de21f2252ddd4c666a8d8a4b509b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOPPED</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ac64b65b3429b2399634aed07c855a45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_SIMULATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a4e8683788dcc245aada3e65011b2991f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_INITIALIZATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3af14cda6865356591c5b6cba4668a5dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_UPDATE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a8a1143202208f041a4088a576f419a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BEFORE_TIMESTEP</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a237f8c759d3fbe8eac7848b84d0d8000</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STATUS_LAST</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a1e74ceeda601128c3bfc5fdad9a60561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STATUS_ANY</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a7218b1d4f9ea285269cbda69edfd42c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a24fd06c1ba1ea96eeb15a844beb80b82</anchor>
      <arglist>(std::ostream &amp;, sc_status)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_OK</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a00a38e60f2d1fa6e159ca47a2fa89566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_ERROR</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a270935f762cca1d68a62bec14131ee43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_USER_STOP</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a223357780185a4cef86c12e316537713</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_thread_process.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00326</filename>
    <includes id="a00320" name="sc_spawn_options.h" local="yes" imported="no">sysc/kernel/sc_spawn_options.h</includes>
    <includes id="a00293" name="sc_process.h" local="yes" imported="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00230" name="sc_cor.h" local="yes" imported="no">sysc/kernel/sc_cor.h</includes>
    <includes id="a00248" name="sc_event.h" local="yes" imported="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00251" name="sc_except.h" local="yes" imported="no">sysc/kernel/sc_except.h</includes>
    <includes id="a00299" name="sc_reset.h" local="yes" imported="no">sysc/kernel/sc_reset.h</includes>
    <class kind="class">sc_core::sc_thread_process</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MSG</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a50c4771b351410a2a97e1be09e93686d</anchor>
      <arglist>(NAME, P, MSG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aabd066bb337994094ef03529230382f5</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad36cce03f17ea25819292d3124b0ddb3</anchor>
      <arglist>(sc_thread_handle, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>sc_cor *</type>
      <name>get_cor_pointer</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a740d0cdd700fe0c837cfd607d762fc17</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a026172c18ec176a6277785d0b8f26cc5</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1b081771b9d1aa29b009fb2a63db3433</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af116e07497028a8d8ca25d65ff81d92d</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5a7d5deac8326b0bb9911d6182276a91</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad8246aa634bb2dca008e1367415a9c08</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aff808cdea2dac477c072855bca9653ff</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a30331b4626ed52aec9428dd928a5e08b</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac7c40d73354d3d1152c0643c0d8377e6</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_time.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00329</filename>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00149" name="scfx_ieee.h" local="yes" imported="no">sysc/datatypes/fx/scfx_ieee.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <class kind="class">sc_core::sc_time</class>
    <class kind="struct">sc_core::sc_time_params</class>
    <namespace>sc_core</namespace>
    <member kind="enumeration">
      <type></type>
      <name>sc_time_unit</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a82936f1ffacbf4a6d0619b2287692909</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a28dbfded11d1736805d78b0d0601d636</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4afa9bd86f75f123e8c021a200fd6eb491</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_US</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4aab388fe69d39f9f2f6a68f83077eac06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a01245e9a28c1e547decd676b85523d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SEC</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a7ad0c5cbf9ee837e939f01be229cab1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator+</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a19207d492eb2a49a0b61446a8ad44c67</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator-</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa8b52f7f80825c11259e3c32cba2a060</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator*</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac2baaa11ab74dbf5dad625c7f55b06d2</anchor>
      <arglist>(const sc_time &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator*</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae1783e45a079ecaf4baf9dc723027473</anchor>
      <arglist>(double, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator/</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad126bd957eaa0d9acddea1f492a93c96</anchor>
      <arglist>(const sc_time &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator/</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a78cd7c9688e6e33d887ebc6eba99911e</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab566bfaf41e1dfb3c6e2b7808cc1e3ac</anchor>
      <arglist>(::std::ostream &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator%</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a46f6240650d61529db6c80c69bd5c4d1</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_time_resolution</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a062fc9289ececea69292879f0d7082dd</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>sc_get_time_resolution</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad4f53ba4501a95d071003d17a82c8dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_default_time_unit</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8981054f1ab75524c02222f2440f89e7</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>sc_get_default_time_unit</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acdc2a9970e6f3adbbc4cf98dabf60ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const sc_time</type>
      <name>SC_ZERO_TIME</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a17504cd45f4f8e89da1c29257d8ead47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_ver.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00332</filename>
    <includes id="a00263" name="sc_macros.h" local="yes" imported="no">sysc/kernel/sc_macros.h</includes>
    <includes id="a00077" name="sc_writer_policy.h" local="yes" imported="no">sysc/communication/sc_writer_policy.h</includes>
    <class kind="struct">sc_core::SC_API_VERSION_STRING</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SYSTEMC_2_3_1</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a5f8d7c3973f638e0d9df7d9a4cb7617f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SYSTEMC_VERSION</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>af04cf0eaeea1a50f32df3788f78da074</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_ORIGINATOR</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>ad4a1bf41f3e81f7011b5dc06ee50e76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_MAJOR</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a1464b562168b1e994e4aa0cc6f78848c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_MINOR</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a6ac5c04d22c8ae0191deddf4658af15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_PATCH</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a5f5c5e0461a418af591d5a7212d04f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_IS_PRERELEASE</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a5216b3dfe891e36e6cc326a9d610bfa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IEEE_1666_SYSTEMC</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>ac96bc610253f718cae5e7383b00aa1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_COPYRIGHT</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>aa89a8f9501aeb33bab35104989a09618</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_RELEASE_DATE</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>aa19d2b19c8b0b1e5b11459432a4635c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_PRERELEASE</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a10ec59a37a52504f8bfc27004d1d55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a3eeebacd4d590b3bd58f5422b06b4045</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_API_VERSION_STRING</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a5b633ceba4460e02975526ca2a0acb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_API_DEFINED_</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a00106cab546b720160009c3f5516581f</anchor>
      <arglist>(Symbol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_API_UNDEFINED_</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a834202b882a812b099432da3a54e116e</anchor>
      <arglist>(Symbol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_DISABLE_VIRTUAL_BIND_CHECK_</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>a9fbade5cb1d122b82e9080689919261c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_copyright</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a16dc8178b7cc30bde52c1e3c2ed3f80e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_release</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8944b7ed28ccf7cf4a8a43b92f1af6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_version</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a50f6283a34599949ac367bdbf1f1b439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SC_API_VERSION_STRING&lt; &amp;SC_DISABLE_VIRTUAL_BIND_CHECK_ &gt;</type>
      <name>api_version_check</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad38cf4e81e9c13e25a13d1aceb99a5f7</anchor>
      <arglist>(SC_DEFAULT_WRITER_POLICY)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>sc_version_major</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a388d8a839e86f876bea040a3fcf5aba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>sc_version_minor</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac1a3cf6b37320141a15c68817a7ef86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>sc_version_patch</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad73dbeb9be85c530f2f7de66db20248c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_version_originator</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a9898bf29619c77aca48ce292819bda77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_version_release_date</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7b789a415fa662f7fca1ed48fe1c4401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_version_prerelease</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8d88927661febec9589c464ca7132095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>sc_is_prerelease</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a94552db2169d7d23179900158b4af07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_version_string</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae52a4e76d9f056e18b2a63e0e2544c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_copyright_string</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af555ff2f3023c534c9372bc2b82593e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DISABLE_VIRTUAL_BIND_CHECK_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aee57fdd780a81b8f362a20f8cd7dbf1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_wait.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00335</filename>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>sc_get_curr_simcontext</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a84d407a02a02ab5bc1ce70aacfca86c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a026172c18ec176a6277785d0b8f26cc5</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1b081771b9d1aa29b009fb2a63db3433</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af116e07497028a8d8ca25d65ff81d92d</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5a7d5deac8326b0bb9911d6182276a91</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad8246aa634bb2dca008e1367415a9c08</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a60285bf4ce248d5905f608e7d5e02e27</anchor>
      <arglist>(double v, sc_time_unit tu, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aff808cdea2dac477c072855bca9653ff</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab21ea1eac4608ebe607c6afcd206cb6c</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a30331b4626ed52aec9428dd928a5e08b</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3c4909d90637feefcade33e815f35ea2</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac7c40d73354d3d1152c0643c0d8377e6</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab5cb1e5de8a3046c264da945a26e72e9</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a527f764a707fee96e78709ce773b63b5</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0b1b4af9c1331d084902c50243b5bd2d</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a977da790be235a4570df32d91bb65efd</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7bbad4fa37276cb1920a4775d0cbe046</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a99c04fca269df4ec0dbc3ce88245a1b4</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a536e98fcc1a53dd2f8559477a8f14ae8</anchor>
      <arglist>(double v, sc_time_unit tu, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abb03bcce9b0663645a91ab36cb83a424</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac11fee1464bb9585d3eb155b9e5f7af2</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a121dda9aa51107b94569845cb9607144</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab5f15a19127f86a11ec8ce53b5b6f746</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a103650be1249b0a56f310023cbf44328</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2c716b39c2938d18f794381d90e4e321</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a196d815508abe91dd05e3885490872e3</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_location</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a74ae08b71f3a8c5892bef174d3313788</anchor>
      <arglist>(const char *, int, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_wait_cthread.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/kernel/</path>
    <filename>a00338</filename>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00095" name="sc_logic.h" local="yes" imported="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00059" name="sc_signal_ifs.h" local="yes" imported="no">sysc/communication/sc_signal_ifs.h</includes>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>void</type>
      <name>halt</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa2bff719f3e3d3cddf849609835e6a33</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2b347007e37cc19ff3bf85ad6ac7cc05</anchor>
      <arglist>(int, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8eb2eab2fbd53ff7629dda17ad21d6a3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a420a157c85c53e70074276159eb2ad8c</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aea926b0a2179ad40a69f40554adfd9c3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2120409e9ee4dfa88052f3fda02540af</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_trace.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/tracing/</path>
    <filename>a00341</filename>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00329" name="sc_time.h" local="yes" imported="no">sysc/kernel/sc_time.h</includes>
    <class kind="class">sc_core::sc_signal_in_if</class>
    <class kind="class">sc_core::sc_trace_file</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_METHOD_A</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>af93866d388b887dc75711f0174af7ad3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_METHOD_B</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>ab568c9d909bceecf9a2d1273e4cfb4ed</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_REF_A</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>ac2fb330a885a54053e68526a24aa992f</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_PTR_A</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a56d754df61bc4ef1f614ccc2ec82ab01</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_A</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a98fcb6dc85a1a8b5c5cc43bfe1d84967</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRACE_FUNC_REF_A</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a94355b0594fef9284aecef92d74a5925</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRACE_FUNC_PTR_A</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a03e6a5717f33ccfff2c6c855539bd1f6</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRACE_FUNC_A</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>af32d23add448b46e46828da77567ced9</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRACE_FUNC_REF_B</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a5172e13ab35a3db793dbdd6e5fb37d9a</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRACE_FUNC_PTR_B</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a95b91f4744a1b2c062e08f13960a1b7e</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRACE_FUNC_B</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a5ce6e8f09345d7180062d77ad8aa238f</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6513c96214f62eb568bff8ace2433ab2</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; T &gt; &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a17607e52b3489cd247bd9920b829f0d4</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; T &gt; &amp;object, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5da00fcea4c0dd3cb85da7770d6db005</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; char &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aaf0ca5878a0acc084f079fed32f117e5</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; short &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a625a687fe68d83ccc1d9996aa15cbeeb</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; int &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1c1dd0c5d37b879380ebb6d57aacc967</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; long &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab4d3ada24284ac33a240f8b7e2d211b8</anchor>
      <arglist>(sc_trace_file *tf, const unsigned int &amp;object, const std::string &amp;name, const char **enum_literals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a9401a94c6e261e80ec7b002ed9f93e82</anchor>
      <arglist>(sc_trace_file *tf, const void *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace_delta_cycles</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a30e07407566de421c23e600814922a05</anchor>
      <arglist>(sc_trace_file *tf, bool on=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_write_comment</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad0be7fff8be5c0371451455554e4de7a</anchor>
      <arglist>(sc_trace_file *tf, const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tprintf</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad83e17759626f47a41e0f4af5c319ed4</anchor>
      <arglist>(sc_trace_file *tf, const char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>sc_trace_file *</type>
      <name>sc_create_vcd_trace_file</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a810d9f37a4dbcad823b55f3499cef254</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_close_vcd_trace_file</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab0f0a1f720877b9133c1a6ec7bb33d07</anchor>
      <arglist>(sc_trace_file *tf)</arglist>
    </member>
    <member kind="function">
      <type>sc_trace_file *</type>
      <name>sc_create_wif_trace_file</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2a95a065235c80ae4a613c6e7eee92d2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_close_wif_trace_file</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a61d706519e01f274ce696dfae9e96cba</anchor>
      <arglist>(sc_trace_file *tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_trace_file_base.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/tracing/</path>
    <filename>a00344</filename>
    <includes id="a00341" name="sc_trace.h" local="yes" imported="no">sysc/tracing/sc_trace.h</includes>
    <includes id="a00347" name="sc_tracing_ids.h" local="yes" imported="no">sysc/tracing/sc_tracing_ids.h</includes>
    <class kind="class">sc_core::sc_trace_file_base</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_TRACING_PHASE_CALLBACKS_</name>
      <anchorfile>a00344.html</anchorfile>
      <anchor>a521c16a469710002e33a944e110e37f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>double_to_special_int64</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a25639887ed1be3542f67df225f24f854</anchor>
      <arglist>(double in, unsigned *high, unsigned *low)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>localtime_string</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7da4fe780322ecaba5ee4ec9e8e6caa6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_tracing_ids.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/tracing/</path>
    <filename>a00347</filename>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a37fa6d743c3ee9458ae3cefdfc5c4a76</anchor>
      <arglist>(SC_ID_TRACING_FOPEN_FAILED_, 701, &quot;cannot open tracefile for writing&quot;) SC_DEFINE_MESSAGE(SC_ID_TRACING_TIMESCALE_DEFAULT_</arglist>
    </member>
    <member kind="function">
      <type>default timescale unit used for tracing</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>af22402e92664becad3e814fce130f303</anchor>
      <arglist>(SC_ID_TRACING_TIMESCALE_UNIT_, 703, &quot;tracing timescale unit set&quot;) SC_DEFINE_MESSAGE(SC_ID_TRACING_VCD_DELTA_CYCLE_</arglist>
    </member>
    <member kind="function">
      <type>default timescale unit used for tracing VCD delta cycle tracing with pseudo</type>
      <name>timesteps</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a819bee64234556dfa0d2753c8a915e82</anchor>
      <arglist>(1 unit)&quot; )  SC_DEFINE_MESSAGE( SC_ID_TRACING_OBJECT_IGNORED_</arglist>
    </member>
    <member kind="function">
      <type>default timescale unit used for tracing VCD delta cycle tracing with pseudo object cannot not be traced</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a395727e204aba2f21300f91b07fc8f39</anchor>
      <arglist>(SC_ID_TRACING_OBJECT_NAME_FILTERED_, 711, &quot;traced object name filtered&quot;) SC_DEFINE_MESSAGE(SC_ID_TRACING_INVALID_ENUM_VALUE_</arglist>
    </member>
    <member kind="function">
      <type>default timescale unit used for tracing VCD delta cycle tracing with pseudo object cannot not be traced traced value of enumerated type undefined</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00347.html</anchorfile>
      <anchor>a772a2aca74518dfb2f9db67cec953f31</anchor>
      <arglist>(SC_ID_TRACING_VCD_DUPLICATE_TIME_, 713, &quot;multiple VCD tracing cycles with the same time detected&quot;) SC_DEFINE_MESSAGE(SC_ID_TRACING_VCD_REVERSED_TIME_</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_vcd_trace.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/tracing/</path>
    <filename>a00350</filename>
    <includes id="a00344" name="sc_trace_file_base.h" local="yes" imported="no">sysc/tracing/sc_trace_file_base.h</includes>
    <class kind="class">sc_core::vcd_T_trace</class>
    <class kind="class">sc_core::vcd_trace_file</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_wif_trace.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/tracing/</path>
    <filename>a00353</filename>
    <includes id="a00191" name="sc_nbdefs.h" local="yes" imported="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00344" name="sc_trace_file_base.h" local="yes" imported="no">sysc/tracing/sc_trace_file_base.h</includes>
    <class kind="class">sc_core::wif_T_trace</class>
    <class kind="class">sc_core::wif_trace_file</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_hash.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00356</filename>
    <class kind="class">sc_core::sc_pdhash_iter</class>
    <class kind="class">sc_core::sc_phash_base</class>
    <class kind="class">sc_core::sc_phash_base_iter</class>
    <class kind="class">sc_core::sc_phash_iter</class>
    <class kind="class">sc_core::sc_phash</class>
    <class kind="class">sc_core::sc_phash_iter</class>
    <class kind="class">sc_core::sc_pdhash</class>
    <class kind="class">sc_core::sc_pdhash_iter</class>
    <class kind="class">sc_core::sc_strhash_iter</class>
    <class kind="class">sc_core::sc_strhash</class>
    <class kind="class">sc_core::sc_strhash_iter</class>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>unsigned</type>
      <name>default_int_hash_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7d424dca828ee6f1346eeae501953f44</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>default_ptr_hash_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a94873712b5d6ebc811c5eb4e6b2a9447</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>default_str_hash_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae85012e2048890912d1b6412add44846</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_strhash_cmp</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a10640abf5b740e538fbdc686865d28e9</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_strhash_kfree</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab4b92a252d1dba030c4c7b14c4a3d514</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>sc_strhash_kdup</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4c889ac7b1301b4175eabe1ce896d101</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHASH_DEFAULT_MAX_DENSITY</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a04dc5eeb372ac5295a594d6bc09fcb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHASH_DEFAULT_INIT_TABLE_SIZE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a585c1cd718b9ed095cf31af650982dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHASH_DEFAULT_GROW_FACTOR</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a764fb7f2a1814c7ca02a8ed6101dc470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>PHASH_DEFAULT_REORDER_FLAG</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae47549bba2ac4b7f9bd73c198718deee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_iostream.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00359</filename>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CCAST</name>
      <anchorfile>a00359.html</anchorfile>
      <anchor>a50accaada9f2ad4dda80dfa5faf784ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DCAST</name>
      <anchorfile>a00359.html</anchorfile>
      <anchor>a8ad793d1ed6361f5dddf4eebc8937e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RCAST</name>
      <anchorfile>a00359.html</anchorfile>
      <anchor>aee24d8236281595b79ebc82dbbcf0f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCAST</name>
      <anchorfile>a00359.html</anchorfile>
      <anchor>abdfe6f29a040a88c7b8715999894bc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::istream</type>
      <name>systemc_istream</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa41f37c54128db73b2bd0271d9653f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::ostream</type>
      <name>systemc_ostream</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a01d2d93f36664a8b8396e268cdfe0109</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_list.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00362</filename>
    <class kind="class">sc_core::sc_plist_iter</class>
    <class kind="class">sc_core::sc_plist_base</class>
    <class kind="class">sc_core::sc_plist_base_iter</class>
    <class kind="class">sc_core::sc_plist</class>
    <class kind="class">sc_core::sc_plist_iter</class>
    <namespace>sc_core</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>sc_plist_map_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af9c90b2747ac7f87ccb924c19644ed21</anchor>
      <arglist>)(void *data, void *arg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_machine.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00365</filename>
  </compound>
  <compound kind="file">
    <name>sc_mempool.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00368</filename>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <class kind="class">sc_core::sc_mempool</class>
    <class kind="class">sc_core::sc_mpobject</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_pq.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00371</filename>
    <class kind="class">sc_core::sc_ppq_base</class>
    <class kind="class">sc_core::sc_ppq</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_pvector.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00374</filename>
    <class kind="class">sc_core::sc_pvector</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ACCESS</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>ae1378dd54ebc6f450b432cb399000525</anchor>
      <arglist>(I)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADDR_ACCESS</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a1d877b321dbdd4dbdcb3c5aeb733628e</anchor>
      <arglist>(I)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CFT</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aafa116a3fc5bfb5e04997dc15762b3a1</anchor>
      <arglist>)(const void *, const void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_report.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00377</filename>
    <includes id="a00251" name="sc_except.h" local="yes" imported="no">sysc/kernel/sc_except.h</includes>
    <includes id="a00380" name="sc_report_handler.h" local="yes" imported="no">sysc/utils/sc_report_handler.h</includes>
    <class kind="class">sc_core::sc_report</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFAULT_INFO_ACTIONS</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>afcbdf811fb7ef32588019775ea3a3501</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFAULT_WARNING_ACTIONS</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>abd4867adda87d866b4ac3b64afe56425</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFAULT_ERROR_ACTIONS</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>ac470486bada7c053119d930add0fe27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFAULT_FATAL_ACTIONS</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>ad60c883b385686fbd164dd04efd29f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_INFO</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a96d99fea4b785441c169dd3b365d890a</anchor>
      <arglist>(msg_type, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_INFO_VERB</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a38fc0dfb8d6fcd6bd5d907b46e16fce9</anchor>
      <arglist>(msg_type, msg, verbosity)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_WARNING</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>acfe483c250d556bb8a833e3e05da6654</anchor>
      <arglist>(msg_type, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_ERROR</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>ad5720f0a4adf8866eb628b62a4fde9bf</anchor>
      <arglist>(msg_type, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_FATAL</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a3661cb5dd8c369e6838f91847cdb6d07</anchor>
      <arglist>(msg_type, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sc_assert</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a74afc5942d7b28d11f360a6f03181daa</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned</type>
      <name>sc_actions</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7ddb1a732ada16a5c04854b19a8e3442</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::exception</type>
      <name>sc_exception</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7f25767d6c84206b61ee6c80477e3b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_severity</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INFO</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ead2bd3c618cb02608fcdbdf26e0a63675</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WARNING</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ead51483b845b42e87825f2c71f12c67d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ERROR</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ea5ba5d6acf68a05a0122ca2da147d2b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FATAL</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0eacf1a7aa6c4aa03be39ee308908ff616e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MAX_SEVERITY</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ea1ea1bacdd4addc7ec80fc2caf747ad6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_verbosity</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NONE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a34c3f85e038acaba65da0eed4126cd36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LOW</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a46dcccc49ff8b0f4faf102a307456253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MEDIUM</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a1a3fe57ec4b6e8032d7288ee33be8ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HIGH</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a3b051130461aff5cb676bc4021f3d859</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FULL</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378ad1ec5d4169b769a4f3aa426cb9881206</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEBUG</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378ac3d8a770ce994c79971af0e3498e5457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNSPECIFIED</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba0a482c78cbe2d8c84d0b34021d156f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DO_NOTHING</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba43247b6fdd82197acb4fe74f0edd96d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_THROW</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba3ff96e0395a08f00834b49a2e5532658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LOG</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba105c183473970696920dd006207f7973</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DISPLAY</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dbaf28c4eba216be43a0772a075e24e7878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CACHE_REPORT</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba7b2ca6fedcfd0c3506ec549d224b83c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INTERRUPT</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dbab3eb6c04af237fe0d7b4bf9b2e009164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba3d8a6502175008e463fa4232e5f4cfc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ABORT</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba200a23eb4070364a2de403438930226a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>sc_report_compose_message</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8dbf2ad39cac59cc29d8c7b2e4aedcda</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_UNKNOWN_ERROR_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a382ee4ee3dfa6fe3aabb6bd136264c8b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_WITHOUT_MESSAGE_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af6b3c3ec5fde4421e6415c7bb8716f80</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_NOT_IMPLEMENTED_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a017093c56818abb80a3c03560407d57e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_INTERNAL_ERROR_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a779ddeac12e1c0a3df541b194c448b5c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_ASSERTION_FAILED_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>afc6703a3c47d21f672cb4fab5a5031e5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_OUT_OF_BOUNDS_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0de6ce1fac96e97db4bdd2fb24468fc2</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_report_handler.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00380</filename>
    <class kind="struct">sc_core::sc_msg_def</class>
    <class kind="class">sc_core::sc_report_handler</class>
    <class kind="struct">sc_core::sc_report_handler::msg_def_items</class>
    <namespace>sc_core</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>sc_report_handler_proc</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acc0d7597d9312ec973a88912cd1f6781</anchor>
      <arglist>)(const sc_report &amp;, const sc_actions &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_report_close_default_log</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a54f4db91eb8da5423ded27b0268a0c5f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_stop_here.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00383</filename>
    <includes id="a00377" name="sc_report.h" local="yes" imported="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>void</type>
      <name>sc_interrupt_here</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6b42bd460037adb6926f4f62782162fe</anchor>
      <arglist>(const char *id, sc_severity severity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_stop_here</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8014b9e89fec310722f26bb3cb098dcd</anchor>
      <arglist>(const char *id, sc_severity severity)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_string.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00386</filename>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00377" name="sc_report.h" local="yes" imported="no">sysc/utils/sc_report.h</includes>
    <class kind="class">sc_dt::sc_string_old</class>
    <namespace>sc_dt</namespace>
    <member kind="function">
      <type>sc_string_old</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a68b57497197e7e6eb6f1e3558486887a</anchor>
      <arglist>(const char *s, const sc_string_old &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>systemc_ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea2ddc4934d0ddb0f758a8d3f724a00a</anchor>
      <arglist>(systemc_ostream &amp;os, const sc_string_old &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_temporary.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00389</filename>
    <class kind="class">sc_core::sc_byte_heap</class>
    <class kind="class">sc_core::sc_vpool</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_utils_ids.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00392</filename>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a86dfdd7e55b4c6032c9709571b59cd8f</anchor>
      <arglist>(SC_ID_STRING_TOO_LONG_, 801, &quot;string is too long&quot;) SC_DEFINE_MESSAGE(SC_ID_FRONT_ON_EMPTY_LIST_</arglist>
    </member>
    <member kind="function">
      <type>attempt to take</type>
      <name>front</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a00f852e12ef89fedf8f0d8c4020a6f9b</anchor>
      <arglist>() on an empty list&quot;) SC_DEFINE_MESSAGE(SC_ID_BACK_ON_EMPTY_LIST_</arglist>
    </member>
    <member kind="function">
      <type>attempt to take attempt to take</type>
      <name>back</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac71ad48716734d193b8f00ff0a4b4a9b</anchor>
      <arglist>() on an empty list&quot;) SC_DEFINE_MESSAGE(SC_ID_IEEE_1666_DEPRECATION_</arglist>
    </member>
    <member kind="function">
      <type>attempt to take attempt to take IEEE_Std_1666 deprecated</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a6b2f5258f26b140200d59abf83af2646</anchor>
      <arglist>(SC_ID_VECTOR_INIT_CALLED_TWICE_, 805, &quot;sc_vector::init has already been called&quot;) SC_DEFINE_MESSAGE(SC_ID_VECTOR_INIT_INVALID_CONTEXT_</arglist>
    </member>
    <member kind="function">
      <type>attempt to take attempt to take IEEE_Std_1666 deprecated sc_vector::init called from invalid object context</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a97aa5efa9d316f045691d9697d61de29</anchor>
      <arglist>(SC_ID_VECTOR_BIND_EMPTY_, 807, &quot;sc_vector::bind called with empty range&quot;) SC_DEFINE_MESSAGE(SC_ID_VECTOR_NONOBJECT_ELEMENTS_</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_vector.h</name>
    <path>/data/phil/github/systemc/systemc/src/sysc/utils/</path>
    <filename>a00395</filename>
    <includes id="a00281" name="sc_object.h" local="yes" imported="no">sysc/kernel/sc_object.h</includes>
    <class kind="struct">sc_core::sc_meta::remove_const</class>
    <class kind="struct">sc_core::sc_meta::remove_const&lt; const T &gt;</class>
    <class kind="struct">sc_core::sc_meta::is_same</class>
    <class kind="struct">sc_core::sc_meta::is_same&lt; T, T &gt;</class>
    <class kind="struct">sc_core::sc_meta::is_const</class>
    <class kind="struct">sc_core::sc_meta::is_const&lt; const T &gt;</class>
    <class kind="struct">sc_core::sc_meta::is_more_const</class>
    <class kind="struct">sc_core::sc_meta::special_result</class>
    <class kind="struct">sc_core::sc_meta::remove_special_fptr</class>
    <class kind="struct">sc_core::sc_meta::remove_special_fptr&lt; special_result &amp;(*)(T) &gt;</class>
    <class kind="class">sc_core::sc_vector</class>
    <class kind="class">sc_core::sc_vector_assembly</class>
    <class kind="class">sc_core::sc_vector_iter</class>
    <class kind="class">sc_core::sc_vector_base</class>
    <class kind="struct">sc_core::sc_direct_access</class>
    <class kind="class">sc_core::sc_member_access</class>
    <class kind="class">sc_core::sc_vector_iter</class>
    <class kind="class">sc_core::sc_vector</class>
    <class kind="class">sc_core::sc_vector_assembly</class>
    <namespace>sc_core</namespace>
    <namespace>sc_core::sc_meta</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_RPTYPE_</name>
      <anchorfile>a00395.html</anchorfile>
      <anchor>a2184bdf04b5557b30da8c312650bfce3</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_ENABLE_IF_</name>
      <anchorfile>a00395.html</anchorfile>
      <anchor>ae760668417268961d55f598cea8a7074</anchor>
      <arglist>(Cond)</arglist>
    </member>
    <member kind="function">
      <type>Container::iterator</type>
      <name>sc_vector_do_bind</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1c4ee3c22957c64e76ce3349ee28d300</anchor>
      <arglist>(Container &amp;cont, ArgumentIterator first, ArgumentIterator last, typename Container::iterator from)</arglist>
    </member>
    <member kind="function">
      <type>Container::iterator</type>
      <name>sc_vector_do_operator_paren</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5ed596c989c1ed678c36ebdb978f8c5d</anchor>
      <arglist>(Container &amp;cont, ArgumentIterator first, ArgumentIterator last, typename Container::iterator from)</arglist>
    </member>
    <member kind="function">
      <type>sc_vector_assembly&lt; T, MT &gt;</type>
      <name>sc_assemble_vector</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a24150599b83f189ede71b50e33a438b4</anchor>
      <arglist>(sc_vector&lt; T &gt; &amp;vec, MT(T::*ptr))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>systemc</name>
    <path>/data/phil/github/systemc/systemc/src/</path>
    <filename>a00398</filename>
    <includes id="a00224" name="sc_cmnhdr.h" local="yes" imported="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00254" name="sc_externs.h" local="yes" imported="no">sysc/kernel/sc_externs.h</includes>
    <includes id="a00251" name="sc_except.h" local="yes" imported="no">sysc/kernel/sc_except.h</includes>
    <includes id="a00269" name="sc_module.h" local="yes" imported="no">sysc/kernel/sc_module.h</includes>
    <includes id="a00311" name="sc_simcontext.h" local="yes" imported="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00296" name="sc_process_handle.h" local="yes" imported="no">sysc/kernel/sc_process_handle.h</includes>
    <includes id="a00332" name="sc_ver.h" local="yes" imported="no">sysc/kernel/sc_ver.h</includes>
    <includes id="a00002" name="sc_buffer.h" local="yes" imported="no">sysc/communication/sc_buffer.h</includes>
    <includes id="a00005" name="sc_clock.h" local="yes" imported="no">sysc/communication/sc_clock.h</includes>
    <includes id="a00008" name="sc_clock_ports.h" local="yes" imported="no">sysc/communication/sc_clock_ports.h</includes>
    <includes id="a00017" name="sc_event_queue.h" local="yes" imported="no">sysc/communication/sc_event_queue.h</includes>
    <includes id="a00020" name="sc_export.h" local="yes" imported="no">sysc/communication/sc_export.h</includes>
    <includes id="a00023" name="sc_fifo.h" local="yes" imported="no">sysc/communication/sc_fifo.h</includes>
    <includes id="a00029" name="sc_fifo_ports.h" local="yes" imported="no">sysc/communication/sc_fifo_ports.h</includes>
    <includes id="a00038" name="sc_mutex.h" local="yes" imported="no">sysc/communication/sc_mutex.h</includes>
    <includes id="a00050" name="sc_semaphore.h" local="yes" imported="no">sysc/communication/sc_semaphore.h</includes>
    <includes id="a00056" name="sc_signal.h" local="yes" imported="no">sysc/communication/sc_signal.h</includes>
    <includes id="a00062" name="sc_signal_ports.h" local="yes" imported="no">sysc/communication/sc_signal_ports.h</includes>
    <includes id="a00065" name="sc_signal_resolved.h" local="yes" imported="no">sysc/communication/sc_signal_resolved.h</includes>
    <includes id="a00068" name="sc_signal_resolved_ports.h" local="yes" imported="no">sysc/communication/sc_signal_resolved_ports.h</includes>
    <includes id="a00071" name="sc_signal_rv.h" local="yes" imported="no">sysc/communication/sc_signal_rv.h</includes>
    <includes id="a00074" name="sc_signal_rv_ports.h" local="yes" imported="no">sysc/communication/sc_signal_rv_ports.h</includes>
    <includes id="a00080" name="sc_bit.h" local="yes" imported="no">sysc/datatypes/bit/sc_bit.h</includes>
    <includes id="a00095" name="sc_logic.h" local="yes" imported="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00089" name="sc_bv.h" local="yes" imported="no">sysc/datatypes/bit/sc_bv.h</includes>
    <includes id="a00098" name="sc_lv.h" local="yes" imported="no">sysc/datatypes/bit/sc_lv.h</includes>
    <includes id="a00173" name="sc_bigint.h" local="yes" imported="no">sysc/datatypes/int/sc_bigint.h</includes>
    <includes id="a00176" name="sc_biguint.h" local="yes" imported="no">sysc/datatypes/int/sc_biguint.h</includes>
    <includes id="a00179" name="sc_int.h" local="yes" imported="no">sysc/datatypes/int/sc_int.h</includes>
    <includes id="a00203" name="sc_uint.h" local="yes" imported="no">sysc/datatypes/int/sc_uint.h</includes>
    <includes id="a00212" name="sc_concatref.h" local="yes" imported="no">sysc/datatypes/misc/sc_concatref.h</includes>
    <includes id="a00341" name="sc_trace.h" local="yes" imported="no">sysc/tracing/sc_trace.h</includes>
    <includes id="a00359" name="sc_iostream.h" local="yes" imported="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00392" name="sc_utils_ids.h" local="yes" imported="no">sysc/utils/sc_utils_ids.h</includes>
    <includes id="a00374" name="sc_pvector.h" local="yes" imported="no">sysc/utils/sc_pvector.h</includes>
    <includes id="a00395" name="sc_vector.h" local="yes" imported="no">sysc/utils/sc_vector.h</includes>
  </compound>
  <compound kind="file">
    <name>systemc.h</name>
    <path>/data/phil/github/systemc/systemc/src/</path>
    <filename>a00401</filename>
    <includes id="a00398" name="systemc" local="yes" imported="no">systemc</includes>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_phase_callback_registry::entry</name>
    <filename>a01852.html</filename>
    <member kind="variable">
      <type>cb_type *</type>
      <name>target</name>
      <anchorfile>a01852.html</anchorfile>
      <anchor>a7b9d1682e263e3c932ad9f89f346556c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mask_type</type>
      <name>mask</name>
      <anchorfile>a01852.html</anchorfile>
      <anchor>ad0bb567c793d0ec104c5e930a8a64691</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_object::hierarchy_scope</name>
    <filename>a01836.html</filename>
    <member kind="function">
      <type></type>
      <name>hierarchy_scope</name>
      <anchorfile>a01836.html</anchorfile>
      <anchor>a22804f99ff3409b9acbd94386fe18e75</anchor>
      <arglist>(sc_object *obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hierarchy_scope</name>
      <anchorfile>a01836.html</anchorfile>
      <anchor>a96b396eadac05fe7704193b2e28fec29</anchor>
      <arglist>(sc_module *mod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~hierarchy_scope</name>
      <anchorfile>a01836.html</anchorfile>
      <anchor>ab8e1b02187878b196883d65e0cb2d476</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>sc_dt::ieee_double</name>
    <filename>a01564.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>d</name>
      <anchorfile>a01564.html</anchorfile>
      <anchor>a976791ee8d928a23d7af46d861208825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct sc_dt::ieee_double::@1</type>
      <name>s</name>
      <anchorfile>a01564.html</anchorfile>
      <anchor>a73e6df24bb96afc84a4b6f8824efbaf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>sc_dt::ieee_float</name>
    <filename>a01576.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>f</name>
      <anchorfile>a01576.html</anchorfile>
      <anchor>a7d3cefca55e25fd3a14efe9a7c527d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct sc_dt::ieee_float::@2</type>
      <name>s</name>
      <anchorfile>a01576.html</anchorfile>
      <anchor>a8eba91d70c8f1442dd582b19c1652f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::is_const</name>
    <filename>a02084.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SC_BOOST_STATIC_CONSTANT</name>
      <anchorfile>a02084.html</anchorfile>
      <anchor>a7bcf39244a8398e0e89b2e55d1530046</anchor>
      <arglist>(bool, value=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::is_const&lt; const T &gt;</name>
    <filename>a02088.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SC_BOOST_STATIC_CONSTANT</name>
      <anchorfile>a02088.html</anchorfile>
      <anchor>af0477f8c3e9e31be2c334cd241b7226c</anchor>
      <arglist>(bool, value=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::is_more_const</name>
    <filename>a02092.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SC_BOOST_STATIC_CONSTANT</name>
      <anchorfile>a02092.html</anchorfile>
      <anchor>ab58a5477d37535b68188ce70673e85f0</anchor>
      <arglist>(bool, value=(is_same&lt; typename remove_const&lt; CT &gt;::type, typename remove_const&lt; T &gt;::type &gt;::value &amp;&amp;(is_const&lt; CT &gt;::value &gt;=is_const&lt; T &gt;::value)))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::is_same</name>
    <filename>a02076.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SC_BOOST_STATIC_CONSTANT</name>
      <anchorfile>a02076.html</anchorfile>
      <anchor>a7baede3fd09e2df337d8bf06a3e0f5e8</anchor>
      <arglist>(bool, value=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::is_same&lt; T, T &gt;</name>
    <filename>a02080.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SC_BOOST_STATIC_CONSTANT</name>
      <anchorfile>a02080.html</anchorfile>
      <anchor>a125bece388710dfd9a5b8886ba1dee04</anchor>
      <arglist>(bool, value=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_report_handler::msg_def_items</name>
    <filename>a02052.html</filename>
    <member kind="variable">
      <type>sc_msg_def *</type>
      <name>md</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a25f7fcfd203938cfd56d7e88ccd06c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a8253f5d219b3ce22d23a188d0d54aaa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>allocated</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>a8682742558710f31eca63bb7d3dfc7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>msg_def_items *</type>
      <name>next</name>
      <anchorfile>a02052.html</anchorfile>
      <anchor>aaec30d923e1cff4e0070210eff0442b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::remove_const</name>
    <filename>a02068.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a02068.html</anchorfile>
      <anchor>ac035665b407d9fe7ad314e8df562aaf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::remove_const&lt; const T &gt;</name>
    <filename>a02072.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a02072.html</anchorfile>
      <anchor>a6faefbe39c8eabbc2a597000c4b99d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::remove_special_fptr</name>
    <filename>a02100.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::remove_special_fptr&lt; special_result &amp;(*)(T) &gt;</name>
    <filename>a02104.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a02104.html</anchorfile>
      <anchor>ac61ae9b84752e3c6e057dcecc37b7f4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::SC_API_VERSION_STRING</name>
    <filename>a01948.html</filename>
    <member kind="function">
      <type></type>
      <name>SC_API_VERSION_STRING</name>
      <anchorfile>a01948.html</anchorfile>
      <anchor>aaa353ca91bb9fdb92616cc52544442fe</anchor>
      <arglist>(sc_writer_policy default_writer_policy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_attr_base</name>
    <filename>a01732.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_attr_base</name>
      <anchorfile>a01732.html</anchorfile>
      <anchor>a6fe38d9a0c5ed0fe5271deaafaae339e</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attr_base</name>
      <anchorfile>a01732.html</anchorfile>
      <anchor>aab1ae284a844d9516932e36799aba9ec</anchor>
      <arglist>(const sc_attr_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_attr_base</name>
      <anchorfile>a01732.html</anchorfile>
      <anchor>a6ba4840bf7e4832161805fcc8cd97581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01732.html</anchorfile>
      <anchor>a7539ef1cfbf5037729faf540f39ef236</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_attr_cltn</name>
    <filename>a01736.html</filename>
    <member kind="typedef">
      <type>sc_attr_base *</type>
      <name>elem_type</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a3252d5e11cef88b937e1f0be4d37d92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; elem_type &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a19a13069c7a3df798d8248c3af25f69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; elem_type &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a71c44c5fbec96c724d23c9ec66faf40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attr_cltn</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a82589994753cdc670d0512dbda24f6df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attr_cltn</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>aa0eb369fa22dddb26a49bc7c065530aa</anchor>
      <arglist>(const sc_attr_cltn &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_attr_cltn</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a807623d079e221721c5ae11c2bfc2065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>push_back</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>aad50aebc6052125814548b7aea98b3c7</anchor>
      <arglist>(sc_attr_base *)</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_base *</type>
      <name>operator[]</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a0dd52de87472b7707deaf66d51983830</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_attr_base *</type>
      <name>operator[]</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>ae2810868aad25a3d3748ad78bcc5478e</anchor>
      <arglist>(const std::string &amp;name_) const</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_base *</type>
      <name>remove</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>af24e73aec2b2eb668d53a282da5fe63d</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_all</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a08a8485f48c8e87bc7ccd1a44f8b8344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a5df5aec140fd83207b4fba049195bc6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>abf59d0f702a9447ef5f9a881d245c5a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a5a7781c0a7c7bf8ca6003e981b2ea263</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a3343e58d7910c0cc30b4f2326d8cf09e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a01736.html</anchorfile>
      <anchor>a7c7e480c0d11489dd5846a65a9216f24</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_attribute</name>
    <filename>a01740.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_attr_base</base>
    <member kind="function">
      <type></type>
      <name>sc_attribute</name>
      <anchorfile>a01740.html</anchorfile>
      <anchor>a452a0fffc5ed8bbcde646042e0dda313</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attribute</name>
      <anchorfile>a01740.html</anchorfile>
      <anchor>a322abd8fc1f25974610905ecc14d216c</anchor>
      <arglist>(const std::string &amp;name_, const T &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attribute</name>
      <anchorfile>a01740.html</anchorfile>
      <anchor>a4ba8ccff7df06a7f0ba413d98f49e39b</anchor>
      <arglist>(const sc_attribute&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_attribute</name>
      <anchorfile>a01740.html</anchorfile>
      <anchor>a690e24e09b1940b146e5338a2b5ed959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>value</name>
      <anchorfile>a01740.html</anchorfile>
      <anchor>a2d57adacac63804b18c323e742ac2121</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bigint</name>
    <filename>a01616.html</filename>
    <templarg>W</templarg>
    <base>sc_dt::sc_signed</base>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>ae5c31ed76db68b7c21cae1dbfd1e2962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>ac7aedd55a95cd469b453acaa13b54bd2</anchor>
      <arglist>(const sc_bigint&lt; W &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a87dfe8ea9ae987c984fec692a72729de</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a2d0481788703eadbe2f3bfaad9b211c6</anchor>
      <arglist>(const sc_signed_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a9867a6f314f7077eb716e0e01fbd4aff</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a87096563738ffb05b63fc55781f8692b</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>aee099955be25313aab2c888d338df072</anchor>
      <arglist>(const sc_unsigned_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>ad9385f49cf8d304cce99da3ad39f955c</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>ac8a7c2786d2ca13989672864a51a6dfd</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a54a78ecf80047658d0d7a6660bc8dfc7</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>ac8b17f032fdac83f6cb7d10ad496d25a</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a44134125508c2d163d05dd0b16937471</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>adf2900a80d548269e52bb90175136f6c</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a9f82b29706714d4a739de1a84dcacb35</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a571c254c8e09a1fbf81d2363ca121b94</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a2e9d45e80d72ba66b9bbbef783c9d11a</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a7e6afc075e8f1c98e999b279551453fe</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_bigint</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a198c7f69c0ef16869a1475edcf0f03ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>ade6c76c1b4a504d020d5512cae9a61fb</anchor>
      <arglist>(const sc_bigint&lt; W &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a1599ad194b2c27e0d295fa189968623c</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>ae6c3819fa2eb9be68399dec6c6d46288</anchor>
      <arglist>(const sc_signed_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>adb507d8cac64a575eb9fb54b4952d306</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a77d5978e9edd1df13bc0cc014185f04b</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a89da7209428c3e1fc18fda63df0003d8</anchor>
      <arglist>(const sc_unsigned_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a4fdab83afde75bae1cdb6b66f3d6f2ff</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a53c8ac4636cfe9265980ef146709e818</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>adb9c9c0f0a7b6dfb3fb1009110116b86</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a0590f11716d985ebc48ee8f45bd0368a</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a11298bd494ef767cc9d99c4d0e90291b</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a4f9cf9c208e68a46a4b363a327d29aba</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a1ede6aa033c43e3c8a462f01ec1fae6d</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a46b3f7009dff82a3e725d5c7280ee8ff</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a3ccf5dfd64ae99866af705725dbfe902</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>a1d3aca692d8ebe8ce3bd88a912db6d07</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>aaaf9b2070b60f08bd65d327c7d0f5db4</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01616.html</anchorfile>
      <anchor>ac778d505b11fada528045cfd444c083c</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_biguint</name>
    <filename>a01620.html</filename>
    <templarg>W</templarg>
    <base>sc_dt::sc_unsigned</base>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a9e8641bc7d153d0518ce5472d88362be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>ade2e79e36c49975a6d19acd10fbed6d9</anchor>
      <arglist>(const sc_biguint&lt; W &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>aab9ced9e5c3eb4d5964d7d1f0c63d804</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a73ee85f36a5b34f8d94ca97ba9c1436c</anchor>
      <arglist>(const sc_unsigned_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a01912961a37ea8e05f1a839784cb730d</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a4629b00535fe3abf1923afc9cd9dd7d3</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>ab4d266ddf7ef3263bab1d1d4e1c8cd97</anchor>
      <arglist>(const sc_signed_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a391803a50de53af3b1ba305e70130186</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a4b51392e7edc97cf5a1d0899f170e2c0</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a73187c2bb67bc2d38eb6e0589981cf23</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>ab74d7e242290e5917a59a0f555e8773a</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a8154d68addde6b1f5a4f6356daf3f3e1</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>ae9bee6e0a73353fab34310678cfe064e</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a8552a430d7288a9c555596b81a851fea</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a656386130f589bbb8f788f1005247c88</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>ac67e112b84457f35b7d70fccf331bcad</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>ab3f866b68cba5b95e406a8786da29850</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_biguint</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a5f3f2a844f9f16d2d8b5720ae2dd6532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>acf58b42fe336e13ba000830d82001de2</anchor>
      <arglist>(const sc_biguint&lt; W &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a65c0b1546f85607342b908e1bf50c3fc</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a9af78c22fed2640127259d5ec0363032</anchor>
      <arglist>(const sc_unsigned_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a4e2d0b40a278427725bbae2678db6279</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a59dfd1fbaa527bf21b2b8a570b43fe36</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a904cc344c28178fae1512e91cc197efb</anchor>
      <arglist>(const sc_signed_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>aab72a6451ed5cfd34f240b8a1711a311</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a6e0a9c65c289aa2210cc4e2c9e352cd6</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a4f418c6b93d513fd1b07e7608495a96a</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a3161af9049258d28901b2d54703f6205</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>abc7bdabb25c0af96f79e57be65342ae0</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a610c0af0b8f15c844ad0749f04db98d6</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>afe928fb25e464f4e7ef1e44c2fd474d9</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a88bd3961f1849deded20ca0b2f1851f4</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a721cba8db21b8b89a283764d4ffeb253</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a78b42da223c26ef23a6ea1c8a047f3f9</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>aa2eb23278115578003f5c294480103c6</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01620.html</anchorfile>
      <anchor>a552801421c35ba0a4d8c2300a53af36c</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_bind_proxy</name>
    <filename>a01812.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_bind_proxy</name>
      <anchorfile>a01812.html</anchorfile>
      <anchor>ad982918a6ce3dc5313ce2ae59bda2240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bind_proxy</name>
      <anchorfile>a01812.html</anchorfile>
      <anchor>aac239e4b99295e629c810906212d3f13</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bind_proxy</name>
      <anchorfile>a01812.html</anchorfile>
      <anchor>a51aa646139da624060f5c5eaaca1fb87</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>sc_interface *</type>
      <name>iface</name>
      <anchorfile>a01812.html</anchorfile>
      <anchor>acf5e1d9812e35aeb1c47a480fcdb4a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_port_base *</type>
      <name>port</name>
      <anchorfile>a01812.html</anchorfile>
      <anchor>a421f0418c5ee2789169dbc84d8518cc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bit</name>
    <filename>a01364.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_bit</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>adbc1ba5dd4b67aa0efab53e7bf138280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bit</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a568ceea0f9fd082bbdde608aebdb7f9a</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bit</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a97a9d33dac5c7effd57b28566f8ff73a</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_bit</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>aa8cb46d7d3c9c06dc78684a901bc0750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator=</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a0d2e780b7e368516b3d7ebbbbf31b9b9</anchor>
      <arglist>(const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator=</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>abc112d2a64bf770bf23f236ba7024e0b</anchor>
      <arglist>(const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>aba8e158323b51067e11a481339e7fd15</anchor>
      <arglist>(const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>aac70eead106184f7f80ac5bd58612fcd</anchor>
      <arglist>(const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a01d28fb9843bb6ed3fc8e60f175b8fdd</anchor>
      <arglist>(const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a503da97c216948ac0f3c0e6538b58d08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a4a6d3d6a8e42c4939ef02b8430ff50a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a5e66930489f6ad7de9f846095fde4bcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to_char</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a6489a7ee3a5872a7d5652753f2a5d469</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>b_not</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a0a3566b39565edd789318befa88759b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a4e7a70bdde815be8f5513367186ecffb</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>aa3879d5a40fcfa5edaa4bc8bceb9de2d</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a0878ac213532d2986a86870b7473585a</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>afc9c399a2b2115248a2bd3d018ab7059</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_bit</type>
      <name>operator~</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a65ad30b91a638cc08b5037f8e383d879</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_bit</type>
      <name>operator|</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a209f3da30e2b56f95847563b54a0d099</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_bit</type>
      <name>operator&amp;</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a5166b6e867539d6d3194b5efa807eb13</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_bit</type>
      <name>operator^</name>
      <anchorfile>a01364.html</anchorfile>
      <anchor>a4908aea5d9d69e28b4faffe45aed3234</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bitref</name>
    <filename>a01372.html</filename>
    <templarg>X</templarg>
    <base>sc_bitref_r&lt; X &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_bitref</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ab63919b62bf97f6356faf7a7e034ffc4</anchor>
      <arglist>(X &amp;obj_, int index_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a0a0004765724a3ff8f6b4ed51ad890c6</anchor>
      <arglist>(const sc_bitref&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; *</type>
      <name>clone</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a5f09d3663eba5e21160aed6fabb21453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>adba61169ae3ceb6ccd37528055f2d748</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ab8c4cd1da8d17b23fe2c7186e5d3b2b3</anchor>
      <arglist>(const sc_bitref&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a5b819221f3914790659d9e14fb99f9b7</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ae211d26ce498d11e2c12b9f35662d13d</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>aabbb2ddfd1be0b7c27b00d7b8e84be7c</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ad75a020d73d0f7391b1d0b5cffc58388</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ac1e98a65507d5b8472dc564e5a548f61</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ad4db4def2ff1aee2479e212db139c3c4</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ac439d80628723437c2812a64b33cc16d</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>aeb3c1c894161a58af2f76f892bf07340</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ae22720e56af6802ad9181df73c62ac85</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a1a9123e58e68f49675ffc3af8b7df944</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>aa0431acbbb3a40e94af968443f7568cf</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ad521885476d82bae54837cd6d42854a6</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a91c41b7c17fdd9d3bb2b707621c51050</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ac7d7f7b53a3d2362e0c9f17fb8b3f9f8</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ad6a7b2fa34718fdc700f46172fe7b6c8</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ace834c3cbcba9fcc2fb20579713aa880</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ac9d8756817c1f9e8a6c7a5f3d2207ce2</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a962120d3e6470aa92a669276e8f9dee6</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a83bcb1bc43681aaecb46ea48ffcc574e</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a4aadcf3f57e6209e659c755cb9fcf6ac</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a9e799161311871d0240160f4bbf4d520</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a75b5b5f4f0f71a1f9fc1bc6df313bd60</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a52ec5bb35e474602a0c9f99f6b7e7686</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a34d803286cabe467024372897f42b353</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>b_not</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a7f9e87a52bcf33a328f0e21e6b11424f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a049a7cc86b6ecb768d4a771dcb013d04</anchor>
      <arglist>(int n, sc_logic_value_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>af8e10b6766cb683cf83c5587ef1affa8</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>aa3c2e3088205f7adbc495efc8c06491c</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a51aa99d5c0e2ea80d98263a4bbdd5cee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>ab99da97f725317490dac7ce57818bb12</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bv_base</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>aa31c8f5d1ec5ab3b45594163c614f9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_lv_base</name>
      <anchorfile>a01372.html</anchorfile>
      <anchor>a2ff965b93b2d2d35399f418d8ee19813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bitref_r</name>
    <filename>a01368.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T::traits_type</type>
      <name>traits_type</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a0b290cfcd9324aa1e63ff55bf2baba48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a663389f3c0de23d28ebb0bd82c797b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref_r</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a80ab648660652575148fe27aade2deb4</anchor>
      <arglist>(const T &amp;obj_, int index_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref_r</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a569dbdd35cb3facb92d73ed67bc1487e</anchor>
      <arglist>(const sc_bitref_r&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>ab954e0d787f0d31dc12f699de1af8912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const bit_type</type>
      <name>operator~</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a1820a61d573f49d6a77f7a9643024b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const bit_type</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>ab4b210cf40f7f0dfc77595e0b0076ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>value</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a1cf780f41828fe47216f2ed042b76de2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aa88950116823fbf7e642e559885316ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a1d6a021451c1d9e0dec95576550ba946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to_char</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a0572826012e3cc826547209b4d2081a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aad22a15384259af80abd79123741114d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aedaacf7f17aa0329b16c6f3b0d46e7d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>get_bit</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>abe493d8e67c8b705db035d96a311409b</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a5f11c52058f19e1d4bbcd90d0d970d42</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aa9d84aecac8b6ee11ed4aa3b40fe7e25</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>afca55328c0e6ce7968566070070a1dbe</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T &amp;</type>
      <name>m_obj</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a1e4973fa0e02215958c267ef788116f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a3dc098c781880bc62935eb62d8bd52a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bv_base</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aa31c8f5d1ec5ab3b45594163c614f9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_lv_base</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a2ff965b93b2d2d35399f418d8ee19813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_bitref_r&lt; X &gt;</name>
    <filename>a01368.html</filename>
    <member kind="typedef">
      <type>X ::traits_type</type>
      <name>traits_type</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a0b290cfcd9324aa1e63ff55bf2baba48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a663389f3c0de23d28ebb0bd82c797b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref_r</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a80ab648660652575148fe27aade2deb4</anchor>
      <arglist>(const X &amp;obj_, int index_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref_r</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a569dbdd35cb3facb92d73ed67bc1487e</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; X &gt; *</type>
      <name>clone</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>ab954e0d787f0d31dc12f699de1af8912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const bit_type</type>
      <name>operator~</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a1820a61d573f49d6a77f7a9643024b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const bit_type</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>ab4b210cf40f7f0dfc77595e0b0076ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>value</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a1cf780f41828fe47216f2ed042b76de2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aa88950116823fbf7e642e559885316ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a1d6a021451c1d9e0dec95576550ba946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to_char</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a0572826012e3cc826547209b4d2081a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aad22a15384259af80abd79123741114d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aedaacf7f17aa0329b16c6f3b0d46e7d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>get_bit</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>abe493d8e67c8b705db035d96a311409b</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a5f11c52058f19e1d4bbcd90d0d970d42</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aa9d84aecac8b6ee11ed4aa3b40fe7e25</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>afca55328c0e6ce7968566070070a1dbe</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>X &amp;</type>
      <name>m_obj</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a1e4973fa0e02215958c267ef788116f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a3dc098c781880bc62935eb62d8bd52a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bv_base</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>aa31c8f5d1ec5ab3b45594163c614f9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_lv_base</name>
      <anchorfile>a01368.html</anchorfile>
      <anchor>a2ff965b93b2d2d35399f418d8ee19813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_buffer</name>
    <filename>a01096.html</filename>
    <templarg></templarg>
    <templarg>POL</templarg>
    <base>sc_core::sc_signal</base>
    <member kind="typedef">
      <type>sc_buffer&lt; T, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a143856e857e597ec18e26f65fa252b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal&lt; T, POL &gt;</type>
      <name>base_type</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a4b65414176a0bab216eb2a864c32ad62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_buffer</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a04cde5e9a1c7f29be31077b5dc168bb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_buffer</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a460a976da9effa37f852d066686a85cc</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_buffer</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a58ad92bd6d445bdc9f6e191f0b571556</anchor>
      <arglist>(const char *name_, const T &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a17087098c2a60d92bedda79b71cc647c</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a8b9efd78cd33507add7b3104f9dc71fb</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a6f2f3d92de62ea66d62a57c6c78d48a9</anchor>
      <arglist>(const sc_signal_in_if&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>aeaaf8022065e5aa8d86eadad76ea5e2d</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a9e554333adbe71625c3d286093dbc81b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01096.html</anchorfile>
      <anchor>a0d310cf0c3a445ed68fec490ea97a5e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bv</name>
    <filename>a01392.html</filename>
    <templarg>W</templarg>
    <base>sc_dt::sc_bv_base</base>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>aa24806e7e3b6b73ed1c3a96549e90da8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a350b21e92398e7ee759771c93ad9570d</anchor>
      <arglist>(bool init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>af9bffa5b56f208f73db5e8b97201ea2b</anchor>
      <arglist>(char init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a1ce9b6add2eef28ef5961e47a6fb43e9</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>af339705085303ac4a49acf61dc46b872</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a3089ea1b317a4c6e5955774336b3b280</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a913ac0357f6045ae957a201b4cc39a2d</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a220501731a987ca0580650bf579238c2</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a9ea585849698dec72273c9ac3b9fdc10</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>aefbdc341e7dad8405c319f093e40030e</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a899e2747952a5decd5f9bcaf33f3acca</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>adacf8cbeff2c7de7072775b0490c4576</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a8ccc75419763cb72e58086ab6a139e4c</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>afe3bf30f7c42f56b1b5c81aed075a3c1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>ad63355747d6f0cddcc9a3770b554bbd6</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>ab036a609c4f08c108f2b284c9c3169c4</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>ab0746bc90dfc8f852d3de5887a0d4607</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a1caf8c0b4eb7166f7f76cc8d1be1347d</anchor>
      <arglist>(const sc_bv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>aca38eda136a1a49b85e4135a0f338a8d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>af99cb02f72be0179202d84c592c2b083</anchor>
      <arglist>(const sc_bv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>aaebaea7d4f2d25ba3a2530a655a3b520</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a627e1786dae5875c15b05b6c4fa14f80</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a9de2ed97b9f1ce77de2f72e2d9cc40ef</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a2660fcd860d04d88b7fd9845dbf09e15</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a9e9d1005884193325f244d29acffade7</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a2890486eb07a13f4884e67f7018b42f7</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>afdb7b7be48c14a96133525368de2c7b5</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a556448fffa8f4c8e23ca5ae4f3423871</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a9be68e85b623e3893a8dc874d657592c</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>aea757dff5ac6df17912e688f081de9ab</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a7b6d517d3a92d4f869f57f8e5619fe92</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>ae09c9dcdbedaef6ce43d7f42a7292f19</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01392.html</anchorfile>
      <anchor>a06dc66f63142cad26287ccaf56d0526e</anchor>
      <arglist>(int64 a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bv_base</name>
    <filename>a01396.html</filename>
    <base>sc_proxy&lt; sc_bv_base &gt;</base>
    <member kind="typedef">
      <type>sc_proxy&lt; sc_bv_base &gt;</type>
      <name>base_type</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a00edd3c44c8b26d1d703bcecb5336928</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>acf85c5325c758271ee4ae630c0db2635</anchor>
      <arglist>(int length_=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a576ca073ddcfbf436b61731e7f7c6699</anchor>
      <arglist>(bool a, int length_=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a23a3d0b94a49410e6afca5b3ff2f7ef8</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a4faa28e7b42eedd6e46b791da4492415</anchor>
      <arglist>(const char *a, int length_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a5d3035cc307c12df7ab97c15beae789d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a3371e35aaf5e318431d9cc990a6c5ba3</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_bv_base</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>ab28dc82fa89c271305b3e3caccb7e0da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>adc3a17cd12c5367946633450cd8ab398</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>aa0995c7ee43c1b9eb1c51457c33c60cf</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>aa5c71553a771a7457fada4bc2e03df06</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>ae96e12581747f3caaea2c21b2c1fe68b</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>aa03213f3392431dc50985e1fe5aa1590</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a6221489f203ad3e028c109736afff0b8</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>ac2415bfde01ff8ae9981f1aa9de1006b</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a98303afaaf9b91781655ba4c2f8e2c23</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>aa794272db0c9a3afdc67287348facfa3</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>ada12fe8f6a0e50aa0e17d27ae4767d5b</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a20e8babafc8a0d372676152fb164aa0a</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a8b10e69ad0781fdb6677f3f82ac7379c</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a04b520cefe757b2076d4a3bd79d6c6fd</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a2c7ed57513b52072457fe8bd4da61fb5</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a3868efa29080fca748866eddae09f02c</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>aac96b31347aa7cbfe6f322a4f801b924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a6c0fe93dab77b9ebff7fada626c67449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>get_bit</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a21dd227705c50ff45273889ad34724c5</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a1742c937df73631fef901910262fee92</anchor>
      <arglist>(int i, sc_logic_value_t value)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a7436ca78b16bf918817ef0448c37caf9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a4acdbbe6f29d247c272230398bb4bed7</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a64f5af507885694770bbe2eda79d4d93</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a4b38a39ba7c7a891590cc0cd09da23de</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a65f3b11c7bf623040b01ce5df41a3eec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>abc913a72e14efe81d35d10438b2a51c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a7a676633ce06987a493ae3146754f7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a38ec0cba6a57cd1dec47e075d0519e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit *</type>
      <name>m_data</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a1969b4fa86e0dc68e2adb27c5737eca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_lv_base</name>
      <anchorfile>a01396.html</anchorfile>
      <anchor>a2ff965b93b2d2d35399f418d8ee19813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_byte_heap</name>
    <filename>a02060.html</filename>
    <member kind="function">
      <type>char *</type>
      <name>allocate</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a788d2eb4ab139406ae8cecf9ddc54a67</anchor>
      <arglist>(std::size_t bytes_n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a53979fc97a38e2a17f047a8cefaba0b0</anchor>
      <arglist>(std::size_t heap_size=0x100000)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>length</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a7fac0b24516bd925e4eac0a2bcb13f00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_byte_heap</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a05c784aa054dfca5cded5b533262dddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_byte_heap</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>ab804a187058af80cf0deebde1b4e1b69</anchor>
      <arglist>(std::size_t heap_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_byte_heap</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>ac744e67b73a4efd878594f14bcf98712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>m_bgn_p</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a6757df0d85349d0cca958c6e4c5f41c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>m_end_p</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a284a566947570fb7b361eb729d76a24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>m_next_p</name>
      <anchorfile>a02060.html</anchorfile>
      <anchor>a98195d5afe037a3aea9a9b3305019b60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_clock</name>
    <filename>a01100.html</filename>
    <base>sc_signal&lt; bool, SC_ONE_WRITER &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a8df91318a074d67b530650e07fb01cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>ad9dbd736634e2b0c5386ca6a85e835dd</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a0539a0568c8baa3e806ea81159bf4687</anchor>
      <arglist>(const char *name_, const sc_time &amp;period_, double duty_cycle_=0.5, const sc_time &amp;start_time_=SC_ZERO_TIME, bool posedge_first_=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>aad710b4b8662b0843ef3d54c85db101c</anchor>
      <arglist>(const char *name_, double period_v_, sc_time_unit period_tu_, double duty_cycle_=0.5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>aab7bcbe7d4e5dcda73ce5ccdc247c968</anchor>
      <arglist>(const char *name_, double period_v_, sc_time_unit period_tu_, double duty_cycle_, double start_time_v_, sc_time_unit start_time_tu_, bool posedge_first_=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a65d5ec9a1d36d32e5ffcfcb9c61bd170</anchor>
      <arglist>(const char *name_, double period_, double duty_cycle_=0.5, double start_time_=0.0, bool posedge_first_=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_clock</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>af34d7a003fb00f0049d036424d0325f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a414e9883124060d3909d45246a324302</anchor>
      <arglist>(sc_port_base &amp;, const char *if_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a8367e909c544c188ca1c4d3b6d7c123d</anchor>
      <arglist>(const bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>period</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a235a33b1c57d22e7e2f8db6d5444e1f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duty_cycle</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>ac083e51c844e2aafb83ad420483a110e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge_first</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a0fdbe6e87b24020581fa1457614269c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>start_time</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>aa421ed8df1b206221e8df8926a2c51a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a9f76bd1f01ca736ac30f2e8b330da474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const sc_time &amp;</type>
      <name>time_stamp</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a493713da75b2f64f4923c267fe1c1d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>adf39da53280c49f5b733736fd6ec63bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>posedge_action</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a80c5db81536238944f1afa04ebeb6f5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>negedge_action</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>af77fbcea93195f794e042dca9eed2db7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>aed3c29fa9e20a6654168a0f05eda6fe2</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>acedb1d6ee2093030f8a5826b26c916db</anchor>
      <arglist>(const sc_time &amp;, double, const sc_time &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_clock</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a4f2cde5450d198f38bf9e458c993c32a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time</type>
      <name>m_period</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a3df880c4c73f7be93870aec916e19cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_duty_cycle</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a5bda3fa42f3b7aac4aff650632fb0707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time</type>
      <name>m_start_time</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a41591b90ba7122a59ca535aa41937b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_posedge_first</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>abe3221ced4f127034a75b03f3c6eca1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time</type>
      <name>m_posedge_time</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>ac9b395d35e3895f151fe2f024872c9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time</type>
      <name>m_negedge_time</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a683ff7e5a8a9038b625d4e8886f78d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_next_posedge_event</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>afdfd334c6eeabc1f09daa5f7dec15e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_next_negedge_event</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a49843f3482cb250e7c57dad9b9547777</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_clock_posedge_callback</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>abe53cca1c94822edd672ad3387a4f80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_clock_negedge_callback</name>
      <anchorfile>a01100.html</anchorfile>
      <anchor>a5630d9910efe3da6ef4892e2d4d5c684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_clock_negedge_callback</name>
    <filename>a01108.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_clock_negedge_callback</name>
      <anchorfile>a01108.html</anchorfile>
      <anchor>a31e68cb9fcce978fe18137444091fb2d</anchor>
      <arglist>(sc_clock *target_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01108.html</anchorfile>
      <anchor>ae7ea65f257019eab055450fabd169df1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_clock *</type>
      <name>m_target_p</name>
      <anchorfile>a01108.html</anchorfile>
      <anchor>ab5d5c28bffa635be08a3bbf1b56c4e83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_clock_posedge_callback</name>
    <filename>a01104.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_clock_posedge_callback</name>
      <anchorfile>a01104.html</anchorfile>
      <anchor>ac7ec5b4875df5d3e01a7117f67707964</anchor>
      <arglist>(sc_clock *target_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01104.html</anchorfile>
      <anchor>a138a91016560df8ed505db7c527f9a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_clock *</type>
      <name>m_target_p</name>
      <anchorfile>a01104.html</anchorfile>
      <anchor>ae6a732e3687126327a05b8548921bcf3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_concat_bool</name>
    <filename>a01720.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_concat_bool</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>a939fd8f47051f1937c5b104bb812c6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_concat_bool</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>aece2622de1fd1e0b422e2e5c5f34f0d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>a72ed413e95833808efd034bf6b5459f2</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>a7550d3843f657af6d85883d1d984390b</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>aa737cb6f159fa0c1c2b1b5bd128fe7a6</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>a02e0ebaa82dd8a9ce2a83642388c7bd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_concat_bool *</type>
      <name>allocate</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>aeef7f53a8bb0ae45b1ce816f1c3a1106</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_value</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>a520fec3440c7ca865e40238ac7973738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_concat_bool &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01720.html</anchorfile>
      <anchor>a89651058d669da090dce5681d3114d6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_concatref</name>
    <filename>a01716.html</filename>
    <base>sc_generic_base&lt; sc_concatref &gt;</base>
    <base>sc_dt::sc_value_base</base>
    <member kind="enumeration">
      <type></type>
      <name>concat_flags</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cf_none</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212a8b35d2c1298e5eccfd7527de25a49f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cf_xz_present</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212a8e1c6e0b683c7af28765a7b56dee2730</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cf_none</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212a8b35d2c1298e5eccfd7527de25a49f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cf_xz_present</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212a8e1c6e0b683c7af28765a7b56dee2730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a60cdf13b6a7a53f4a5c765e47c3c304b</anchor>
      <arglist>(sc_value_base &amp;left, sc_value_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a8249e7fc497bc6846ade9815a5b137e3</anchor>
      <arglist>(const sc_value_base &amp;left, const sc_value_base &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_concatref</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>ad9a4b901b8f5f98cdfa1942b2466c148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>length</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>af7604f155548ba363f66a3bd0b615b35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a774b9450b79434bc31e9fe23c8e2d5ab</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_clear_data</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a7cdef5b7dafd2db5d099fae6aab3b05b</anchor>
      <arglist>(bool to_ones)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>aa174ddde62c70d3fa178f8c1d474da74</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a30bfe9a049f4461b71d7d0dc93ff97d7</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a41525f78aec803a0f92b6dcebd55f751</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>ac22e67bc1f3ac535071223a711561281</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>abd4e0298f427f931e00ff0b4e2fbcd09</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a678680796efd52b624dbdcf772327b34</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a718831ded38076fc987f2cb7e0c0e605</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>aaba58a0452842c53b1133330fbcb32bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>value</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a994270888e9d39e0d6a2320a21309ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>acb1f5cf004ee5c617fa94bc5aeed68cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>af47b7145d35293790bb7a218fcb4817f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a274da1334efe3ebeedfe73c7e2b6c4cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a2904df40a4c0adb044722bda76e8646b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a9a375680376610d4122f1b41df4011a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a569a9e8fae7c2aee274aa575b590acb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_sc_signed</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a0c967ba17860f494a47e626c224b2a8d</anchor>
      <arglist>(sc_signed &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_sc_unsigned</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>ac5d98a1111b4067210d2e46a2fece04c</anchor>
      <arglist>(sc_unsigned &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a8950f080864abb3e3661940cb9eaf8c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const sc_unsigned &amp;</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>aa0bdec31fa89d2d9213a322df61fe40f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>ae6c72d89c88675abf84b5af42ff5bdda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>accc522346950c06216c8cb5258a9bd75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator~</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a514033b4004bbe7060ed7c08ae3def49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a667684bc5e7f6be84a7bbc8b47c9e79f</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a95247cdfec940f1c23a564eed5150b70</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a435d631697df379c9ccc4ddd3e91d277</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a78b6e55eb459d6b092ce6e1cfcbd8197</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a278827e97d7c9b4efa9ee73759d2468c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a4d99edf9970afeaf4ec7088542df6480</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a4a311183fe048848460198e9f5aabe49</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a5892a52d50241395dcf751ecb4cd55e7</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a9c9630e65467c56c8e57b50b062cde75</anchor>
      <arglist>(const sc_concatref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a721a10a8d834da46d8ace9c39054b05e</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>ad000388187c32ec89d80cb56a6a9397c</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a69b86e915e57ac901a2c8e8a9b63d424</anchor>
      <arglist>(const char *v_p)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a013ff2e2c5e573b96ececdebf1bc1ac0</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a43ae941fe8fdf43d4fc4253b822e7271</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a58dfa0d9739d67bd06e9886f024cc19a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a9b8260504f54d1d6ef3de09e97d645e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a8cb2256cf875aa3ea567f8d6a33795d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a8aa160ee3066bbae90d28637a6e0e101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>ab43e3556c223675b6171e9da7101a2f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a396508e9ba5af3eb063649662f41308d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>aac0153ae6530856790be9db5ea864fc4</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a8fe34b0d53380e5a67224261a5937375</anchor>
      <arglist>(::std::istream &amp;is)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_concatref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a6edcfeb26a6ed3ca059471ee2cd25211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_value_base *</type>
      <name>m_left_p</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a337bc42547903db12dbcb9d11237e473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_value_base *</type>
      <name>m_right_p</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a8581060485a13d0d690af1241916cd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a3cc1881dc3691dba24884061c40af992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len_r</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a68545b4b9518a9f0aef5f3e22b55ef0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>concat_flags</type>
      <name>m_flags</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>ae0ce6163458ea5a60e44d6ced1f25480</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_concatref &gt;</name>
      <anchorfile>a01716.html</anchorfile>
      <anchor>a95a76b1147a0f46f4e537bd22b27f793</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_concref</name>
    <filename>a01388.html</filename>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>sc_dt::sc_concref_r</base>
    <member kind="typedef">
      <type>sc_concref_r&lt; X, Y &gt;</type>
      <name>base_type</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>ad4594c7a0c8add81d40dca03d5d74083</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_concref</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a8744d250baf24c00f1eeb4a0d0c858b7</anchor>
      <arglist>(X &amp;left_, Y &amp;right_, int delete_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_concref</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a37bf6a73ea3e48660e1b61877fbb73d7</anchor>
      <arglist>(const sc_concref&lt; X, Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; *</type>
      <name>clone</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>afca44c56130385941f07d340f93ef5bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a064faaed6f5335bbd1dc51ce22fc7c5d</anchor>
      <arglist>(const sc_proxy&lt; Z &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a69725e6ae9ab9de9edb3ba240ee3ff47</anchor>
      <arglist>(const sc_concref&lt; X, Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a02905753901cc705fbe557e92f2fe6b8</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a3d54c6547bbd2180bbc10a3f9cefc821</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>afd2a0f5d27231d2460a45cefcc371c26</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>aa84820dd85dc5aec151def1220b0cf8e</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a644373b42c606a3c9ca6c01ce5a4ed42</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a015afba77e3e9dfc106e782fae3bc60f</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>ad232d4998652ac42a2f712aa650a252c</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>abf697d0b54ece834778ed4db09755da3</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>aeee46e0672a114800c50bfb705eef211</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>ae349d4a12298ebeed4f8840cea6a6ebe</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a11dd986f297d24af11c7d8e8c7ed9a5d</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a173e9f5ed4a5415f1c700dd0f91e2304</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a03f2dbb069604c8fc2aabc85bddc123b</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01388.html</anchorfile>
      <anchor>a2fbbda042b99e2f1578b53ff8e5b103b</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_concref_r</name>
    <filename>a01384.html</filename>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>sc_proxy&lt; sc_concref_r&lt; X, Y &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_concref_r</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a407331f31132896e5427adb99e7e18f0</anchor>
      <arglist>(const X &amp;left_, const Y &amp;right_, int delete_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_concref_r</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a7ee1193d9cfb457885b2c2e808ddd592</anchor>
      <arglist>(const sc_concref_r&lt; X, Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_concref_r</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>aa8c06f000ff772d8bd7775b17067d15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; *</type>
      <name>clone</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>abc9365f8c35946ffd945591aaa72aee7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>af1ad9fd8cc5deb92c4c55dfd2bdabec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a4c47f42ff137f238cec3677ad7ba26a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>get_bit</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a4b1fb961daebc48392376f2ef201bddd</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a15891188acfdf52e9ed43afa45480034</anchor>
      <arglist>(int n, sc_logic_value_t value)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>ae8a8422663e7e843e660a69698dd77da</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>ab2ee7ebac91163cc0205b4e3dc622123</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>ab95b619be1fe9ad2c629238c06c0b981</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a440e10f8a6fd249ebb48e2c53e468258</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>af32ee9bdad00ef6665be3a251383e9cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>ac439cabcb74fc2b9e31776440e21edfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>X &amp;</type>
      <name>m_left</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a8e47406c8b89ec06efcfea0c885cb315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Y &amp;</type>
      <name>m_right</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a2ff39f13ea0ea6c788e73ec6de7b8daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_delete</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a1b0720c6dafc6b7510456b090d61e7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int &amp;</type>
      <name>m_refs</name>
      <anchorfile>a01384.html</anchorfile>
      <anchor>a4afb21a683575fb7ac6df53508a9391c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_context</name>
    <filename>a01468.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>sc_context</name>
      <anchorfile>a01468.html</anchorfile>
      <anchor>abc0a268255fe43f7983360a9f85e1e4c</anchor>
      <arglist>(const T &amp;, sc_context_begin=SC_NOW)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_context</name>
      <anchorfile>a01468.html</anchorfile>
      <anchor>a3b022795fd247f454028a8f063a55d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>a01468.html</anchorfile>
      <anchor>a4c71c913fecb560b8c4408152783786a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>a01468.html</anchorfile>
      <anchor>af11fc4db84c30867c90e47860cf54bda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>a01468.html</anchorfile>
      <anchor>ab7a450f3332dbb394a4a22a08022ce83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>default_value</name>
      <anchorfile>a01468.html</anchorfile>
      <anchor>a2e7ee98ac17535bbe62ffb36fae7e8f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cor</name>
    <filename>a01744.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_cor</name>
      <anchorfile>a01744.html</anchorfile>
      <anchor>a0f8647be5349660ff1bcc5c52caaab35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stack_protect</name>
      <anchorfile>a01744.html</anchorfile>
      <anchor>a99181ac5c254d2c823fd67cfbd7f4d52</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_cor</name>
      <anchorfile>a01744.html</anchorfile>
      <anchor>a0464a2f2bf3cdf97b07068e372cb9019</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cor_pkg</name>
    <filename>a01748.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_cor_pkg</name>
      <anchorfile>a01748.html</anchorfile>
      <anchor>afd01bf73bf44ddac88e92d65f545a8ec</anchor>
      <arglist>(sc_simcontext *simc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_cor_pkg</name>
      <anchorfile>a01748.html</anchorfile>
      <anchor>a789372ceff23e2c8f75429af8d1aa9bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual sc_cor *</type>
      <name>create</name>
      <anchorfile>a01748.html</anchorfile>
      <anchor>a3620212c08fbfb3f002160c6d473a7a7</anchor>
      <arglist>(std::size_t stack_size, sc_cor_fn *fn, void *arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>yield</name>
      <anchorfile>a01748.html</anchorfile>
      <anchor>a7c3f9c7683cc6310ec563b3fe8e550d3</anchor>
      <arglist>(sc_cor *next_cor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abort</name>
      <anchorfile>a01748.html</anchorfile>
      <anchor>a33431ff19d3bf1f868223bc871e0e6d5</anchor>
      <arglist>(sc_cor *next_cor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual sc_cor *</type>
      <name>get_main</name>
      <anchorfile>a01748.html</anchorfile>
      <anchor>a21ef09beab82d6fd075adf4833d2e368</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>simcontext</name>
      <anchorfile>a01748.html</anchorfile>
      <anchor>a5372fa4c26f71b186da324191815b572</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cor_pkg_qt</name>
    <filename>a01756.html</filename>
    <base>sc_core::sc_cor_pkg</base>
    <member kind="function">
      <type></type>
      <name>sc_cor_pkg_qt</name>
      <anchorfile>a01756.html</anchorfile>
      <anchor>afb6a6007cc04016f0509c937da8b3f9d</anchor>
      <arglist>(sc_simcontext *simc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_cor_pkg_qt</name>
      <anchorfile>a01756.html</anchorfile>
      <anchor>a970ce51fe19b03f1d2593455085ed19d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_cor *</type>
      <name>create</name>
      <anchorfile>a01756.html</anchorfile>
      <anchor>a6cd999e5095fbdd317cee0799c9819fd</anchor>
      <arglist>(std::size_t stack_size, sc_cor_fn *fn, void *arg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>yield</name>
      <anchorfile>a01756.html</anchorfile>
      <anchor>a586a2e4047ae45e6785aa14bd29147aa</anchor>
      <arglist>(sc_cor *next_cor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>abort</name>
      <anchorfile>a01756.html</anchorfile>
      <anchor>ad61303da808bb0287949f7d288634fbe</anchor>
      <arglist>(sc_cor *next_cor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_cor *</type>
      <name>get_main</name>
      <anchorfile>a01756.html</anchorfile>
      <anchor>ac4a8a3505b96db33ba89bac5984848bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cor_qt</name>
    <filename>a01752.html</filename>
    <base>sc_core::sc_cor</base>
    <member kind="function">
      <type></type>
      <name>sc_cor_qt</name>
      <anchorfile>a01752.html</anchorfile>
      <anchor>a8a8fbc6f3f807d3dcab1e0861a24afcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_cor_qt</name>
      <anchorfile>a01752.html</anchorfile>
      <anchor>a9a54ade5f86eb0f55867309c950d983b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stack_protect</name>
      <anchorfile>a01752.html</anchorfile>
      <anchor>af1961179e6c1edb2bef6d879e79fd53f</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>m_stack_size</name>
      <anchorfile>a01752.html</anchorfile>
      <anchor>abf2a5dc720de1d411033a4726e2ce0ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>m_stack</name>
      <anchorfile>a01752.html</anchorfile>
      <anchor>a5b6146b3d096ea04e6bd186f36ac150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>qt_t *</type>
      <name>m_sp</name>
      <anchorfile>a01752.html</anchorfile>
      <anchor>a48a46f3d13f22cca30a6c0de4cace81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_cor_pkg_qt *</type>
      <name>m_pkg</name>
      <anchorfile>a01752.html</anchorfile>
      <anchor>a91f4460a0529ca7a3909fec4e41b28b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cthread_process</name>
    <filename>a01760.html</filename>
    <base>sc_core::sc_thread_process</base>
    <member kind="function">
      <type></type>
      <name>sc_cthread_process</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>a3a2a145fb3efeff97281aef1b0f56ad2</anchor>
      <arglist>(const char *name_p, bool free_host, SC_ENTRY_FUNC method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dont_initialize</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>ad41b2ec5bfa52fb89f849c9c37cde4aa</anchor>
      <arglist>(bool dont)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>a6e54ebb1d9b6cb3d4c512200f357b929</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_table</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>a12ba92f261d993145709693ea4466b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_cthread_cor_fn</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>af0edeaaa6479384ae9d350e1a14cb38c</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>halt</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>a887d9cef1ef509da06b593112f1e49cc</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01760.html</anchorfile>
      <anchor>a41369bded854ec4083c5d4a8f87cfc2a</anchor>
      <arglist>(int, sc_simcontext *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_curr_proc_info</name>
    <filename>a01916.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_curr_proc_info</name>
      <anchorfile>a01916.html</anchorfile>
      <anchor>aa25a394c0d34e939c4b1294d97e35cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>sc_process_b *</type>
      <name>process_handle</name>
      <anchorfile>a01916.html</anchorfile>
      <anchor>a9ba8ebd2fd58a14681c533f900ed84de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_curr_proc_kind</type>
      <name>kind</name>
      <anchorfile>a01916.html</anchorfile>
      <anchor>aca0737ff785c30a7dc9bd9c0d2fadbc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_direct_access</name>
    <filename>a02124.html</filename>
    <templarg>ElementType</templarg>
    <member kind="typedef">
      <type>ElementType</type>
      <name>element_type</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>aaa60fd63a8abd19801485d4304ea9b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type</type>
      <name>type</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a09e8bb2675895ce53a3a35823b872016</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_meta::remove_const&lt; type &gt;::type</type>
      <name>plain_type</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a5e40ed1c5db26f768d4cb2b9241a1220</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_direct_access&lt; type &gt;</type>
      <name>policy</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a91f7bf9ac8bea9c5af3dcf7ed9d81fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_direct_access&lt; plain_type &gt;</type>
      <name>non_const_policy</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a175c25a10c035e40f19124b5b2ef6797</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_direct_access&lt; const plain_type &gt;</type>
      <name>const_policy</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>af16a824fca0fbb3db8660da5da038d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_direct_access</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a78ea9d37092e638810e534b378d54865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_direct_access</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>af7aeeacbd94e6f076521030bd79b753e</anchor>
      <arglist>(const non_const_policy &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_direct_access</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>ad146338bd00158b2de93b60f96de966d</anchor>
      <arglist>(const U &amp;, SC_ENABLE_IF_((sc_meta::is_more_const&lt; type, typename U::policy::element_type &gt;)))</arglist>
    </member>
    <member kind="function">
      <type>type *</type>
      <name>get</name>
      <anchorfile>a02124.html</anchorfile>
      <anchor>a8db416a5a3182bbc9681d62f9f15d0eb</anchor>
      <arglist>(type *this_) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event</name>
    <filename>a01780.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_event</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>ab2ffc3be0133a791d967828c165d2e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_event</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a223d89b24c4b13bd919e5900a022a59b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_event</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a44de55a8909e5527cf6f3b77bb540c74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a6e5b463c02412fadaac74a14b03e0858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a67ab21638556663625156539907ad1f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>basename</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a0b1ec29e91688f133436d93ae3bd983d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_parent_object</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a407805f68f3cb895c72b9abaf6f66264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>in_hierarchy</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a679a33e2b18709bacbed77a6ef9104d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a508e0834831a837004f11e1fdc9a1bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a9da043d268a13d930b356f8159dcdb71</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>af580b9b22c8ef055fe72826850ca6428</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify_delayed</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>acab6a59a0ae5e6d63f5dc8f0962ef439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify_delayed</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a3685852b12b7b53ed46aba59031e59e3</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify_delayed</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a00c66a658452d20f4f9e1e0a77551eb8</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>ad1b6ea946585d0e28893246ce7f5c2d2</anchor>
      <arglist>(const sc_event &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>adad1e26b01cec8711f6fc0b3c9747348</anchor>
      <arglist>(const sc_event_or_list &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>ae8d165f92c1c51e0078c53b72e3a861b</anchor>
      <arglist>(const sc_event &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a542ef807c2958b219052d3731ca74dff</anchor>
      <arglist>(const sc_event_and_list &amp;) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_clock</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a034ac2d3cac16d03fca09a19b0b947e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_list</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a44d3057c2ea3c4f40b46f3a8323ee3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_timed</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a827e422a70d0897d66364ae6b5dc35d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signal</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a5fd4e6aa4b39af5a6d78fbfc8f6dcbe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a01780.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_and_list</name>
    <filename>a01772.html</filename>
    <base>sc_core::sc_event_list</base>
    <member kind="function">
      <type></type>
      <name>sc_event_and_list</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>adcef85fe94dcbed31c3c6ee75156a091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_event_and_list</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>a63a5970e6a03e2061c0c382e2c41d392</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>a1dbb398df5f8bfdcb46633212778d776</anchor>
      <arglist>(sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_list &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>a8fbb76f5022808d99c296ed2e82502d5</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_list &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>a8ff3612d145e00c423903bd17f1d2b24</anchor>
      <arglist>(const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_expr&lt; sc_event_and_list &gt;</type>
      <name>operator&amp;</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>a9e12dc742fae2466a2c450e66f5dfddd</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_expr&lt; sc_event_and_list &gt;</type>
      <name>operator&amp;</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>a5bb491c84e6c983c5720a941075ff918</anchor>
      <arglist>(const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_and_list</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>ac33d2781821eb821b1e3f1f8f8f2a28b</anchor>
      <arglist>(bool auto_delete_)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_expr&lt; sc_event_and_list &gt;</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>ae2d7bdff66511cf7b23407c3221e0c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01772.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_expr</name>
    <filename>a01764.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>sc_event_expr</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>a98680d4dab778f4226b729071d9e2ea8</anchor>
      <arglist>(sc_event_expr const &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>release</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>a9feea03d5b986a30eff1d84947258b99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>ad443b7d77145485b27b15c15f3efbc40</anchor>
      <arglist>(sc_event const &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>a5526f971d236ef1523280edb09f394c9</anchor>
      <arglist>(type const &amp;el) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T const &amp;</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>a3c9a73248ddf1774923c65eb20ff8802</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_event_expr</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>a120c31857c971e0b50790499e65843bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_and_list</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>ae60a98a3f4332c8a15e0b5e29cc19fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_or_list</name>
      <anchorfile>a01764.html</anchorfile>
      <anchor>aef3bab374e5a04c6dd9a0149b2689790</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_finder</name>
    <filename>a01112.html</filename>
    <member kind="function">
      <type>const sc_port_base &amp;</type>
      <name>port</name>
      <anchorfile>a01112.html</anchorfile>
      <anchor>a86210bd7c615c687600c722095d1642a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_event_finder</name>
      <anchorfile>a01112.html</anchorfile>
      <anchor>a1b0be672426c5dd72a25abf5b1e73353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>find_event</name>
      <anchorfile>a01112.html</anchorfile>
      <anchor>ad2ba92e345ebdd00f365962c72fde5ac</anchor>
      <arglist>(sc_interface *if_p=0) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_finder</name>
      <anchorfile>a01112.html</anchorfile>
      <anchor>ae252de9e64773986ffe233283cc683d3</anchor>
      <arglist>(const sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01112.html</anchorfile>
      <anchor>a7f96310b34d2f46dcf04a495dfb7fa33</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01112.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_finder_t</name>
    <filename>a01116.html</filename>
    <templarg>IF</templarg>
    <base>sc_core::sc_event_finder</base>
    <member kind="function">
      <type></type>
      <name>sc_event_finder_t</name>
      <anchorfile>a01116.html</anchorfile>
      <anchor>a30b484cea21436b8d570d4271e3a2da8</anchor>
      <arglist>(const sc_port_base &amp;port_, const sc_event &amp;(IF::*event_method_)() const)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_event_finder_t</name>
      <anchorfile>a01116.html</anchorfile>
      <anchor>a3d1b9f905249c0af1a757f8c450ee804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>find_event</name>
      <anchorfile>a01116.html</anchorfile>
      <anchor>a97c068ab88d3ef785c2d66313cd50f3a</anchor>
      <arglist>(sc_interface *if_p=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_list</name>
    <filename>a01768.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_event_list</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a4b85ae78a70539de4705882fff0754ca</anchor>
      <arglist>(const sc_event_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_list &amp;</type>
      <name>operator=</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a60ba4455f5d215864c43215cc3a68023</anchor>
      <arglist>(const sc_event_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a9aabe143f06876fe5720c9f891444f2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a08adb6f7aef0da31d04995a227cf926d</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a8493116dd89f61634c4b0bcd53a3193a</anchor>
      <arglist>(const sc_event_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_list</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>aea45b4a75b634c572a81e4f7cd4a76ee</anchor>
      <arglist>(bool and_list_, bool auto_delete_=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_list</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a50264f06db1f237446c1586b85dd783f</anchor>
      <arglist>(const sc_event &amp;, bool and_list_, bool auto_delete_=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~sc_event_list</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a3c7212451393069b0309eba2cc834287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>af74030ede9ac20e15a43757d59ef111f</anchor>
      <arglist>(sc_event_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>move_from</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a62d7d237170de2f25600162c84e1fc6c</anchor>
      <arglist>(const sc_event_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>and_list</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a25032d0979a2c74d173f6b65f03cdbd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_dynamic</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>aa188bbb72300fb2ed33a08d15bfba8a8</anchor>
      <arglist>(sc_method_handle) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_dynamic</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a12ff5c5be6aa895102b563c776f4cc49</anchor>
      <arglist>(sc_thread_handle) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_dynamic</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a51f5b67af79e943c6a98bf924f9c0d28</anchor>
      <arglist>(sc_method_handle, const sc_event *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_dynamic</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a3c609aafe27d45b85b7b9bd77d86377f</anchor>
      <arglist>(sc_thread_handle, const sc_event *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>busy</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a5187d05d1bd83bc03ca2c4a1773dcb65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>temporary</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a0ab0d52bc62f199fd8e5d223f32f922f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>auto_delete</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a4c0ed470b737dfecc5a449977f26a24c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_premature_destruction</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a8bd049bcc97670f7fb629313df5e1f13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_invalid_modification</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a3eaca189dc04ebfc22acb774f6cb46ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a01768.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_or_list</name>
    <filename>a01776.html</filename>
    <base>sc_core::sc_event_list</base>
    <member kind="function">
      <type></type>
      <name>sc_event_or_list</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>a20df40500a6a227452268bde3874fa11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_event_or_list</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>a55644632b8c10cdeedfa6fa56b727466</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>afd74eaac8a1736743db350027c6ed1ef</anchor>
      <arglist>(sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_list &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>a4b834cfd1de2fcc155ac646c4284c05c</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_list &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>ab6ce5395c77f3adf48881fd7f350a08a</anchor>
      <arglist>(const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_expr&lt; sc_event_or_list &gt;</type>
      <name>operator|</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>a3825decba60a491497a53cb8da45de00</anchor>
      <arglist>(const sc_event &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_expr&lt; sc_event_or_list &gt;</type>
      <name>operator|</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>a993ab2c5a4c47c53da9c23a89dcedec0</anchor>
      <arglist>(const sc_event_or_list &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_or_list</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>a560d6635c6d72d41fa6076d8caf57d37</anchor>
      <arglist>(bool auto_delete_)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_expr&lt; sc_event_or_list &gt;</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>a1652335c48aa3d9bb9865ad84c239ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01776.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_queue</name>
    <filename>a01124.html</filename>
    <base>sc_core::sc_event_queue_if</base>
    <base>sc_core::sc_module</base>
    <member kind="function">
      <type></type>
      <name>SC_HAS_PROCESS</name>
      <anchorfile>a01124.html</anchorfile>
      <anchor>a483ff3e655f92c1e0b69959cd3520fb1</anchor>
      <arglist>(sc_event_queue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_event_queue</name>
      <anchorfile>a01124.html</anchorfile>
      <anchor>a4fb5fabd0d5f3e35ca1545e484328028</anchor>
      <arglist>(sc_module_name name_=sc_gen_unique_name(&quot;event_queue&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_event_queue</name>
      <anchorfile>a01124.html</anchorfile>
      <anchor>a54889c12eb3a8a8a181ab2517dbc91d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01124.html</anchorfile>
      <anchor>a3aab9949828163350cb5bdd58c9bcb4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>a01124.html</anchorfile>
      <anchor>a60a6059cca4c59553e6d6bc8959af352</anchor>
      <arglist>(double when, sc_time_unit base)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>a01124.html</anchorfile>
      <anchor>af5e8bf4c6d638281e9a93983e0be89b3</anchor>
      <arglist>(const sc_time &amp;when)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancel_all</name>
      <anchorfile>a01124.html</anchorfile>
      <anchor>ae10cf8669f67729f0140ccdccf1c2727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01124.html</anchorfile>
      <anchor>a86321d0a2be19b6e3cc073ac7ad2d491</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_queue_if</name>
    <filename>a01120.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>a01120.html</anchorfile>
      <anchor>a03dc358592604074f721366446ecc855</anchor>
      <arglist>(double when, sc_time_unit base)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>a01120.html</anchorfile>
      <anchor>a2aece403b7f48616bd83a7284a1e2625</anchor>
      <arglist>(const sc_time &amp;when)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancel_all</name>
      <anchorfile>a01120.html</anchorfile>
      <anchor>a9cb65f3c2d1c5d3a9d434977e24ac3ed</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_timed</name>
    <filename>a01784.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01784.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01784.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int</type>
      <name>sc_notify_time_compare</name>
      <anchorfile>a01784.html</anchorfile>
      <anchor>a1d3a5a9c74f44a53b5ed29226514ba23</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_export</name>
    <filename>a01132.html</filename>
    <templarg></templarg>
    <base>sc_core::sc_export_base</base>
    <member kind="function">
      <type></type>
      <name>sc_export</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>aa41b4a1df46c1cc9b74f9c3018318415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_export</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a2831c0cb6069024a5500a25ec1514418</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_export</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a63483861c87ff3fe49106824f2a8fee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a32a6a70c3dbf2da3ac358dd5fd55c3d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a206bb9272511f14660f1ee0fbd01821e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IF *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>adf1f7730842c54b4e3df37942d506b8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IF *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a0265cc9e32e470bb76f0606c8c08b9bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator IF &amp;</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a7a22c804f62d67e2f53944f9d4ff5189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const IF &amp;</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>ada0c6fd0df7c6e89b0e0b9a8b9dbe668</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a20c7218de453124e4e1bb7fcffe2bebf</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a198253c0eeb85675eac3f1a15c6ec350</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>ad5fe7c1a8135c87282879dd23c007f2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>if_typename</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>a0f66c528490482d31d1791e1c8a0102c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IF *</type>
      <name>m_interface_p</name>
      <anchorfile>a01132.html</anchorfile>
      <anchor>aed004d9d8cbf03597967ba2c82b6c53c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_export_base</name>
    <filename>a01128.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="typedef">
      <type>sc_export_base</type>
      <name>this_type</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>abee852f0200c741becddf0ede9d98574</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a8297e5eb9691c22995b3726628cfb9c8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a21f84165c0e58e2eb35ecf630fd08086</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_export_base</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a26342cba4c8ed960d5128b665d2d67eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_export_base</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a9992fcb65213b89d57f44636d631399e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_export_base</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>acc4562aa67f0c73898d3d67e65d6f2f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a4cdf8cc6350f8cb64090055d846b1e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a6586ace71b9b56dd6c8cdc1ba61cc016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_of_simulation</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>ac0771a7fd8f5cfd1d19bee7ce1bc3fa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_simulation</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a0fbb7a0a9680da4fb631603dc8bfdcc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const char *</type>
      <name>if_typename</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a9828a65016d01fa446525e2b26395919</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>a138d9f37a27630a6c6ead2e1ff7fbf6d</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_export_registry</name>
      <anchorfile>a01128.html</anchorfile>
      <anchor>aabb8d669dee99758d8298f75012046f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_export_registry</name>
    <filename>a01136.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01136.html</anchorfile>
      <anchor>a6f6c7265f01cf20e672298db16dbfddd</anchor>
      <arglist>(sc_export_base *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01136.html</anchorfile>
      <anchor>afdb257fe34583d660ad4b39c596b3a58</anchor>
      <arglist>(sc_export_base *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01136.html</anchorfile>
      <anchor>a83935092cdee535af279ad4a8e08e3db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01136.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo</name>
    <filename>a01140.html</filename>
    <templarg></templarg>
    <base>sc_core::sc_fifo_in_if</base>
    <base>sc_core::sc_fifo_out_if</base>
    <base>sc_core::sc_prim_channel</base>
    <member kind="function">
      <type></type>
      <name>sc_fifo</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a573b51e2cc0f4070053f90fb17205db5</anchor>
      <arglist>(int size_=16)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>ab6b9e1b82fd097fc74acfab0bb9bfb50</anchor>
      <arglist>(const char *name_, int size_=16)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fifo</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a2e8f5ee3cdbf76bbc16b262c2e455d6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>aed079a7e354aa665d5428df0c307188d</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a89cf3e5b666c987dd5ae69e494b81e51</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>read</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a089c414a397fc890345b336dcee94d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>nb_read</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>ad61dd1c00aeef010b203b4e356d11fdc</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>num_available</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a15369b9b97fc131114f3a0bd97bed6f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>data_written_event</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a73f7ddb807f98df1145e8a8880446518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a77683c8a029233f989ce0a1b54c9fb4d</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>nb_write</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a076ee56f2051dda1a06a9e2ca233b2c6</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>num_free</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a2a66be2f7e68d2acf17935194f7d1aa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>data_read_event</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>af66f7e6e9ad116eb54c308206565eda5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>ae36e923cc0b35ccbc9289ed2a12c6b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fifo&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a0c06b8aa181cf59a5dd5bfa3ee969b24</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a8d9042f97307b6d5529079778b4637db</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>aad5ecf731692fe6083438a96e0a87727</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a6e92064ded9656e6f1cd7616d9e6b2ee</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a8e10efcaf4dfb0281ec289929761193a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a962c6dfe184ba03f8a4709f18138a249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a5b7e9abd2ba6a2dac8f18ca4bdc2926d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buf_init</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a5b82be9f9c4393826b72d5cae60723ed</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>buf_write</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a044add6ef151953d139a8a2e5cf44d99</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>buf_read</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a90787f959e4de92f986d970f31f5284a</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>ac61f9ab48efe954b13f3116a666e90ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>m_buf</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a6496ad4782868a29a4fc99264b5a0535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_free</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a9719119de3b5e9bb11da1342e1467047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_ri</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a3fff2b617ef091ffcb9723ac155acf95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_wi</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>ac4a68389cc640f8d84982f38f36d6652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_port_base *</type>
      <name>m_reader</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a20c5c0cbd27673c0dead6364d297c51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_port_base *</type>
      <name>m_writer</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>ae551b0400de9fbc5a74a1be4e58e5ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_num_readable</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a6451daff16378f73f1d53536c77e545d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_num_read</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>af105dbfd7607ad1394b8810f67733a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_num_written</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a68fc1d70f737155ce42d860cc8eb307a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_data_read_event</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a78ddf7464d9c22db2ccb2f5e35895f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_data_written_event</name>
      <anchorfile>a01140.html</anchorfile>
      <anchor>a7173020f45a15bcfc5e880eb5c836db1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_blocking_in_if</name>
    <filename>a01148.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01148.html</anchorfile>
      <anchor>a6489ea95fb7ff8758f43ff81255cb523</anchor>
      <arglist>(T &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>read</name>
      <anchorfile>a01148.html</anchorfile>
      <anchor>a965f6c5fdb21eed811197ac03c114f07</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_blocking_out_if</name>
    <filename>a01160.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01160.html</anchorfile>
      <anchor>ab48c5085fd4e8c7ff9e79d868d5822a4</anchor>
      <arglist>(const T &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_in</name>
    <filename>a01168.html</filename>
    <templarg></templarg>
    <base>sc_port&lt; sc_fifo_in_if&lt; T &gt;, 0, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>abd8f3d7b6b909fdedba2bbf426a0d643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_fifo_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a37f6e9bf94c644b75368200458eb1301</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 0, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a3273ade7c128a373d74294abaf5237f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_fifo_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a25eea4fbc5dc2075cc643365fb8f4338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>accbeb99e2faf1fd2d7a20dfd80561576</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; in_if_type &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a09b59d0dcf73b8904289c5b53f6b7ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a85a3c67327a11d58a04c632eb7beec80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>af8aede5bf2061c10bc5a6c42cfe1cb35</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>ab39d79b509b305aaa6f344735ec9007c</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a847c3f832ee87362e0056ebbc9fdec10</anchor>
      <arglist>(const char *name_, in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>aea6b2562fe4a4c4860b3b3cba2cdbd5f</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a342d392f05052e36ff4234bfc5aa0f3a</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>af0d462275f0127761458e042b8654de7</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>adbf2cdc839680388b97f205fcd69197a</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fifo_in</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a1eb9c6c0cacc75b417d2163203dc31ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a00b95a1122330e1d7a4b4721144f9aac</anchor>
      <arglist>(data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>data_type</type>
      <name>read</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>aafff313f3e34167f4f2e3dd6412dccb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nb_read</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>ab69d513cc0d36439428f8c4a59f1f54d</anchor>
      <arglist>(data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_available</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a71fdad887e7612abde0fab8d38b99153</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>data_written_event</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a3afebf935bedc65fcbd201e8504c4289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>data_written</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a3ebb572609056c069eb463bb9fd1eebf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01168.html</anchorfile>
      <anchor>a01a438c13a0f52060262698446c41240</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_in_if</name>
    <filename>a01152.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_fifo_nonblocking_in_if</base>
    <base>sc_core::sc_fifo_blocking_in_if</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>num_available</name>
      <anchorfile>a01152.html</anchorfile>
      <anchor>a05317ddeb041fdc9a661419e79115b89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fifo_in_if</name>
      <anchorfile>a01152.html</anchorfile>
      <anchor>ad21c1247d2567eaddf19ff2fad4667a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_nonblocking_in_if</name>
    <filename>a01144.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>nb_read</name>
      <anchorfile>a01144.html</anchorfile>
      <anchor>aeb218dfb77bf164535fbe0dad1426e4f</anchor>
      <arglist>(T &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>data_written_event</name>
      <anchorfile>a01144.html</anchorfile>
      <anchor>ae951907c09454f544e531677c099ed44</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_nonblocking_out_if</name>
    <filename>a01156.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>nb_write</name>
      <anchorfile>a01156.html</anchorfile>
      <anchor>a8ea063f2e700e60fb04913c004e465eb</anchor>
      <arglist>(const T &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>data_read_event</name>
      <anchorfile>a01156.html</anchorfile>
      <anchor>af361239c8b27fe85f22e8fcd9994fe2a</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_out</name>
    <filename>a01172.html</filename>
    <templarg></templarg>
    <base>sc_port&lt; sc_fifo_out_if&lt; T &gt;, 0, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>af186406bfade0b516aff98c03a420019</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_fifo_out_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>ac283d7479bd588a7f0d7dfeb6c9cf576</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 0, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a3a2673129dcf27738ce07a85f4fff083</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_fifo_out&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>ad8298b37ec936b7e4f8ee3631240cb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>out_if_type</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a852db3dc252882a4762b4325455810bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; out_if_type &gt;</type>
      <name>out_port_type</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>ad242cf476a20d841917d22e3d0d1c298</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a625d73891f60d6e0ae776246058ac147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a54621fdeeb2787d898af62b2acc1ae7c</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a4a6b71f605c7b10ae6285b9012795a28</anchor>
      <arglist>(out_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a67f9ca0caf74d0820ee70ce9a2d9f9c2</anchor>
      <arglist>(const char *name_, out_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a4752f7b417e02b43cb48f588ba83fe5c</anchor>
      <arglist>(out_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a716a18ac25ebd21adbc8af6f8330403e</anchor>
      <arglist>(const char *name_, out_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a43e19201be46ec08d0f5e14de2d112b1</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>aaa500f98e068558eb2ede693d6d544ec</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fifo_out</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a2114c9ac6c318b5cdc2f745e9fd5eb3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a2ce0835676ac1e23a3619e35f0165eb4</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nb_write</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a662c217d4899de8be6d1a44cd2dc3174</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_free</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>ada1dd378afae2b3997f6bb98facacdeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>data_read_event</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a8e7c3e0e8f3cdc0d0ce8af49ee876c23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>data_read</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a3a74a40fcccf1ed937a597d639f5571a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01172.html</anchorfile>
      <anchor>a5ef7132aaaf9ff22c6c4f9c6a13fd8a8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_out_if</name>
    <filename>a01164.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_fifo_nonblocking_out_if</base>
    <base>sc_core::sc_fifo_blocking_out_if</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>num_free</name>
      <anchorfile>a01164.html</anchorfile>
      <anchor>accee55814312a2e29f9a8b61b5242eec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fifo_out_if</name>
      <anchorfile>a01164.html</anchorfile>
      <anchor>a7463727e52bd66ae075795bc82755bc0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fix</name>
    <filename>a01476.html</filename>
    <base>sc_dt::sc_fxnum</base>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>afe27017f13e8bc054258350525baa821</anchor>
      <arglist>(sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>aaec5354bba0a21a3cd9eff59b074891f</anchor>
      <arglist>(int, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>af942f88bf63d68c1ba6321bb911c5613</anchor>
      <arglist>(sc_q_mode, sc_o_mode, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a319ba164288d96f27413382c363de49f</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>ad3492206ebeb2a85fb704a197a75047c</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a5e7471767e62b8220630e5333f651e0e</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a582d5f119a43caaca969e87c05a0a3ff</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>abc51bfc9d56edea08f0be6ed558852c7</anchor>
      <arglist>(int, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>afb160910dcf5539b71d0980ca55c9eb6</anchor>
      <arglist>(sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a7c67a11a0a871abf0da3b135342b4e29</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>add7221138c641b7e527be57805f7a805</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a62cd76b34db44930b2ed1b0267f9c669</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>aa016fad2c8f9cb92e779b90b56db180d</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a3f73eae27ce6f4486af5168b14aed15e</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a39593f2a1a7ff1f4eba6139ce7c2cebe</anchor>
      <arglist>(const sc_fix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fix</type>
      <name>operator~</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a68655a7a6ec73401ee1bf4112a52458d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a853434db4aa6e60ce573fa77454e20c1</anchor>
      <arglist>(const sc_fix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a3ec9a4248d66264cbb3cdf9a53ac59d4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a418a3c190f17760ff9236021af8375f7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fix &amp;</type>
      <name>operator++</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>ae18ad590ea7092805514905c7e6e8641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fix &amp;</type>
      <name>operator--</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>ac4736f8f57a2c71eab9b78713e01928c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_not</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a44dd5e936c400730414a472df03807b8</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator&amp;</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a6524a763afafa32d063c9d9247f18af3</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator&amp;</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a59900ea06b7f227b8ae9bd0a2ce52612</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator&amp;</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a30a8c1e4c83d244855a1a63f188c7d0b</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator|</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a656b9285dc2d00bf7982aa3b9aeb7f84</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator|</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a522530d4fec03a1f6d86489e1bc45587</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator|</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a3a26e8b75a9e2e7de9264d4559446715</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator^</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a34f1d6bda48190c5e3d10a98ba3a746b</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator^</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a8dd60004823625479d68c105321ca469</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix</type>
      <name>operator^</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a0ee73e1bd6aee7d01f2a4c42ddb48766</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a73a39b085494b377cbbe1d4ba3ae9f6e</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a5d7710b1040f61edc3a9161e4b718da0</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a696e602a76358082f322e8b3c66263e4</anchor>
      <arglist>(sc_fix &amp;, const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a1bce95c6128687b15b1bf3ce93794de3</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a5a787af6ee8ea0972d8ea189a2092977</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>acbdb7193ae7daae79609bdade2060176</anchor>
      <arglist>(sc_fix &amp;, const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a2d7f8d4f887d8796af2b25769f96ecdd</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>a89bbda76a7a1882b60bd92ae4243f73c</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01476.html</anchorfile>
      <anchor>ab4a1fa90f4f8ea49c7223e1e3b9a4dc3</anchor>
      <arglist>(sc_fix &amp;, const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fix_fast</name>
    <filename>a01480.html</filename>
    <base>sc_dt::sc_fxnum_fast</base>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>abb338d0ed5917ceae3bd1f1f07257275</anchor>
      <arglist>(sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a941a083b34209f72f093e664f4d36a24</anchor>
      <arglist>(int, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>aff42edc7b056e8612a7cc8a385cde99c</anchor>
      <arglist>(sc_q_mode, sc_o_mode, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>acec6235fc6df31f31e7fa4eb9e7fcf5f</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>aebd0fad83d4d63183d6321bfd7157cde</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a22ac69f2bb2cdf71dc0f7f39ee80a278</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>aea14e08acdb4fc5f2c3d35eaade6b050</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>aee8a5868479778c944fd73812da96b8b</anchor>
      <arglist>(int, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a009d0077c7d11d813eba5ae8bbaa43cb</anchor>
      <arglist>(sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a902973e54ea482d67a4784aad131a50e</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a95cad534576469ef7a828f71ad4f9d78</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a8d07f61ee37378d23d24da35e201780b</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a495efa1cdab82adef37b78a9acc81b42</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a51bb82895deec2a065be44d912bfd0f6</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>aa3c949227d01f24b1ca9a982589b67fc</anchor>
      <arglist>(const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fix_fast</type>
      <name>operator~</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>ac10280ff6a5237cf92ede46648678081</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fix_fast &amp;</type>
      <name>operator=</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>ae030e1cefdf9ff6640043b82da26033b</anchor>
      <arglist>(const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a786a9948db249acfc24ef6568df1b098</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a1680cd9cd5b6a2133b4e8119023540b7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fix_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>ac394836101b52942b6084c31d9a53526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fix_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a75ee6fb734a296a7ad424d2d071d7ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_not</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>ad91879d2f25e2c566275a5c4feebac93</anchor>
      <arglist>(sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix_fast</type>
      <name>operator&amp;</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a49a70d2f0ab3a06a7ee5f35dd7a4cf56</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix_fast</type>
      <name>operator^</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>afa7d96cb00f0bdbe0bbf53682d53b648</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fix_fast</type>
      <name>operator|</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a53f5bfd8fa060bfaaf88afef9546f013</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a8b35064c437e430e6fd88a77edaa7c0c</anchor>
      <arglist>(sc_fix_fast &amp;, const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a53a4132e9c07b38b222f096444b31268</anchor>
      <arglist>(sc_fix_fast &amp;, const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01480.html</anchorfile>
      <anchor>a8dc1d75a0ab0efb0eb0dc3a2dffededa</anchor>
      <arglist>(sc_fix_fast &amp;, const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fixed</name>
    <filename>a01484.html</filename>
    <templarg>W</templarg>
    <templarg>I</templarg>
    <templarg>Q</templarg>
    <templarg>O</templarg>
    <templarg>N</templarg>
    <base>sc_dt::sc_fix</base>
    <member kind="function">
      <type></type>
      <name>sc_fixed</name>
      <anchorfile>a01484.html</anchorfile>
      <anchor>a5bfdf310e7cf1c3948591bff364e9c1d</anchor>
      <arglist>(sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fixed</name>
      <anchorfile>a01484.html</anchorfile>
      <anchor>adddc790deabee005c81a274ffba092f9</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fixed</name>
      <anchorfile>a01484.html</anchorfile>
      <anchor>a53e5397e8df1bc6e1f225cbd6ac41438</anchor>
      <arglist>(const sc_fixed&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01484.html</anchorfile>
      <anchor>a976646db4efc03a15dcd540694323787</anchor>
      <arglist>(const sc_fixed&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01484.html</anchorfile>
      <anchor>ab3537b0b661c07a7afd98e457b195f13</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01484.html</anchorfile>
      <anchor>a05532e95bfb499b976b2bb1881e6da27</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed &amp;</type>
      <name>operator++</name>
      <anchorfile>a01484.html</anchorfile>
      <anchor>aaafbc0912cd487c3a6d5b7c2a882e8e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed &amp;</type>
      <name>operator--</name>
      <anchorfile>a01484.html</anchorfile>
      <anchor>a23a593fdccf0664e8807a1fe220382cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fixed_fast</name>
    <filename>a01488.html</filename>
    <templarg>W</templarg>
    <templarg>I</templarg>
    <templarg>Q</templarg>
    <templarg>O</templarg>
    <templarg>N</templarg>
    <base>sc_dt::sc_fix_fast</base>
    <member kind="function">
      <type></type>
      <name>sc_fixed_fast</name>
      <anchorfile>a01488.html</anchorfile>
      <anchor>a3d61df6423c9adbd1d591b6ef9ef8fb2</anchor>
      <arglist>(sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fixed_fast</name>
      <anchorfile>a01488.html</anchorfile>
      <anchor>a960c9d1665cc2406e2b2c752de22e460</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fixed_fast</name>
      <anchorfile>a01488.html</anchorfile>
      <anchor>a62aafead12ce16bf031b3f346386ff46</anchor>
      <arglist>(const sc_fixed_fast&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed_fast &amp;</type>
      <name>operator=</name>
      <anchorfile>a01488.html</anchorfile>
      <anchor>a8027980b49cd66350dab05251aa90753</anchor>
      <arglist>(const sc_fixed_fast&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01488.html</anchorfile>
      <anchor>acc594038fd751766b2af9f4befb32252</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01488.html</anchorfile>
      <anchor>a7cb37b71e19fbe0673fbe94790d91b5a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01488.html</anchorfile>
      <anchor>ac89bd20d0249c39eee8c19609d999217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01488.html</anchorfile>
      <anchor>a6840072252dbc4062292a239c8eff503</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxcast_switch</name>
    <filename>a01492.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxcast_switch</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>a3d86c4f1927b5f0c99cd98eb0f133bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxcast_switch</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>aa5fa32ec7bdc8cc1a0e863b9cb5f88c9</anchor>
      <arglist>(sc_switch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxcast_switch</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>a7a6527a264bcc525567296cec175fe43</anchor>
      <arglist>(const sc_fxcast_switch &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxcast_switch</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>a70bec551275bc87e0a424ef475366d9d</anchor>
      <arglist>(sc_without_context)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxcast_switch &amp;</type>
      <name>operator=</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>a800ff5dffb368dfaf75e532151e5164f</anchor>
      <arglist>(const sc_fxcast_switch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>a9dc6dc633ed7acd0e4412f86e1ab649a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>ab35811adff919f9b038f6fdb4fe79e19</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>ac5e5da31615d4dfd00a0731ac6f9d6f5</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>a8c56556d1c37048e115490f2ddef8126</anchor>
      <arglist>(const sc_fxcast_switch &amp;, const sc_fxcast_switch &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01492.html</anchorfile>
      <anchor>a02019459dbb2482b9fb3ae3ac27afdb2</anchor>
      <arglist>(const sc_fxcast_switch &amp;, const sc_fxcast_switch &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum</name>
    <filename>a01512.html</filename>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator-</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a5db8db9642675a925bd742affe8821f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator+</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ad7adbeec3e50cc1b7ad77d9bf1fecdbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ac872985961cb359104c5d45c836e1f4e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a7294b06fe9d47995acbbaa4030bf8265</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum &amp;</type>
      <name>operator++</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ad6e8fb497ec3ccee2f72fcdb203cee49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum &amp;</type>
      <name>operator--</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>abe81d1cbe4a15e782204d3ae172d7563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_bitref</type>
      <name>operator[]</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a39666f0f4932e2397e0865bd24277460</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_bitref</type>
      <name>operator[]</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a5c48dc83d1adea6dfe4cec2784518e72</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_bitref</type>
      <name>bit</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>abb6fb1001214cce8d3d74911158117d2</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_bitref</type>
      <name>bit</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ab5e1b0b013a760dd1b28185e3cb65ac3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_subref</type>
      <name>operator()</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a46cb1a732a2bcf2d2b82cfcbe1ad76a8</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref</type>
      <name>operator()</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ad57a69911f528bf372e56f72dd3375aa</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_subref</type>
      <name>range</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a378a7f579783bca07561c8600e48182b</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref</type>
      <name>range</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a5ab8c18d7f84783b82e60c9f8112bc36</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_subref</type>
      <name>operator()</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a6a3cbecce332f54f47b211779087d1c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref</type>
      <name>operator()</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a44aa26b4fcfb72b252a7a53effe822ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_subref</type>
      <name>range</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a225d0b6e0a8d6fa76fb89d7f81f1c211</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref</type>
      <name>range</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a7c20466605f0eabf9997515f87bc93dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a2a4be62000f817847eae22107c23c5a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>to_short</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a1175b1be2a9f0b4da450ab1653a0aa43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>to_ushort</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ab46dec1aec5a84551909514464ecfaac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>aab6fe4b91a8348b7a567a7b46a355543</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a7922b928d7834fa1d17b5e7f540e37f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ac33f3169169a80c07d77de5ded4fa53d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>aaa8dbdc352019428989541359eabf39c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ac1cc4bf8cd7ded853171d93689a3f901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a0aadf7bcd1e71fde9524808f2f3e9193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to_float</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a24b366fe1976aca2e804b7671611e8e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>afd9eedc590cea32428b1b8a3fd09c1fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a93ad025b6c8bd599b3998f9c87dde87c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a030a3eba953fbe0c36dfd856102263c5</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a4f711d2133d13a7cb8a913f53b186f22</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a4945d20def592371c893ab3f6efbced6</anchor>
      <arglist>(sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>aafcd0810fbd9f83efe8fc91a59371ef7</anchor>
      <arglist>(sc_numrep, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>aae181a92e8c208c63a4450e5413e527c</anchor>
      <arglist>(sc_numrep, bool, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_dec</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a4cbb3c132af03b0767f19e3010f5e9ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_bin</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a6a6e30dfde4144a95168fc5f752c0d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_oct</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a6d92b88b75a98b8c01d6d44842158691</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_hex</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a31c78b9f2817108c6474997c1fe9414f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a6ea755446b070670787bcf362e4cbfcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a9cb78b6c77d06687271336f679ebcd47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a27cfdf7316fea88405630e869ff08638</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>quantization_flag</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>aa1b561136a56d402baccf399ba771869</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overflow_flag</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>aa313d1a455f3f880eeb55bd00e4d9b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>value</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ac5cefb38dbd9cf92385884adb5d18f50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wl</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a8e39ca5b9dd133ff8a7cf3fbd8d2f9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iwl</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a0ae6b0b32547ef132f1b038e1ca4860b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_q_mode</type>
      <name>q_mode</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a5caa8e1bcfec330a5d2b524588cf5953</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_o_mode</type>
      <name>o_mode</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a0b7b6adfcbab1eb50877cc9af0fca6d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n_bits</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a5738827c9d7bc58e1463231fac781d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxtype_params &amp;</type>
      <name>type_params</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a77740953456690f0257a95cc96170b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxcast_switch &amp;</type>
      <name>cast_switch</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a032ae04c7bae2fdbe9ccd8ae975b6475</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a4197ee592d8fc7b31516d6c022f8cb05</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a764cb7274b3631369f324f597f87b1d3</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a20e72274e3dea64363ed0fd2ee002e38</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>observer_read</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a6f6c970eab34edc40ff3516f6c5267de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a37d349a7389a3b9d86a84d6885004d8a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxnum_observer *</type>
      <name>observer</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ac94b250cd4502164b1ebdf6510091122</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cast</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a7f3f75d2c0ea4cdfe1ae04608d378179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a80cebbd9dbde2ce49e6a02f41d217fda</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_enc, const sc_fxcast_switch &amp;, sc_fxnum_observer *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~sc_fxnum</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ab8f4330028b81f002bad1e65186aa0db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const scfx_rep *</type>
      <name>get_rep</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ae900400b2cef5608cea1c1cca184f732</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_bit</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a9cceb9cd52a099048c389103940a22b1</anchor>
      <arglist>(int, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get_slice</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a2ca8a9b788ed8ff2803a620d1368c29c</anchor>
      <arglist>(int, int, sc_bv_base &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_slice</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a30cbbddfb6e510c2892ddcc7989ad02d</anchor>
      <arglist>(int, int, const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxnum_observer *</type>
      <name>lock_observer</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ab22ad483552d286b196c6bda4ff1674c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock_observer</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a21930cf328fcb86251ef6f05a5c32698</anchor>
      <arglist>(sc_fxnum_observer *) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxval</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>aa226f4d5df4d442309db0fa035fc3a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_bitref</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>afef0a296fa7b40d8cc74fb8f7d71a7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_subref</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a6760a445c89840c147443024e30d3fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_bitref</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ac6b6f99aa3af649b9ae2af28eca35778</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_subref</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a2db24e1be095e524384e199c613c98e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::vcd_sc_fxnum_trace</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a6648156bc221a6edd9b20b87a592b07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::wif_sc_fxnum_trace</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a9d76b73168d8286ae803330a9103a0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a4a80bab819ad0bafa9ccec5744f454fe</anchor>
      <arglist>(sc_fxval &amp;, const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a8dca4a53cf093f80b014e9bacaecd96a</anchor>
      <arglist>(sc_fxnum &amp;, const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>afb5fd561222a5178c3ce4ccc12856c24</anchor>
      <arglist>(const sc_fxnum &amp;, const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a45424f77226a2385831ae2b9f49c124c</anchor>
      <arglist>(const sc_fxnum &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>aa3c782749d5c2d2c3ed7cd9fdd4f0ba3</anchor>
      <arglist>(const sc_fxnum &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>ae95256b0cf2482b1649adc97b3c37f55</anchor>
      <arglist>(sc_fxval &amp;, const sc_fxnum &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>af29d666d3d6ca94d6b99e802f8cd16a2</anchor>
      <arglist>(sc_fxval &amp;, const sc_fxnum &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>abc60923798d07d91931ce13ee1f8cf70</anchor>
      <arglist>(sc_fxnum &amp;, const sc_fxnum &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01512.html</anchorfile>
      <anchor>a54c826ee3e0b244bfc98c712923f8002</anchor>
      <arglist>(sc_fxnum &amp;, const sc_fxnum &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_bitref</name>
    <filename>a01496.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_bitref</name>
      <anchorfile>a01496.html</anchorfile>
      <anchor>ad5470deb5b6e8180b95f6a1157534a51</anchor>
      <arglist>(const sc_fxnum_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01496.html</anchorfile>
      <anchor>ab81dc343e0333eb34547d04f584a19da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01496.html</anchorfile>
      <anchor>a3ce8a49ecffd29b52092ee8b505a9a9d</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01496.html</anchorfile>
      <anchor>a562f82e877db2032b863ef1a74a5f89d</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01496.html</anchorfile>
      <anchor>a8e543cddde556dd8c8c1988b183a7034</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum</name>
      <anchorfile>a01496.html</anchorfile>
      <anchor>a175b77a52e441fb471900cb24cbeca05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_bitref</name>
      <anchorfile>a01496.html</anchorfile>
      <anchor>ac6b6f99aa3af649b9ae2af28eca35778</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast</name>
    <filename>a01516.html</filename>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator-</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ade0a999741cd91cbaab43edd3564a2e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator+</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a70816810c8fb08fb444cac78e5ad63cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a50089a4a0f8a9d5427e2857b93ddfcca</anchor>
      <arglist>(/, int64) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>af5753d78776f9e446c9ee7791dd69006</anchor>
      <arglist>(/, const sc_int_base &amp;) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a92b63a3c319d1ecb452c815a440acc8d</anchor>
      <arglist>(/, const sc_signed &amp;) friend const sc_fxval_fast operator&lt;&lt;(const sc_fxnum_fast &amp;</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a55b441a8caf9dbe0f6ba131abc8c5aa2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a59fff719b8ac533abebed7ed8136bb29</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a220d384a122a2f0d8e3ab1ca72341a7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a02742888d13ef365bb8f2d9bfe00c63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_fast_bitref</type>
      <name>operator[]</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a709b8f0a87d06b99688a4e124e0e179e</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_bitref</type>
      <name>operator[]</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a90f508b9f9a3afac5be2d09f40b63dce</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_fast_bitref</type>
      <name>bit</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a9b071a23d4e08b45695f922db2f37e05</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_bitref</type>
      <name>bit</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a2ff90aa363d6272ac21c563fd01f55aa</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_fast_subref</type>
      <name>operator()</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ace7a55333ef799edc1a1604dace4fc79</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref</type>
      <name>operator()</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a6a348666efb60f22376070a9bbc764cf</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_fast_subref</type>
      <name>range</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a59f4ac5c2997a2b0fdbc2b2bd62e4db0</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref</type>
      <name>range</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>af2325be6b014f44ab57dc4df7e7db5ca</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_fast_subref</type>
      <name>operator()</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a7a1d98d5d6bd2e771b39400ba886145d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref</type>
      <name>operator()</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>aaffb3d11a137f90b0b3b55bc878eceed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxnum_fast_subref</type>
      <name>range</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a45e86f05d2a40b25ffd956f6228eba28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref</type>
      <name>range</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a55f5d517c991afa18ca0673ff3ae4a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>addbbc2b2809a24a4d9639bd449ba1c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>to_short</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a70af36888b66a2f5cc837b9eb76197ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>to_ushort</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a4cfbf5aade252a8a6e6d6eeffa7202ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a63aed4ad478f842ff6d5abebd3587354</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>af535064e549f9b9003b2ccd04bdd1c4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ab012aaedb29f4260e29d03e7397704b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ae4fd312b83056657cd703fdacf3df7be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a80f1ec394804bf00f11c9f592b6e96c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a88ec15fe8d7c3c7f6d4fce8adb6d5d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to_float</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a90fe5b34562485c802363e8ba23d55ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a7538a32f831893d67cbcd6b61e27372c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a50d36e17a9726c273e4c2be9cb5ce8f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a39e442d93b7f279e085e82ef03e7151b</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>afc794b88cbf069975d7c0bfe562b23b9</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a1949bb5964bfb12f756fd3d55014127f</anchor>
      <arglist>(sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>adec3d3b88591deb88170dd9747e9a51b</anchor>
      <arglist>(sc_numrep, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>afbc3c356c33578e05d8eae7f3fd2f881</anchor>
      <arglist>(sc_numrep, bool, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_dec</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a2a2fc51d2fb3c7c13774a62be3a08657</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_bin</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>abcb4799b5040ff12be5a8a3edc8017be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_oct</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a3a613186596bdff300c6c1d1f58b97c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_hex</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a00b1fd3b7ab2563095021422cfb3f10a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a82878ac5200d638d06b47894c2ea6d74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ad1e108437427d44ccd8506071eef710e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a4d153a80f0e009b3802a44759251b383</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>quantization_flag</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a91be9bf06b4d7afbc5aa2c6a4a86f4ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overflow_flag</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>adba68630977fda4f3ef5fd4861425ec6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>value</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a3f6f3fd17d61796f9b1ffd0d2d261de7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wl</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>acec265dca6c1162b680ecab6faae9ee1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iwl</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a6b0fa69337bc4adda30057a1f704b0cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_q_mode</type>
      <name>q_mode</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>adc2a4a4c8441c4342e94be950a4d5f43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_o_mode</type>
      <name>o_mode</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a18e544b37e0969edef56a8200f2e9209</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n_bits</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a02a3ff6479f706cd17bf29b01e371b90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxtype_params &amp;</type>
      <name>type_params</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a3ef6ecfc3ce04a10c5643b4a452c404d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxcast_switch &amp;</type>
      <name>cast_switch</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a72b59c19425deb51c7e58f41bc4cab3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a7b8825c85f2bde267bb2e67c45c16894</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a87a4d6edd576f33e59dcca662a0d93da</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a7ac54553c3951416fe554562bf06de1f</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>observer_read</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a84e78544ad5006b9028541742ed3305e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ad3ee1ea155ddff0649717f995c47e027</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base</type>
      <name>int</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a6ba00f6bc2610420dd7dd62f9305d758</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxnum_fast_observer *</type>
      <name>observer</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ae6c7341990f044d24a30a82cde68fa93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cast</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ab870bb7a5d30dddbd84e71628504f0e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>abb5457fe982eafb08a64dff3f03ea05c</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_enc, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~sc_fxnum_fast</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a9a490c166edc4f06a3dcf104340147c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>get_val</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ad7cba01ffcd145b6648e322cee5e4985</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_bit</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ae37622dc64c967aba690a8a80f70e583</anchor>
      <arglist>(int, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get_slice</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ae167aeda3bb2effa13c4040b2413cc4f</anchor>
      <arglist>(int, int, sc_bv_base &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_slice</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a428faa342e4383300182d481907e2f50</anchor>
      <arglist>(int, int, const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxnum_fast_observer *</type>
      <name>lock_observer</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a4551e461a1b57a18fe99d1b80f076e30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock_observer</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a18b9c1327fbbf0efc249fe05c0e24526</anchor>
      <arglist>(sc_fxnum_fast_observer *) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a83ad882b44bbbda39d64c4e9bcc7bad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_bitref</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>afef0a296fa7b40d8cc74fb8f7d71a7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_subref</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a6760a445c89840c147443024e30d3fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_bitref</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ac6b6f99aa3af649b9ae2af28eca35778</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_subref</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a2db24e1be095e524384e199c613c98e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::vcd_sc_fxnum_fast_trace</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a1c8062ea387f4453c126ae820eabdcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::wif_sc_fxnum_fast_trace</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a16c91f0dfbcb5a4f95c4897070df317f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a6396a1462c90b2163b487e76c32b3998</anchor>
      <arglist>(sc_fxval_fast &amp;, const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a3f0d098fe3680b90bebc88cad5126d1a</anchor>
      <arglist>(sc_fxnum_fast &amp;, const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>abb310082f84c544b8030b99eac08c60c</anchor>
      <arglist>(const sc_fxnum_fast &amp;, const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a1cf5a59ea330ef23259c572454a0d2a8</anchor>
      <arglist>(const sc_fxnum_fast &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a1398886b4a76ad4ee1fe749334a53d53</anchor>
      <arglist>(sc_fxval_fast &amp;, const sc_fxnum_fast &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a9fc319ab0d59a251e3468d81f9b4f793</anchor>
      <arglist>(sc_fxval_fast &amp;, const sc_fxnum_fast &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>ab3706430769de8b932ba096162ed6ff5</anchor>
      <arglist>(sc_fxnum_fast &amp;, const sc_fxnum_fast &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01516.html</anchorfile>
      <anchor>a57e521f8c1956f74b1450dd4a7acbd39</anchor>
      <arglist>(sc_fxnum_fast &amp;, const sc_fxnum_fast &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast_bitref</name>
    <filename>a01500.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_fast_bitref</name>
      <anchorfile>a01500.html</anchorfile>
      <anchor>a5fa75d99f0c5d8d0e858f333857d2354</anchor>
      <arglist>(const sc_fxnum_fast_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01500.html</anchorfile>
      <anchor>a4e35c045fc85c97517a603f7df328c5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01500.html</anchorfile>
      <anchor>ac4c0e67a3a8cf9369ef5194756e2d10a</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01500.html</anchorfile>
      <anchor>a7366582842d87dbb4abbd256d577b480</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01500.html</anchorfile>
      <anchor>ade02581cdbafdd521ce62d7c8e9873d7</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01500.html</anchorfile>
      <anchor>a8a50115edd38da41aa88b7d04413223d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_bitref</name>
      <anchorfile>a01500.html</anchorfile>
      <anchor>afef0a296fa7b40d8cc74fb8f7d71a7c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast_observer</name>
    <filename>a01524.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>construct</name>
      <anchorfile>a01524.html</anchorfile>
      <anchor>a1902ac7463a5a9fe9e40b6335ee17f49</anchor>
      <arglist>(const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destruct</name>
      <anchorfile>a01524.html</anchorfile>
      <anchor>ac2913d4703cd924ffff8ede50341e90f</anchor>
      <arglist>(const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01524.html</anchorfile>
      <anchor>ab2ebb8babe91ca4ae317de8c039143d2</anchor>
      <arglist>(const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01524.html</anchorfile>
      <anchor>ad7728d40241abcc769239ea8cbfc515d</anchor>
      <arglist>(const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_fxnum_fast_observer *(*</type>
      <name>default_observer</name>
      <anchorfile>a01524.html</anchorfile>
      <anchor>a707dc7dd29bbb95650f259112c89e387</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_fast_observer</name>
      <anchorfile>a01524.html</anchorfile>
      <anchor>a655a81a28d9ec5fb030c8a0d8dbb4cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fxnum_fast_observer</name>
      <anchorfile>a01524.html</anchorfile>
      <anchor>acbdc08c7cda7b70e99f33c1b077d2494</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast_subref</name>
    <filename>a01508.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_fast_subref</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>ad9023769569bb2b2cabfaa866f79d21f</anchor>
      <arglist>(const sc_fxnum_fast_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_fxnum_fast_subref</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>ae7d7a4567bc884c09b9317da9e00ecf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a1418b8415cc9dba661047e55671a767d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>ac17d87e5083a91d009e25e414f7125ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a1342a91f37e53a5cb6675be6294bbd1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a0aab0ee72600f61a74b3ce8b74f570e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a645ec9df4c4d5e84ad51b3c08f06d3ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>ad6bcb07b9f1efa0b43d232803713775e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a3c02768a5c174cb33d76fcd7fd99a244</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a7ed957c20bae764719a3067467cdd480</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>aea4be47769c704a905549a07ad438c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>afa6d15a0a399797d49c15bd7c836f366</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>ab0c40abb8bd7b7c45a4f83df676ddbe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>aba988c3ac418eb82a749fc38e38ed51d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a8452ad29458a6fe2ca548bc5b4f32079</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a40863f1818a907ba1184ce95d9e30e76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>aadbe2ae85b8a28ca53dab181d3f58312</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a979f3e57797b159ced6e65ba13aaa259</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_bv_base</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>afeb892608013aeb52c5ff5f6ba30b3dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a7c1ce7432c8ef3b0df4bffc1f2712efc</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>ac8c2b45226437088e05412f7924f8245</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a3c2843907d996e0e1ae01dd1c6c36884</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a8a50115edd38da41aa88b7d04413223d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_subref</name>
      <anchorfile>a01508.html</anchorfile>
      <anchor>a6760a445c89840c147443024e30d3fdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_observer</name>
    <filename>a01520.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>construct</name>
      <anchorfile>a01520.html</anchorfile>
      <anchor>a36795b23cb8bcd53ee9e2373f15a8743</anchor>
      <arglist>(const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destruct</name>
      <anchorfile>a01520.html</anchorfile>
      <anchor>aa1e3d8fb4762e09d4cc43d5dc8dfb741</anchor>
      <arglist>(const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01520.html</anchorfile>
      <anchor>a1ad04c13f9cd6be73c84e8f75be72428</anchor>
      <arglist>(const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01520.html</anchorfile>
      <anchor>a7106162c0e36e90ea85812a7f4d310e9</anchor>
      <arglist>(const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_fxnum_observer *(*</type>
      <name>default_observer</name>
      <anchorfile>a01520.html</anchorfile>
      <anchor>a15b4d4d25cae1fa286e4e2d92d402595</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_observer</name>
      <anchorfile>a01520.html</anchorfile>
      <anchor>a9ccceca80084a3f89d4653bfaa97342a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fxnum_observer</name>
      <anchorfile>a01520.html</anchorfile>
      <anchor>a98ecfe926e3ac31afd338311187f0180</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_subref</name>
    <filename>a01504.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_subref</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>aafcc6b22dc2068f42dbafa191891e1de</anchor>
      <arglist>(const sc_fxnum_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_fxnum_subref</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a177c857e6dfae9038daf5a19670df88b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>ab8190cf79f010a7ad08277b200cd6bfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>aa5083d665b641fc5f29229e3544c3124</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a74da9120693e14658c910266a1931810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a0fc8bc7d517bc705c2b08bd66c70e24a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a736732018d60adeae688331c981605fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a96a909ab7a430b297ddfac0872fad07d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a38091aaa7ea80dbcda4789703cf8710f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a27675b4fea206605c661dc3294d89da1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a203c4288788695d10586d17ee3403cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>ab7dd6c4a4f0eb01c8c7c6a21db15d9bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>ad0ad8983d43091ffb626b772967e2e59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a67fb4e4dbdbab2bc4eb22723d0efb47c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a9d15d5040ac6d9b11cb9871970baf6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a2be19f65ccc2754ca77ab730c4e2366e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>ab89486f3b94c634882ba8314236ba075</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>afd4a809a596b751c4dbb6ceeb1ce79e5</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_bv_base</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a34b3d9bbf4803f90997a227aacd214f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a4ec9fe19fd74a7debc43fc7ec8ac20f6</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a9137d7c8fbfe5cb74c2684e15e186722</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a73f64c012ecf6fa7604a0ff2e0c1dcc2</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a175b77a52e441fb471900cb24cbeca05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_subref</name>
      <anchorfile>a01504.html</anchorfile>
      <anchor>a2db24e1be095e524384e199c613c98e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxtype_params</name>
    <filename>a01528.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>af08b41ed30d4987c146dc93264101ec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a3408875cbf3d90b544b2f0167b5807e7</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>ab568ebedb645acbf72842649b85a177c</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a136013dcea8657f1da0603dd1ea851a4</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a0f1e92f88990d5058b8f0a4db32a24c4</anchor>
      <arglist>(const sc_fxtype_params &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>aff38067c1b1bfe3cd3121b4448b0e0cc</anchor>
      <arglist>(const sc_fxtype_params &amp;, int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a8772f183ab4ec0c0ae07b24f9934c122</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_q_mode, sc_o_mode, int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>ade285bf8c307132ed41d605e53d1013e</anchor>
      <arglist>(sc_without_context)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxtype_params &amp;</type>
      <name>operator=</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a8a2d371a4612c98bc5408f6483274cb5</anchor>
      <arglist>(const sc_fxtype_params &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wl</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a30d3eac0545ab1747785124743e6e02b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wl</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a5f24673bd45d4ec706db5a00713e0694</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iwl</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a643822a5021820a142c345993becaa67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iwl</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a128581243c6c850e969e4e17651dd542</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_q_mode</type>
      <name>q_mode</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>ad5ae0565d5263917c2c3b75fb2bdf2ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>q_mode</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a2afafae9a2487d0aaa574021685d5596</anchor>
      <arglist>(sc_q_mode)</arglist>
    </member>
    <member kind="function">
      <type>sc_o_mode</type>
      <name>o_mode</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>ac1f9a5e094667000a92d4604213ab1c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>o_mode</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a064cf62ac10120bcd975db7751d521d7</anchor>
      <arglist>(sc_o_mode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n_bits</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>ac2c93583a1a6769030c3e067961f351f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>n_bits</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>acc6dbe6e5c714de9a0cc214b748b1f33</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a08a8197d48ac6421919028e3559b5519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>aacdc4aebdd849c4a63825cfd7bc3eefb</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>a30944f0434c1c2ccb4861898a8fe1706</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>af28dde7a6b4ab5941ae93e26be9bd2ed</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxtype_params &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01528.html</anchorfile>
      <anchor>af0f7c876bb6c002c010da07daf855770</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxtype_params &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxval</name>
    <filename>a01532.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a364a764d967c1eeaad688e24444f0d2c</anchor>
      <arglist>(scfx_rep *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aa81f0bc4a94af29b70b31c5e760d12a9</anchor>
      <arglist>(sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>af15a13877991ea27db5b074b488df89a</anchor>
      <arglist>(int, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ae76074b58fab4f2220dbc3ee28a0a07d</anchor>
      <arglist>(unsigned int, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ab321c730ba1a96a1539be4f06072e5db</anchor>
      <arglist>(long, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ab23d89ccba4705c631246700a3cd98bc</anchor>
      <arglist>(unsigned long, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a264529b72549367808b96e315cccbabd</anchor>
      <arglist>(float, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aa5ae8b54fedeaecb1a698045c634deb3</anchor>
      <arglist>(double, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ae8fcab073e092beefbaf8997312eab0f</anchor>
      <arglist>(const char *, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a840532e6d092a9d749d2c13d3dadd4b0</anchor>
      <arglist>(const sc_fxval &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aff784cd0ecfb3c99f7d50048f409d7c0</anchor>
      <arglist>(const sc_fxval_fast &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a4e2e7c6e0a6c6e24a31ac995d6b17d86</anchor>
      <arglist>(const sc_fxnum &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a331fd704fa9611832f33c41a5940f6c0</anchor>
      <arglist>(const sc_fxnum_fast &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a998aa67e3b767c415123e94f135eae9f</anchor>
      <arglist>(int64, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ac9a067b3f8898ad768947c2cc6a9b20c</anchor>
      <arglist>(uint64, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a43b5227ac0de418d76bff1847ced4962</anchor>
      <arglist>(const sc_int_base &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aabdf557b18c3703dd612ebf1e00c1db8</anchor>
      <arglist>(const sc_uint_base &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a4a2a5ad336002a2cdce876ef8ee5ee92</anchor>
      <arglist>(const sc_signed &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ac8be37268b48e91292386853f12d0af1</anchor>
      <arglist>(const sc_unsigned &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_fxval</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>afdeaaa10b229238c5622c7157185aab1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scfx_rep *</type>
      <name>get_rep</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a23038c688924fd10f05967ac7a279147</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rep</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a5a9fb64aa5ed1bded67162dbbfd1221c</anchor>
      <arglist>(scfx_rep *)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator-</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a76d3478bb85554c9b6cb47f7d419fa64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval &amp;</type>
      <name>operator+</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a6cbc04936eb6441729e26b66dc73f8f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ad065c784e2a32375a911c54fc3712f25</anchor>
      <arglist>(/, int64) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a7bbfa3c3c2512df4a1e849346d08ffcd</anchor>
      <arglist>(/, const sc_int_base &amp;) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a573f4fdb364545e08109b41de38839bd</anchor>
      <arglist>(/, const sc_signed &amp;) friend const sc_fxval operator&lt;&lt;(const sc_fxval &amp;</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a69a29e989457fca76cd6e66efe656225</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a88c0c9ab407920d484f99ae8357705c3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval &amp;</type>
      <name>operator++</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a616b86ec0d92c687b1dc80d47c88e50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval &amp;</type>
      <name>operator--</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a51db3e2b218415503d3e2cb2fcd20f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a3631ef80cddb1581ea7544ec634103cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>to_short</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a80ded83476d7841b2c1ec18f4adff901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>to_ushort</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>adf8e4c49d954867125122b1ca779419e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a3dce5489ea6b89a509669209c4ecde56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a753bbab0e8f8b2e9b7d5f7de49efb575</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a44da67efe651c09c5e78012f50b78fd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aa8edbf27fb4709b0a0c05a899a830f2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a411b18679a511431a0aa6b3f34fde3ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>adfba180eea780b4546057917c05887f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to_float</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a9b40fbb53eb5bb8e28b6577b5951042b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a897fc856f32b89c7ee76b2a2d6211a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a0fe8d858a1609dd164f997523bc7edc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>af85a89b4ea81b4778aa50c825a3d7abf</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a10a48180feabaf7e6c5c8dfb397d07d5</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>afcdebf4abcd7c4b3a1e0a67dcbec4dd1</anchor>
      <arglist>(sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ae96daa678decbfaa9b803474249f51d2</anchor>
      <arglist>(sc_numrep, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aba7c090d2cf0fd238ee9cf98c9e0cf51</anchor>
      <arglist>(sc_numrep, bool, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_dec</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a4d9e2fa0f861fc5080f5f384d50dc508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_bin</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a4258ed45c4559f8d0285ab399f891ef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_oct</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aa422159ba394c9ceecdb4c96970bbbb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_hex</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a9a6ae3d7a97e73b11d7519db8100f313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a2c47f68eda2cdffda979ef2c91805519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a6794b51b2f3bbb196027a610b73bb4e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>adfa26cc0f37a390244a27116142c973b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>abaad14f84ac26e63c614ad6cc3a4f7c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>add2af088315cf83cf970cc05d8c6adfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rounding_flag</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ad7f8915a0fd0c0add99e3836896d6df5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ad1c5cd49a10de06b9bf45025cf652da6</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a777282ca3b92992812129d69daa07955</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ae956fe577f254d017a10b51c3e62b7eb</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a034c71fe8d4dff784b5604680e9bea34</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base</type>
      <name>int</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a1b84ceb62c04295021a93f305b339bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval_observer *</type>
      <name>observer</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aca8c57ec0b2f9aacfb2954593888ec7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval_observer *</type>
      <name>lock_observer</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ab40863ed10b142d3ed50f0210a91a8ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock_observer</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a97e3aa355eb68f34d4a01f57ee9afd5b</anchor>
      <arglist>(sc_fxval_observer *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_type</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aef738dd6e88edea6ffdb9439547cf471</anchor>
      <arglist>(int &amp;, int &amp;, sc_enc &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sc_fxval</type>
      <name>quantization</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a58a1473c80be6d834d9686c7c4558faa</anchor>
      <arglist>(const scfx_params &amp;, bool &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sc_fxval</type>
      <name>overflow</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>ab2e70acae217aa1037a2e1acd74f0f2c</anchor>
      <arglist>(const scfx_params &amp;, bool &amp;) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a175b77a52e441fb471900cb24cbeca05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a08d71ce039bf5a8f5455f613ed2ca4df</anchor>
      <arglist>(sc_fxval &amp;, const sc_fxval &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>aeb47e8feeeb919fdf5ebb5ffed72925a</anchor>
      <arglist>(const sc_fxval &amp;, const sc_fxval &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>a4f0eebc5fe03debdae7da519989a5965</anchor>
      <arglist>(const sc_fxval &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>abba6ad62f3a15942504bd890ba6fbb4e</anchor>
      <arglist>(sc_fxval &amp;, const sc_fxval &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01532.html</anchorfile>
      <anchor>af126563bbf52915fe09e58e5336a83b2</anchor>
      <arglist>(sc_fxval &amp;, const sc_fxval &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxval_fast</name>
    <filename>a01536.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ab1dc848294d053c9447ee7009e53d96f</anchor>
      <arglist>(sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a4edbefdbd0ae7ed75a49911ddd9aca6b</anchor>
      <arglist>(int, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ad81e7f04d5bfe34b0a98c2403881a8fa</anchor>
      <arglist>(unsigned int, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a0ec42a3a6dafafc72ca145c74352f08f</anchor>
      <arglist>(long, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aa9bc5642fd52ae0cd1fe024a6cb1993a</anchor>
      <arglist>(unsigned long, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a5a91f67a49c904a49a19bc8e63a1d469</anchor>
      <arglist>(float, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ab06286f34f36537f0fccdc01b86802f9</anchor>
      <arglist>(double, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>af52d1daf2b2509f4257e49cd5554ae0a</anchor>
      <arglist>(const char *, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>afd8dad6d111ba9622389a67e49d20de7</anchor>
      <arglist>(const sc_fxval &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aa3d0884637910e0b4d5ad6acaa42479e</anchor>
      <arglist>(const sc_fxval_fast &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aa87c3cc9eace7509a8e54d40123fc5b2</anchor>
      <arglist>(const sc_fxnum &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ac751dc394a850859d326f3502faa134f</anchor>
      <arglist>(const sc_fxnum_fast &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a80fe33d25fe4764054acb02f2eb9b1e0</anchor>
      <arglist>(int64, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aa2251e336b52fa1f8b4f4118c535cb49</anchor>
      <arglist>(uint64, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>adde3e2372edc0838a5a57a74e1dcf739</anchor>
      <arglist>(const sc_int_base &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a0bf6baeccf24862140a7eaa34079f834</anchor>
      <arglist>(const sc_uint_base &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a537104e6e0ed3e7840d5461828cf88e7</anchor>
      <arglist>(const sc_signed &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>add509a95087dcfafd61c3e66f4b86855</anchor>
      <arglist>(const sc_unsigned &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_fxval_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aea22210498f4a46165a037ab46ecf15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_val</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a2585514841730818fc6368251a241904</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_val</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aab91ea9dda6dcf2317bbdc08c4953202</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator-</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aeeb635d097c77f6dcad025ccd4b463e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast &amp;</type>
      <name>operator+</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>abb7f6de99ceca4978d7023b141bc5cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ae6f7e3f4165a5ed49bb6d72a9c0e7a08</anchor>
      <arglist>(/, int64) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ab89f77b422383f6a86f35009b79b15ac</anchor>
      <arglist>(/, const sc_int_base &amp;) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a5ee5df80af1d44507adf455e7f10b10d</anchor>
      <arglist>(/, const sc_signed &amp;) friend const sc_fxval_fast operator&lt;&lt;(const sc_fxval_fast &amp;</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a49fa93520e9ab99f8d5b62ac2d75d58e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a6169b8e8c24dfa6dc8dd21f816522cbe</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>af6e2fedada85ce2a461bc2f2fb57bb0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ae582236a6e39c37f481b7b915c19d252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>af3878bbee5f3fbed17d88b691771f1da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>to_short</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aab0b9a43e9b0795fe043196c827809fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>to_ushort</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a8aeedbcef6e2f81d9a412fcc2588541d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ae33b743490a4dc6028e2e96fab2be4f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aec6436fccd3f3490a36c3464c70f1661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a9c69796a06c0f464ea71fbe910341294</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a8eaee476456a0b337605f338dfe58adb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a1080b84279532dc6a7372bf97d50d7d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a3a9c00893deea5fc9e810b8ee7db870a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to_float</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aab2afcce94483823d956952916271e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a3ef67a58cd3db4e3bc09db77c82765e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a1723a086df04c9bbe4854532fd18fbd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a6b8d4e4894c3802321949ba98093d985</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a36ceb2e99943a4f410788da7ae73af55</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>af36d16dfaadff58d167be94db6219b86</anchor>
      <arglist>(sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a8d9124d16dbc9419effc8d72be868ff4</anchor>
      <arglist>(sc_numrep, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a76a7622a6c42c091582f1fb1cf121829</anchor>
      <arglist>(sc_numrep, bool, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_dec</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>acad1229da009fff1eda16abf9c882c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_bin</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ac2a308ede2b372f8a7074f5524575b03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_oct</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a4be9dcbc953437f8bda53b8533a48fce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_hex</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a849b5063ef4de291f66accc21f6e6401</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>afc5c60aece23b688051b17150c427b7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a8cae94d162ea0bdc9a0fc54aa33ecb06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ad298259bb90c3f350879d37ce549ed25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ade50d90687315dd12fe16fe98aedc5bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ad9a53b6e99a46be7f504be6b3c2311ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rounding_flag</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ad2e786b79b413b8d81b9b405e942b0a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a04ffcf16a58e78de035253f808b64e5b</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a857390092bb7b5ccf7b16d6c57964bf4</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a4211d86beaba3c6b2043ec79d5b4ff12</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a7735f6dedaa51f065be08a880db88ee1</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base</type>
      <name>int</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>af6ae93eb1f2e9119299c35c87654cc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval_fast_observer *</type>
      <name>observer</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a6851e1537d706e558c4bcf9642e010d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval_fast_observer *</type>
      <name>lock_observer</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a83e61225f63a2265eb0b184fce625ed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock_observer</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aa7417c28dce30adb834d5c7823b4d4f4</anchor>
      <arglist>(sc_fxval_fast_observer *) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>from_string</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a2f7d472fb1b5202fd3916c0832ba3b6f</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a8a50115edd38da41aa88b7d04413223d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>aafa5084dbebc1804378cc3cd10e45165</anchor>
      <arglist>(sc_fxval_fast &amp;, const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>affd222756473f14241161d47ab38e860</anchor>
      <arglist>(const sc_fxval_fast &amp;, const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>a178de4e55a0def282bb906bdfefaa2f1</anchor>
      <arglist>(const sc_fxval_fast &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>afab3f5fbc1073de948109f40c4ebee7a</anchor>
      <arglist>(sc_fxval_fast &amp;, const sc_fxval_fast &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01536.html</anchorfile>
      <anchor>ab6fa1298d3bd03a40c1350c0af79e62e</anchor>
      <arglist>(sc_fxval_fast &amp;, const sc_fxval_fast &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxval_fast_observer</name>
    <filename>a01544.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>construct</name>
      <anchorfile>a01544.html</anchorfile>
      <anchor>a44cb09c822b89ffc09dd677cc2e7ef5b</anchor>
      <arglist>(const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destruct</name>
      <anchorfile>a01544.html</anchorfile>
      <anchor>a9091e4a20bbb437b556cc9ae1440da96</anchor>
      <arglist>(const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01544.html</anchorfile>
      <anchor>ad8a06d5db39d2aa50cc1a4a6ac2270f5</anchor>
      <arglist>(const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01544.html</anchorfile>
      <anchor>a3cb2a11b9eccc525c11939ee1713b4f8</anchor>
      <arglist>(const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_fxval_fast_observer *(*</type>
      <name>default_observer</name>
      <anchorfile>a01544.html</anchorfile>
      <anchor>aac09d78c1ebee668ab88b4c88dca95b9</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxval_fast_observer</name>
      <anchorfile>a01544.html</anchorfile>
      <anchor>a38114cfb5d28a42c35ff36759f2e0558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fxval_fast_observer</name>
      <anchorfile>a01544.html</anchorfile>
      <anchor>a61bea9bd1a6eb4e24782e66d7164037d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxval_observer</name>
    <filename>a01540.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>construct</name>
      <anchorfile>a01540.html</anchorfile>
      <anchor>a265382958dc353b49a67a0391ab0bf1d</anchor>
      <arglist>(const sc_fxval &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destruct</name>
      <anchorfile>a01540.html</anchorfile>
      <anchor>ab78a899c7d051d2fa7ff0875de470c8c</anchor>
      <arglist>(const sc_fxval &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01540.html</anchorfile>
      <anchor>a80ca9e899307dd41b49df03d751dfe9d</anchor>
      <arglist>(const sc_fxval &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01540.html</anchorfile>
      <anchor>a5bd699d031b8d62d89bab40ce6f6dea7</anchor>
      <arglist>(const sc_fxval &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_fxval_observer *(*</type>
      <name>default_observer</name>
      <anchorfile>a01540.html</anchorfile>
      <anchor>a899604c2ff0b765bd4cf14df4f14f86e</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxval_observer</name>
      <anchorfile>a01540.html</anchorfile>
      <anchor>aced84ca9e78854a9bff693219fcac94b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fxval_observer</name>
      <anchorfile>a01540.html</anchorfile>
      <anchor>a249f323a8b7e10ac46f490dcd0e52e2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_generic_base</name>
    <filename>a01728.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>const T *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01728.html</anchorfile>
      <anchor>ab1e45f545e0d6a887bba21184e074cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01728.html</anchorfile>
      <anchor>a70eac0800475ea12f19060e448f2b771</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_generic_base&lt; sc_concatref &gt;</name>
    <filename>a01728.html</filename>
    <member kind="function">
      <type>const sc_concatref *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01728.html</anchorfile>
      <anchor>ab1e45f545e0d6a887bba21184e074cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_concatref *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01728.html</anchorfile>
      <anchor>a70eac0800475ea12f19060e448f2b771</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_global</name>
    <filename>a01464.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>const T *&amp;</type>
      <name>value_ptr</name>
      <anchorfile>a01464.html</anchorfile>
      <anchor>a0c3bfad7bc72e27edf4cbf11a09ee882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_global&lt; T &gt; *</type>
      <name>instance</name>
      <anchorfile>a01464.html</anchorfile>
      <anchor>a0b87db97d0256433d63032eba434567d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_halt</name>
    <filename>a01792.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_halt</name>
      <anchorfile>a01792.html</anchorfile>
      <anchor>a3676e989189a2531590780d6ce830573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_halt</name>
      <anchorfile>a01792.html</anchorfile>
      <anchor>a5b1ae8b586143c213d8cc10d9cfd5e59</anchor>
      <arglist>(const sc_halt &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_host_mutex</name>
    <filename>a01176.html</filename>
    <base>sc_core::sc_mutex_if</base>
    <member kind="function">
      <type></type>
      <name>sc_host_mutex</name>
      <anchorfile>a01176.html</anchorfile>
      <anchor>a782275fbba92ed7d94ae21bd1406db49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_host_mutex</name>
      <anchorfile>a01176.html</anchorfile>
      <anchor>ab44af180b34bcb13ffab33a0de2f209b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>a01176.html</anchorfile>
      <anchor>af90a3ba3d548e09f8f88f5876dc56d99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trylock</name>
      <anchorfile>a01176.html</anchorfile>
      <anchor>a06cb6aad185aef0e41f6ad7809dbb205</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>a01176.html</anchorfile>
      <anchor>ac38257ffd5ebb1281b3327af5e760f8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in</name>
    <filename>a01264.html</filename>
    <templarg>T</templarg>
    <base>sc_port&lt; sc_signal_in_if&lt; T &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a07849e7377910f39ac1d01418d03a894</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a6b5f81ed0b211cc7677a4e46a31d56f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a2d3571261eefb2be8b3f1cf3397d101a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aa94d1f4cb3be5685798dbe1722cf40f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::port_type</type>
      <name>base_port_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a37966de8eb3264304683f51a3f4d6109</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a12300548a41340b87cf0f39b6337c455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>in_port_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a5ff3738ef0b1e4b6189a101f41fc3f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>inout_if_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a4e6d388825b3a5dfb0373a596057a985</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; inout_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>inout_port_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ad58785f68ab1ffddc34beba5d4bf5988</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ad60611e8083b9e7bbbc491195f76a225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a578f3a49ca2b9ae6ef2ae07d2ea5fd9d</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aa0bb300cd867d66e84a8b7ffa92c1a6c</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>abc810eccac30a595d937efcfa997913d</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aa6d6065772766d00d40016377655df7c</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ade5386707549a37d06f2a1aa8d24dda8</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>af3442470c24fdd464322c26532605d6c</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a4f1b6a59f5bc73cf1dc84511c456013c</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a1a1998a78b4f7251a5c96dc6c1d5bbf8</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aa7d23a2b92b2988ab8a139e467a3e944</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aaf3621f0f8bf7c24d366f2fc6a71713f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a27fc12ebf1ced4675bb3ce4815336f42</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a3ad0420a26c3a672f5b40e70ff23c189</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>acdab4c2d2f650ce1a46677066a7e0a8a</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a8b5ae95cbc4efb954ae1208f5a0b767b</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>abeb037b5ab0468c26c43359ef2739277</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ade1f847e19c85ecfeaa4d61dd670b83f</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a780433ff487ba5fd948b93ebe6f20b41</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>acf6822b7de47e060ee9071e67aa2d821</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ac20a0f9da2ca04fc9d83e6ded163c061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a0a188064f82f657a97b4389e4f350efa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>af8c3af59622c6709a41b3f743e557045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>abe558331260610282223261f310ae81a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ae0ade1a0ce5ab6287f4e12989ad86608</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>af0a68f8f0a534dc7d6bdc411e8f86688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a5f2bb71c7a7332c03f050cff1d87524d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a572b941f4819730952bfb3bcdc28f2f0</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a2cb8858929d6a0c09a8d2d79156ad141</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a23e5fc7627572ab609514d8f76b31f3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a499f7e36a19f32d7a693224e075861fa</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a0ab18a8f1e133af4bf697d02ecb3ad36</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a9caff6412d659e0525ae7c4efcc7c075</anchor>
      <arglist>(base_port_type &amp;parent_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aefe2646c22795e2a87d3034c98317af4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in&lt; bool &gt;</name>
    <filename>a01268.html</filename>
    <base>sc_port&lt; sc_signal_in_if&lt; bool &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>bool</type>
      <name>data_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>aebf736469fc763aca2993882c59c1eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ad724058a4cf395c3608ccb6a7f6dc6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a8c88604227b50f520fb8ab7f585a9c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a9a9b3b89fee5686ba1887daa364f74a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::port_type</type>
      <name>base_port_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a3c7bf2ffa791282e5e93990621e4abdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a7573bf98dd36bbde03f7dc363c2f4a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>in_port_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ab1aed24c380f70713b08a75d656932a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>inout_if_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a7724b5c6af43ef7faddc9a20d394f01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; inout_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>inout_port_type</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ab64c00ef22e33f15700b361344dd7795</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ad5d0070b60d3bc5106050ec71145bca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a03bb9452423f204917db56ec2f7a22de</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a69dd652e968e745f3f65032da9b010ed</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a76098a34cde09ad4fb91777125799fba</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>aff04d6badcb9a53fef34aaaa6a1fcaa5</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>aaae4dad194be15837f0d2b17eb03ec02</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ac5824d9a24fa5c652615f9110695ce00</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>afd30d7e3bf560de198a970add5e8208d</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>acadb5f6e907889a4b572db88417f23ce</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a7461c7b9c19d8f8a5e81c6f3ac98d74c</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>acb6bb62c3e02a8761682eae8048b1135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ad846194be5aeedd4304ebcdb0bb95795</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a859ffc951e7c74ac2a0d0f52589a9d81</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>adfbdff6a95a84b60542c90150721f2e3</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>adf44cae52a17a089af7c88dd4b099a1d</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a8eb5a5f96cc017ed860cde05c3b0fff1</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ac2a21208d25d2092fda1c913f6ecdc01</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a325a1a5fc8a6960e21373a17fc87902b</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a748ca750af8ab3837a57dd109eb10151</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a4d0cd98b127d0da54ceb327624d14649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ac9582dc1ef62c1f4255660c2d1301fc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a8a9572c5f29683a1f0810b07ae523bf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>aefb68fe16174312e5ae78ade00841a45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a3994d2e551c4515aa4cdad22f7966b0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>pos</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a555f5e4aff680ea6ef6d0a40c6720775</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>neg</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ac166825864e4a04a635f078a07287fa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ade25016e95a959c319d7ff3681804879</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>aede7f0baf106502b87af402bc8cb1c27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a6517030ed88fecf5ae695bdfc0ee7357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a29cc782bc4a1f99cd886e0e78b2eabef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a42a375e15846ad8b83007761e2200738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>af4bb55d3f249053f86016f655908f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>aa346d3498a102c565dd4531e3909362d</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a815a0567e944c5f20f814c4f7c0e3334</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>af0000701f6b076473829d69db9f5ac72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a7a106184a4919e1d94c5b24a3efbcd28</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ade5e5a017c4023f6b56e7ba0348e6b8a</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>a7b67b8b26ecb1b97350b1c2b08e6dc6e</anchor>
      <arglist>(base_port_type &amp;parent_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01268.html</anchorfile>
      <anchor>ab10523c862dcf640977909106413a2d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in&lt; sc_dt::sc_logic &gt;</name>
    <filename>a01272.html</filename>
    <base>sc_port&lt; sc_signal_in_if&lt; sc_dt::sc_logic &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a53e7409911f8a447a412eb0e453a86ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a22a06e03e1c87f0ff9dee16fa0f532b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a3280f401c5755c1c205dbf80848e6122</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a4fb22fd0b7f4900cd859e6f084a989a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::port_type</type>
      <name>base_port_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a418a869b1c7097577705ab1ff9274668</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>aa4b06b71c8420fe4efca6f49ac0679d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>in_port_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a87fb76c516220a73e579d83c5c640dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>inout_if_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a89fc0e75cbfaa5d354b9a9fdb2a813d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; inout_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>inout_port_type</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>aa1766b200fb20b8e29ab5471b580c0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a76add8e0c53c1b2850e3b9dcae1f32d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a158c2eb9d47d4c67b6f2e23fef487db7</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>aab67805abf12db452b77a3865caf3f92</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a592b5d45a7c956c0fcf5f37710017e0f</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a491bee5e7bd91cf3889ef8e096c50213</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>aa717a68db7e7eb5448d3b428f0b00ad4</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a48d5eea92a587dbb377bc49351c52fd1</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>ab7b8055753693b6450085883efe9e10a</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a9bf40fa42c56cb9bd6ac726fbc8458bf</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>aa83909d601b52b148b52ff63f0e46cdd</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>ad6fa82956df7da45191b58a1b8c8a21f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a48d14d776429c21dae5d4d26c4aa69f3</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a3f28869c243484a6c3c6693e9104b252</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>ae9da73d0b3bd70db79dc6cf3ee31b086</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>ad898e0cc8443751d858c4645f3fd4b40</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a1a96bf92e3d6a7f3258bea8659521874</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a07404f2e68658a2e4c8cafe102301c2e</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a238a83bd1b14a1584e25089b43f5cc54</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a041a71680647ce9b548773a31c771526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a53c19581b0af7ed5c12bcaa6a28a0bae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a24e74fda1d91618b5c66d0271a7f9927</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a48fde27939c25d61ecb91eacbb95a620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a798c3ae188d5a069587a06fb98b8c119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a40813121a75599b42af0495a78d6ca7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>pos</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>abd6719d19be3ebdfe6da6d9a1a0a053d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>neg</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>ab1bb5dd0e9a87749f7f7ba3daf55e2ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a4be99ed96eecc1bc42cabd4c860219b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>af130fa508815e350321940fd4d5e1198</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a2160bcb34878e5107a09a1a27c5065e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a445a48b09a630ecaaedcd583555226f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>ac89c08346e59beb6d38092a4a1170e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a89b3aaf4c23ea08b90c60f3bcf44d078</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a639a7823cae9968ba9e1581a7eb1c97e</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>ac4e8b3965e30f4ea687f19d80705ae11</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>ab1938f733ad1df21fc5bf59cef19010a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a513dd64c5058493bf7440565dca06326</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a59b5cf9c6555c2429131ce4a4d035761</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>addc5785b5eb14414167bf9e8ee3112a6</anchor>
      <arglist>(base_port_type &amp;parent_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01272.html</anchorfile>
      <anchor>a969d6d86e515c33caa4f57fac53015e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_in&lt; sc_dt::sc_lv&lt; W &gt; &gt;</name>
    <filename>a01264.html</filename>
    <base>sc_core::sc_port</base>
    <member kind="typedef">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>data_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a07849e7377910f39ac1d01418d03a894</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a6b5f81ed0b211cc7677a4e46a31d56f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a2d3571261eefb2be8b3f1cf3397d101a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aa94d1f4cb3be5685798dbe1722cf40f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::port_type</type>
      <name>base_port_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a37966de8eb3264304683f51a3f4d6109</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a12300548a41340b87cf0f39b6337c455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>in_port_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a5ff3738ef0b1e4b6189a101f41fc3f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>inout_if_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a4e6d388825b3a5dfb0373a596057a985</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; inout_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>inout_port_type</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ad58785f68ab1ffddc34beba5d4bf5988</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ad60611e8083b9e7bbbc491195f76a225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a578f3a49ca2b9ae6ef2ae07d2ea5fd9d</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aa0bb300cd867d66e84a8b7ffa92c1a6c</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>abc810eccac30a595d937efcfa997913d</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aa6d6065772766d00d40016377655df7c</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ade5386707549a37d06f2a1aa8d24dda8</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>af3442470c24fdd464322c26532605d6c</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a4f1b6a59f5bc73cf1dc84511c456013c</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a1a1998a78b4f7251a5c96dc6c1d5bbf8</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aa7d23a2b92b2988ab8a139e467a3e944</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aaf3621f0f8bf7c24d366f2fc6a71713f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a27fc12ebf1ced4675bb3ce4815336f42</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a3ad0420a26c3a672f5b40e70ff23c189</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a8b5ae95cbc4efb954ae1208f5a0b767b</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ade1f847e19c85ecfeaa4d61dd670b83f</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>acdab4c2d2f650ce1a46677066a7e0a8a</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>abeb037b5ab0468c26c43359ef2739277</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a780433ff487ba5fd948b93ebe6f20b41</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>acf6822b7de47e060ee9071e67aa2d821</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ac20a0f9da2ca04fc9d83e6ded163c061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a0a188064f82f657a97b4389e4f350efa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>af8c3af59622c6709a41b3f743e557045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>abe558331260610282223261f310ae81a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>ae0ade1a0ce5ab6287f4e12989ad86608</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>af0a68f8f0a534dc7d6bdc411e8f86688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a5f2bb71c7a7332c03f050cff1d87524d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a572b941f4819730952bfb3bcdc28f2f0</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a2cb8858929d6a0c09a8d2d79156ad141</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a9caff6412d659e0525ae7c4efcc7c075</anchor>
      <arglist>(base_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a23e5fc7627572ab609514d8f76b31f3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a499f7e36a19f32d7a693224e075861fa</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>a0ab18a8f1e133af4bf697d02ecb3ad36</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01264.html</anchorfile>
      <anchor>aefe2646c22795e2a87d3034c98317af4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in_resolved</name>
    <filename>a01296.html</filename>
    <base>sc_core::sc_in&lt; sc_dt::sc_logic &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>af4c915f9909869d16c696b94d2d8cf7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in_resolved</type>
      <name>this_type</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>ae87d0f7fc28eafbc2d13e6b0ef1d9bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>aefb7289b0f9e03b72cab102c2bb38c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>af4d26c526fac4c0a455ea78aa73b7a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a3478aabfebeb155ade4176762840eddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a46a18cc5f750d0afbaf6c77fe696d1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a56f969309cab0e09e3602a7724b2fdfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a4fe2bdaea7cfcd7256e47801db3a35ab</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a3aa9ada006c9d84ad84ffaffd87cca8b</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>aef71b2a8fb107cee4c62401d0f2ebe19</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>aaf23ae8b35edb3cf5d456cd5c3068b51</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a17bbcf288d20ff79ab8588f404d7bc23</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>ac41fd3c1c2ce12767f2db9bca85556c8</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a0a729143d59cbb954a9b9e3f1c73728e</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>af46ad5c7a96cfa742eb71b8c2aa7e37a</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>aaa60d053b8d645b242e063bb1efc07bd</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in_resolved</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>acf3afdb8fd98c4398377526cce9ccca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a35c6b559acf18a6075bfd549cc57e2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01296.html</anchorfile>
      <anchor>a56f61d0c484eac9e57bb143c9aa31099</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in_rv</name>
    <filename>a01316.html</filename>
    <templarg>W</templarg>
    <base>sc_in&lt; sc_dt::sc_lv&lt; W &gt; &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>data_type</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>abbf1d3d083a634c914c9eb3d3c401afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in_rv&lt; W &gt;</type>
      <name>this_type</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>ab56fe371b18e2c6c757065a4ae08bdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>af811b1ac10a6580adc03fbf752c1fbd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>aba89911176130179b3200132d1f0f7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a7d2d7987fd198ab788df1a385db516e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a3e9e90f478efe9d3de7250d48074ce05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a68f38982f3ebe5b2adbdc0034359513c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>acd4a19b512d61ae8d6c6b49bf89c6dfb</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a80722db5a0f5998505033799d09c2c96</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a364976fb9abdd7118e5b0d7dbc234cec</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>afda604c5fcf396f65633cc77bd9fe4a5</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a058812f870e9a84f9b008274efe8e37c</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>ae36942d8c0c226fb18c73a706ab04991</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a9f78a7be3c87e3ac0370af3a267c1c31</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a79c91a73cca07172fa163b9abb9640d8</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>ae84ef3d228fbbbd5739e5251b48dc4af</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in_rv</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>a0cdeae26b70a42e794480a9e0882db21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>aeb11ecd847a36a6440f7c167ef87dd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01316.html</anchorfile>
      <anchor>ac0d83403e7573557086ff99d8614b6f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout</name>
    <filename>a01276.html</filename>
    <templarg>T</templarg>
    <base>sc_port&lt; sc_signal_inout_if&lt; T &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>af3747035f11f23436187612b508a818c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a266c8d53d6a815e50c498d9275148023</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a7f76cb5feda3aa9b09559bd3453155cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>aae16840e40838f5496491b550609ece0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>in_if_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>acb5e1f056ed1122d6ba4b70f6bf09217</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; in_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a32842f739add17f4b359416b51a4b3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a0304a9adc3bc7739412a55b88fcf68b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a2f8961375613da6dc07e30e0edd0c642</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>add366c71a2487fafa60e013f94b829dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>ae9b2ddb5e64ec32298523f05ec6263c3</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a76bfe52e95656115e8557385391ceac0</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>ad1246b2e1269491c486b6657c14c431d</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a346017d0e75d6bdde37a0a8d2e535528</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a81020f6111b90ad05f860ccec10420b8</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a57c030db19b5f602e856d330634b61cd</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a2dbb39d363b4c3c64df5ff53c6df2511</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>acc6001948a9ac801ab8de6782e2fb33f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a62cd3b25606f6e63a98cc05e37746bf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a7acfb3bd0c536af0fb6abbdadbce9eb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a62b27584d65c3afcbd8ea150469002d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a1cb6d424e83dcd2c20f28b215bf2f517</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a563e89f53c203e168883f4a2241cbabb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a849b080b158a808fcf1d972ba7f71fd5</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a137b3889427d9fa22b314f11c0ade28c</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a543d64f1e969165fe88ec328282f9d51</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a370cbbc2161712a21f5f3a3fb0a41652</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>ae2bc3272a5fa3aef50e9af7f2828227b</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a2280c45d40d1e6740488e54034681b65</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>af56223cb3e83c04f6984e92c7e735ee5</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a79e0e858aca1cf999bd83d250dfb9cda</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>aa33df1f4d84b077722d0ffa90d595b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>accf8ddbd935dbb6f3d2394ba6fac3585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>afea5df9eed11f7ac50ae76f4de6cc83d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a3439f2cd7fecc28f9474e7679471668c</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a6896a4ac31260423f8370e0160962737</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a1348a1352ec83f194794bba826b2c525</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type *</type>
      <name>m_init_val</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a44f2904e3a268660aeea5786544ebefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a48904d7d287f15acf27c7eac5d9bbd8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout&lt; bool &gt;</name>
    <filename>a01280.html</filename>
    <base>sc_port&lt; sc_signal_inout_if&lt; bool &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>bool</type>
      <name>data_type</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a819a72490ed13e9366027989a2a39367</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>aa7e30c94d5ec6213c19dbdfe64d41eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>aa735d689c63eaf2d01bfb213988ff219</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ad97235712acccacf159ad767ca11c0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>in_if_type</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a7804798dcbd6f34c19e2ad19446c3f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; in_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a46eb5e4fc7e55e5e7952e401a09ae318</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a80e0fafb1be9b0eebe700c18cb05df06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ae8079e956c1ef7b7bb37c13b2693ebfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a254a331f4731c6161df057f552ad818e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a3aa4cea10e3dcecd2cc8a6630ec942a9</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a7f10025dff8a7e52b1f39fb444f9564e</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a35d1e3d7b2eaf5666c93a522e5dd9371</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a40f89f6124ebdbc8f533a71f87667f3e</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ae29f29508d60137e7aac1ff29bf55470</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a14159a2db109f4e83433b56dac0f6171</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ac3af69cad0b544117b992b22c2301320</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a5116bf05738aea94ed853603961f207e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>af7b08056899cd289a9f59d05c45e7d54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>aa7dc2e15479d153c5659e252c5c89166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a51021a2b115f7bff12cb8c259c368d5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a94951d52771f4845a940a20a6bacf54a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a20863d73ea79e29089749d2a4688cd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ab88ea6d98c2f4848580798fe8c017d3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>pos</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>acf755d44bd65b6811e4d9976c7d1f376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>neg</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a28aaa1e41a3ff54abeaaaac25c521edd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>aa4d1aa835e42cb0147a5a86f7db569cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>af0a350c9b64863648f91c1ae1b03c357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a442f611fa1f87cb7e7e46d52dc670911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a1561003689d978a4e70c5d4f953177f8</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>af8070339591d576fdcd1fabdac3702f4</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ac9e1172fcb23dfe989e75667aad8152a</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>abd40585c11ddced25aaac7ad4d7f7469</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a713a4f4d4158c8ac981611c21fd32f90</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a57cda067855eabf587ba8d1389dad512</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ad957e218bd48ab0f0f1d760c4cc9fa9a</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>aa6e1f3c74bd125eac6dd735543156f96</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ad49b203b94359ac71e7aa8cab5fce0c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>abe255124424d8e881212abd4b9b15cd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>abcf536e52c92bf3521fa2d1f797bd8c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>afa247ef5d936d5f5b4ad8bf39931becd</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>a780dbed75aaf5a5b2b63a12eb2c1dc43</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ac5f3be6a99ed166c7fff029a1a599b89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type *</type>
      <name>m_init_val</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>ab4def99f709e7315083c81ae497e112f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01280.html</anchorfile>
      <anchor>af6c5a02e0603144fb7054789deb35a6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout&lt; sc_dt::sc_logic &gt;</name>
    <filename>a01284.html</filename>
    <base>sc_port&lt; sc_signal_inout_if&lt; sc_dt::sc_logic &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a391487c1e8eac0431f2e1453e0decbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>addd00980cdd3cb34c75521b590221cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>aa5f884b720c59e28de3fa29915f9794d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a74bd6f85e7786c16361a12985752ca8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>in_if_type</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a3c082416c94c26881c97e522e048e14e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; in_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a745e367c5234a741396cc7266805c8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>aef7b661c0b2133fed0d334a299d9b443</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a81793fdf3674de8e28110068ef69b6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a3d08ba03fbe491926b48e73d6eae2fe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a36e486f12b221229b2ec24fc6aa909c0</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>acc2dde598e79d65213097725091dc69f</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a376008a368eebcd2f04cc5e80df36abe</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a6e1b4fd944afda05bae54849b417b728</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>accefb60ef0a17a5ae90f22e7a2b0c0d3</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a07ba3e22e60a02cda90d17832a01c7bd</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>af16573f2a270337ecebbd3fe38dc2a99</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a76e2ff3ae3f4756e4e5da7a43648cf1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a8002a0142dd68a0644a4113f059f5eb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a6075047b0e166af4f044e1b8e7e08d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>ad9b897f4b85b2566e6d712c9a381f341</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>ab2dcddfbdbdb37f194e5fdf52c00e737</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>aa61b9baebde3a7658bd428ed694792e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a357f8acb109529bcd5263e9af04b52d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>pos</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a91f17093d403493a4060edd8e66fac61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>neg</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a754218194a54a35d3f41fa73c670a482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a19dc3910eeb2988e8e6d0f1d3653990b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a62bbe5b49cbca0d4d8e487e81f90193e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a8fc59030909bfc8028031ef27928a8fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a4722bb728f5dd253da7a06cf2260f447</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a8ead229a6d7caf7bcc9969a7d60eb18f</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a5bbc08cf81ac85664ae5f2f834890030</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a73cca5dfe9b182d945a3a57c8b2adc0d</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a3de5daeb36880618964d43ee8435e1be</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>af4e32d16f1fa9e74e58e872340b3c729</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a728be270ddb616be5e7bf71f54ca7aea</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a9ce9f33232e45ba995812402063e3b22</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a5df67f764af3effda458a95a91c6f128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a8f9027c04d925fb25699b4aab605ccb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>ab9841247f11f0b81048f916641e48789</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a987d3df0d2715b8a497f704230871f84</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>ac7c4fe7fad44127851bf5c690b226fbf</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a06cc0f54b64cc364cdea91e26034ae41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type *</type>
      <name>m_init_val</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>a6568b850e2fc01f529ea8766f0f39ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01284.html</anchorfile>
      <anchor>abdb0e87723de6f92d35b5c7380b2825d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_inout&lt; sc_dt::sc_lv&lt; W &gt; &gt;</name>
    <filename>a01276.html</filename>
    <base>sc_core::sc_port</base>
    <member kind="typedef">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>data_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>af3747035f11f23436187612b508a818c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a266c8d53d6a815e50c498d9275148023</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a7f76cb5feda3aa9b09559bd3453155cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>aae16840e40838f5496491b550609ece0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>in_if_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>acb5e1f056ed1122d6ba4b70f6bf09217</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; in_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a32842f739add17f4b359416b51a4b3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a0304a9adc3bc7739412a55b88fcf68b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a2f8961375613da6dc07e30e0edd0c642</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>add366c71a2487fafa60e013f94b829dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>ae9b2ddb5e64ec32298523f05ec6263c3</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a76bfe52e95656115e8557385391ceac0</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>ad1246b2e1269491c486b6657c14c431d</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a346017d0e75d6bdde37a0a8d2e535528</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a81020f6111b90ad05f860ccec10420b8</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a57c030db19b5f602e856d330634b61cd</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a2dbb39d363b4c3c64df5ff53c6df2511</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>acc6001948a9ac801ab8de6782e2fb33f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a62cd3b25606f6e63a98cc05e37746bf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a7acfb3bd0c536af0fb6abbdadbce9eb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a62b27584d65c3afcbd8ea150469002d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a1cb6d424e83dcd2c20f28b215bf2f517</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a563e89f53c203e168883f4a2241cbabb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a849b080b158a808fcf1d972ba7f71fd5</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a137b3889427d9fa22b314f11c0ade28c</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a543d64f1e969165fe88ec328282f9d51</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a370cbbc2161712a21f5f3a3fb0a41652</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>ae2bc3272a5fa3aef50e9af7f2828227b</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a2280c45d40d1e6740488e54034681b65</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>af56223cb3e83c04f6984e92c7e735ee5</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a79e0e858aca1cf999bd83d250dfb9cda</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>aa33df1f4d84b077722d0ffa90d595b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>accf8ddbd935dbb6f3d2394ba6fac3585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>afea5df9eed11f7ac50ae76f4de6cc83d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a3439f2cd7fecc28f9474e7679471668c</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a6896a4ac31260423f8370e0160962737</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a1348a1352ec83f194794bba826b2c525</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type *</type>
      <name>m_init_val</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a44f2904e3a268660aeea5786544ebefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01276.html</anchorfile>
      <anchor>a48904d7d287f15acf27c7eac5d9bbd8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout_resolved</name>
    <filename>a01300.html</filename>
    <base>sc_core::sc_inout&lt; sc_dt::sc_logic &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a78b9f676d20cce92eaeb9a0921b37bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout_resolved</type>
      <name>this_type</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a210761b0a9abea24f04edbc729627f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>acaa8562d5b844172b13b57896c29b8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a8f92edf3b4aa2eb24aa21f0943d64d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a9522b0ea0081d37b651bd5d712ea094d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a85d7a4324e05300817563c0eac72ee36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a5d6cf97d132edd6034b50e28d97892d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a160561e6b7996e217646755478b1055d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a058eba02605735e22137f0ec08738c70</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a51fc7f2fd0730d7b1aef458607561e53</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>aae0a30a0228d7338f792ae7568ac1593</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a754993965369912acce1fe3dfbf4241d</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>ace917b10f9aa99816b2a7cfde11c6d8e</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>afc715f10abdee57eddaf506b159ae0ea</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>ae37ed06cb50d83a164f9740f49a6b8d2</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout_resolved</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a832acde6a2a7851730a9f263f05615ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a54ac42735a3628b932793f45b072320a</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a5c4c6ff6585e11eba331384c725070e5</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>ac883f8da773d5d474147063ab574153f</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>aeedd3438bbe79cf0941ce4d5425d9f34</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>ac7024d7de51997af50039a2eebf8a2c4</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>a9287b5b8703e6ec108044eea8e708063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01300.html</anchorfile>
      <anchor>ab24322d6e60d1ad4644710cec842df6c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout_rv</name>
    <filename>a01320.html</filename>
    <templarg>W</templarg>
    <base>sc_inout&lt; sc_dt::sc_lv&lt; W &gt; &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>data_type</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>af38dbe55ef5758c8f6d26d55e2e91e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout_rv&lt; W &gt;</type>
      <name>this_type</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a2acbaf45591bc1cc5e5255a02d1ea3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a03b477baee56d631c1d1a73ef7287c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a54b734a56216149e4502d4bf1a31fcd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a713c9902e9551422a2683b755e36ddbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>aa5c1aaa7002ea2cd2e4db37ba480f14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a808306c15135428cf209c6ddd71b4b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a668d0e22f892243e291a18dfb65b55d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a14acc6511eeeca9b6e0b7d06ad7ae015</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a9677f890a14e88cfa87a40686262bf4d</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a4548ddd2102f5c73f1205be067506b87</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>adf7ef1e8a5894ce52d78901481bbcc2f</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>ae27699ab3604e35926591ce82e234fe9</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a403a6a44205f83200186fefe577f3e17</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a9f4f3101583cb4f502525807431f9e17</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout_rv</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>aaf7b8ef0f7713d9be96146bbd1bd3871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a4ba88aff5b48102bb790f2179dba63b9</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a67647fe39b8cdce389f51253b6beec6c</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a6b742e3aa579705ad63a4682a174d6f7</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>ac19badb4d911fd40b73b37ab4c2233e1</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a08cd2f008af84ef3da5d4c425e8a6b2c</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a5db5ed88a7767c334fda09eb65095a80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01320.html</anchorfile>
      <anchor>a270b02042ff8ce298f6f249253cb08da</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int</name>
    <filename>a01624.html</filename>
    <templarg>W</templarg>
    <base>sc_dt::sc_int_base</base>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a6eb365ec761203b69dc89480059d0799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>ad10791f98bb31ff83365651410c8b7cb</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a1c739b89783f29d51fe2aaa083849e04</anchor>
      <arglist>(const sc_int&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>aa6261a419a2d9a6fa9c39e2f8bf85d25</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>ab32ac8339129f23857c133855ee7bccc</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>ac4855c30771f76dc9bf8855369488cfe</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>aa5bab28604b35203854ed675a82332af</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>ade671674588e462bada82e5366f9930d</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a2bd25df324daaa25606f2164d78d7bda</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a27cd32a8ed11793b1b6174b9487503bf</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a166e2013f2a1cc6f45aa48de366d3a41</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a677f63923c386164a51143cce313b17d</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>ab0ebbb30389ba379f1446996a9ff8cfb</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>af45082ee84a2ce5c563b9eefcc360c21</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a1b239ad7337f31472e148cc7d2ccad86</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>ab8e2c176ca5f1a3719b5fc6144dd457d</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>aecd9be0b5c0b6aabb70642d4fc9c1895</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>accdc4c4c60d6be24c4032460c2661d5b</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a23c72c8c67a026d760c000a54ded9dc3</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>aa92ad65afee2bd6ce587e44bf5c418fc</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a5d9b7b88210454c16dd25b31fc1257f5</anchor>
      <arglist>(const sc_int&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a4495e6a2509d4e776f4873e538411679</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a8d7bc854600678087705fea8a8cd6335</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a90510ec4f4aa170c8076f0caea977839</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a08058ad9f77dffcd9fe9bbedafc518ca</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a2f9f1c05f2b341d107c593fdcdfe9ad7</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>afdfb54f76f533c472103d15950616808</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a037afe0dbb5418e908ff0214a07cb0f5</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a3e9e2aa8306911ea47803994f7ae20ad</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a3dac4d5e6c6784e89bf7f6b2580b3af9</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a7195de76080dc67e97cb64af2b4fc00a</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a3dc78c3496f2dd88adc3c470e071a29d</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>abfcd9e7b11bfa6199c056d28dee9a3f6</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a7fcee0674e859a482e4c81702c45250f</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>ae2c5aeb2c2511e39d902bc7d2e03f9be</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a7f89258024a30d8239ffe86b9f9e41bf</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a871cdc435ff78841b6a8765a1bb81cff</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>aafb4d09886a8fd5f1b441a0eda2ebbe6</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a0ab43d09282a2109be2e6d07a669347c</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a2c9d7ff80bcce034ec855e8103377658</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>ac20b23214fda212ce14683558e0379f2</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a3a00656b79a3449b8c74aa1c79ad047e</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a52568529449799c764f6da13618655f7</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a09b04f7477d9b67690da99b20415c657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_int&lt; W &gt;</type>
      <name>operator++</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a0b889ec08c9dae86c235128997db21a8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>a525412be3edb7eb6df8cb497b2dbd48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_int&lt; W &gt;</type>
      <name>operator--</name>
      <anchorfile>a01624.html</anchorfile>
      <anchor>abfc9e51480b946857eadcc2b954a227e</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_base</name>
    <filename>a01644.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ac9e33469bd6e223c2e0b7af14a89fb5f</anchor>
      <arglist>(int w=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a344d5808993f50b0fdbc4a992e7bc1ae</anchor>
      <arglist>(int_type v, int w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a398e45171516ec10a06759aa5b509608</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a007ec30c01b3421da06418b8fec1baf8</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>af0d3227864a7b152f39355c1c8562156</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a5a5e82c3e48f363bc3bff35abf8897d8</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a260699089ad9121743c6d4e542eab9e4</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>aec8f352178a6b33716d9d56e6c6685fa</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a4dd2f344b265aef73e12fdce73166f85</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a7fd95c0201ca0d47a0bfa11e8bee8c16</anchor>
      <arglist>(const sc_uint_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a29295edf8cd49c07fd03ba412a07b0a2</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>aa5aa3cc34f166dd04f1a25cc8311e061</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_int_base</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a329db42c7c6ea1f261f1020a39a2e5f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a0cd79485743c8aad54f23055a36c2af9</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ad55e7f3723499e7453b9f6e13f632f8f</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a014735b8fa73794c66305eadfb43d441</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ae81c5f4a4af88c85dac97ba504bf05fd</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a4d66bd30339738207d1d30161dad8edd</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a80a3efd92a89c4dcf6d2589ae54ccdda</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a48dbe9dfabcd89c49c46aaa4499408d2</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ad972eeb6aaf5696d90ae84f24d019bb1</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a6169de569e45f39772ad726111d2d6e0</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a51d287c8ce38eb5cceb7c80b48b9e676</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a04520d105f378ac8c388b749b01ef218</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a1362a8b2f61daec8d252f84701e62157</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a83efab1ca5682b33efabfab8e4e51c22</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a1c4a1cc6abb6523e9bd42db3e6fbf3d0</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a24b0f274b94c2bc8b7806b4642b9a132</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ab2b455fc0fe37dc9ae70487e392f37d2</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ac32936c2fa5899ba4a398d645097c393</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a21633f72d60c08b37ec7a5ef848de639</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a0a2fee68cd7b99bb9728c0441e5e9f92</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a47a5e110a9f0ef4301d02d3e23f38773</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a182622ad4834f8a76910ee6653916006</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a6ac4557c6446cd5d0903c52a074302f1</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a088997c81ff1c535f858ddc21826d5f3</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ac38b0262efb36cf3f7be2e3a2a2fe792</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ae3bdd22c8b43f1393ca166aa910754e6</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator++</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a617a369faf5846ad360f56c44df89421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_base</type>
      <name>operator++</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a5ebc241ede9b278552b808d0fe9dda24</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator--</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a53ae4a5643a78c46830bf3cebf642948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_base</type>
      <name>operator--</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a92efe2f4d85d2b4237ed277aea91fbe1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a6281d62eda2acd7d7909c3a502858876</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>aadf1dbfec66507d38c1ad0bfefe3d59f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a8bf268141be515346e2776245bc12b8e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>abaaa2e555a75ce3ef3b2ac95187fc574</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a3e73a0a4b9779f8351aba766341bc783</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a6a423ecf00c9b373a8199e5ea4e7ad2f</anchor>
      <arglist>(int left, int right) const</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>af246c9eb52f73c4d0f5d6335ce0b194b</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a08a8aa2a444461e6d05a8129987afd7e</anchor>
      <arglist>(int left, int right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a6b84690d94eee5a186c439c4c9fd7197</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a49afa1d416d160a0a6a6bf45cbca69e1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>af0ac775b3da1e640ede99a0276a8409c</anchor>
      <arglist>(int i, bool v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a4d8214b0661f5ff5fe15ce3493284afc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a775be88e50a3166c7e72bb7f618d3615</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ae05c0c8b6a8f0390e31f47ed198028f4</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a5134341f6bb90621357fa139249d4bbe</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a1a7ead80d31472d15038a50a1c4e9282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a994bffc39472e47711980ab96371a06a</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a36afd20c048386d03121811accec88ef</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a698f1c923039a8ba9542fdef661679ae</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a401f08b4a82b9dc07ef9105bb6891f2a</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>adb16c926a4bbee5eaf257eadf31e75d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ad67856f307ed310c13fa44ce295aa367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>afb8d7c99bd3b5cf0dcc42f8b49eaf831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a7fd59eac154fa3d998298c4de30ce8e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>af161dee54019b8cfe889b1434671d534</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a98d8815c8d0d3b5faf2014af02bed43b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int_type</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a70d61a62b06ef36485d570f07703d0aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int_type</type>
      <name>value</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a5f6029d571c5806297d4547cfb9ac83f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>abe245d83fe7789f6290fc200c0597a5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ab2789d660b047bbc91450703ebd89dd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>acaca0604439db94e79f16f7132fc2ca7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a6dca0d75811e8f18d1caa0a5823a5c06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>aea0677f082ec34f850cae1398b6a3875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a97e096aedd7690443ccfc1f33fe1ecc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a7ee0bb9bd5e41b5d7a64ecdcafe8fa28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>long_low</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a11ff75b32a076bbf65bc81ff1751b7e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>long_high</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ae3e71706529a964bbaf467a0290223d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>af67c7a40d1615e82bfc5e7a400d7dfbc</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a273618393c2e3d3a5dfe8488ce66e09d</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ab763a5c03abf6dcd1a1eeb101a31849b</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a6591d203159a4f9bb05b48cbc185de5b</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int_type</type>
      <name>m_val</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a69bda6fd2415d8170a90f97f423c7550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ab0a15890fec85bb8c9e6f064df9fe3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_ulen</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a5e53a54a8f409334e867c0b301f4dea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_bitref_r</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a832e7fbbbae729414711e883b53b1115</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_bitref</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a666d28ff3be8bb80f1c482ba0e23c17a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_subref_r</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a0878e2ccfa0a95d732215055930407ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_subref</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>ae8b3b888b1e0174b7e693cc90c248743</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a4f0f21228ac0906d02ce09b32eb3108b</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a6115840dac23c04506dad4efa517a21e</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a71fb05bdc51badad3a6a4ed30c93c2f2</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a8650b716b83e8b172b987ba2244d849a</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a30b7b76737c56192742b837b1a9795e7</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01644.html</anchorfile>
      <anchor>a91e8462d33833c1a815866aa4dabdc0e</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_bitref</name>
    <filename>a01632.html</filename>
    <base>sc_dt::sc_int_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_int_bitref</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>add50cbecc97c418cc271bd227bd7769c</anchor>
      <arglist>(const sc_int_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a3633e5b60dd2d4fcc8bde3feb6161caf</anchor>
      <arglist>(const sc_int_bitref_r &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a48d8d1f4c546e35c25856f2d7278dfc7</anchor>
      <arglist>(const sc_int_bitref &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a2c4d5ac304bc4a35813c67a7577b5ad8</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a541ea0f83cec6706708a3189053759e4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a9abd896537d13317a23733a0a85ed07c</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a288949cf4dbeda0c932e3dfda56c99aa</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>ad30d4af9425d95eac4361e3b43e65ceb</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a6f66318507909ef4851b75d159319a02</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>af9167450244618b64e87a935ce4c3ae3</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a66e889fc92e5a9cd5d59f02721bfef40</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>aa1a9c72b5319de0325105f8b7a901ccf</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_int_bitref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a66ae07f759970802c7ce8a46a9be39dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_base</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a1021395579853152106ea7ddd0051f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_int_bitref &gt;</name>
      <anchorfile>a01632.html</anchorfile>
      <anchor>a5a0ad9f96efffbf7d094b989b131bbf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_bitref_r</name>
    <filename>a01628.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_int_bitref_r</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>a05667fe17ab8fb056bf9aaa9c8a91551</anchor>
      <arglist>(const sc_int_bitref_r &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_int_bitref_r</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>ad56aa3d3bb17412f1d4bb9ce0cd5258e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>a58aceb88aa7210a9be3de1aaac19907a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>af63ddb3ffbe3de70a1a56fb9304fc9c7</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>ae81c21d529fb7064d1dd103342401b10</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>aa70260f84495dfa2aa0eee6e638104b7</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>ac3d828422fe49cdf210bbfd46ba64330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>ae7eec4ba99b07dbf74b6505628187524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>ac6e99d7f4772c06c134b44e297c21687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator~</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>a1ef2d368ced432068120a3a3ce9a2049</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>value</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>a90348a3b04aeb67a1003d61184fcae63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>a8db131dd1b601b029f198058d758b78a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>ad3ec1e6b343df514fdde713fac5885f4</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_int_bitref_r</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>ab58ee53dccf8e989b78d116be4b64b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>ab4a8fbb77a05225f241a0bbaf8823f2f</anchor>
      <arglist>(const sc_int_base *obj_p, int index_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>a0e456cfac2084a2e10de1abe769c3cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_int_base *</type>
      <name>m_obj_p</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>a0f3ada702d03ff5579d686600aa55ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_base</name>
      <anchorfile>a01628.html</anchorfile>
      <anchor>a1021395579853152106ea7ddd0051f7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_subref</name>
    <filename>a01640.html</filename>
    <base>sc_dt::sc_int_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_int_subref</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a7b221597d8d4ed820ee65bb0f383d064</anchor>
      <arglist>(const sc_int_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>af6d75ea9288bc2c34c944a31b26932bb</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a784f19769071da07e06e0a3f08ad05eb</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>ab7843377103515296ac1f95837839d2c</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a95866e62d807acea6b58e87218b4b5f2</anchor>
      <arglist>(const sc_int_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a462416ef3e5fc2f32fb4592917b46406</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>ac1126113ea9eed08e26f77a70653ff5c</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a72af4c6f3f3542c3d6f04f98e6864a1c</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>aedf9f057088f6fd6a0bd3e45a7843cdb</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a0f4ffe4dcea857787c532a2291e91ad7</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a61e1584a70f5409bdec4ea11b05289ad</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a0e44e9d4b0e86362f111376c48f7a53b</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a78c82249ac3beb613386c0f293c61cc0</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>ab97e8a42e490d74fb3e9241395959676</anchor>
      <arglist>(const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a37a6cfa0e40422e1062cdd669a54d342</anchor>
      <arglist>(const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a59af7de7c1e472519d91c8900fc9b4df</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>abdd8c70e12b7b8c3ef1001b5df456a1e</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>abb2c53ab49d1a903d2795ce002a68d8f</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a9a38e6fec4213f8118a49e0601e8f4b0</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a04d64deb99ee11ac2bfc26c3f0ab09fe</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a6cc2364e0788ab579738fa296b72f51a</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>aece58e97f750df99434d085564c2b650</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_int_subref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a7f1ce8bd275ab7ba44d39273623f0e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_int_subref</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>ae71af837fe4e64570167305f61c4500a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_base</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a1021395579853152106ea7ddd0051f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_int_subref &gt;</name>
      <anchorfile>a01640.html</anchorfile>
      <anchor>a5c1465b91f06a92582af7627024207e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_subref_r</name>
    <filename>a01636.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_int_subref_r</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>ad168d8921ba02b5def000600503dd7cb</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_int_subref_r</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a18849690d300e3517a227fde571f4b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a6767502d48b1667b74af262dc2226095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>afba719866ed6118ad51b07235301704a</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a1bfb0e7614959cef8e8f6645dba830dd</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a38966f843e66baff95b73254cbb84b23</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a6fcbfbf13c38af5323b3aef61c12d2ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a5a2d5e7c5407afeaab3a64c05f874aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a73a593cd3ab4cb4223da6320d1063478</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a78312f3b1b2649e2543a67725e537316</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a4ca57d16e01576e5c41222534a80ff21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a3734cf4056ccccd0be76bbf4d826bf29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>aee144166b0e560eaadcc75e052e5f90d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint_type</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>aabb19eac2da7f58a406e762b28b0e818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>value</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a69227f09f024bc0940a9950397e760cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a6572271029438bd803781f6bc3d8010c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>ac2014abbca2dfa51591c5531fac22c96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a9a8a61cdbeada0be1c149dd0907d77bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a67234455df8b6a0fba8d3654abab3fcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>acd93524ce8ea45f8f8ff9cbe4764d012</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a11410340f3d8cb90efcf7d0e19fe085a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>ae9b69124860bf1b7bd4245bb8068ed3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a5bd302767b42fd61571515e8d4760f85</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a404ee36032aa63c73ec09de911340482</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>afaf95fd68552b4cecadb0ce929f7df5d</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_int_subref_r</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>aad0676130601e6bd0936e4fa47fe70a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a8b6b4aedf11d6e54ee34736fd0efe84c</anchor>
      <arglist>(const sc_int_base *obj_p, int left_i, int right_i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_left</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>aa9d9ea9251d04fbe1e9e8b673d788203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_int_base *</type>
      <name>m_obj_p</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a157cd6fc63a4151b1f8e24877cf13726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_right</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a28667f00ca6585e95d07022abab99d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_base</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a1021395579853152106ea7ddd0051f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_signal</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>a43d5854e57b3e8e6ea60fef173c5cbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_subref</name>
      <anchorfile>a01636.html</anchorfile>
      <anchor>ae8b3b888b1e0174b7e693cc90c248743</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_interface</name>
    <filename>a01180.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01180.html</anchorfile>
      <anchor>a7c93074c41900149ab2ac84bd6787ae6</anchor>
      <arglist>(sc_port_base &amp;port_, const char *if_typename_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01180.html</anchorfile>
      <anchor>a3f0bf642e91be47772a3cd74a76a98cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_interface</name>
      <anchorfile>a01180.html</anchorfile>
      <anchor>adbe820669c3473b5f6605a842b0b0835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_interface</name>
      <anchorfile>a01180.html</anchorfile>
      <anchor>a683561f63d51dc7665a0d205ecbbdf43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_join</name>
    <filename>a01804.html</filename>
    <base>sc_core::sc_process_monitor</base>
    <member kind="function">
      <type></type>
      <name>sc_join</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>a4cde2217e9dc310dac6e171d4beaa401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_process</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>a2f52f9900ea49d9631085457d06c76d8</anchor>
      <arglist>(sc_process_handle process_h)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>process_count</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>a0f3fee55d73a3905714e521667833c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>signal</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>a4b27527d947fa209e590be377fc1bfc6</anchor>
      <arglist>(sc_thread_handle thread_p, int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>a1f91b77504f459ece8224c7609850383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait_clocked</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>a5d33269959003ddbf5d5d80a1a1fbe1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_process</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>ac464f33542cd74c2c9ff38fec7da4711</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_join_event</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>abbbe87abf1ee04cde953c1c7785fd5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_threads_n</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>a79f6fbfcfff4a276b50f59c15a9476d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a01804.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_kill</name>
    <filename>a01796.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_kill</name>
      <anchorfile>a01796.html</anchorfile>
      <anchor>ada67131f70d6e09f1bfc3aeaf7e3b265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_kill</name>
      <anchorfile>a01796.html</anchorfile>
      <anchor>a8a6aa9b5a087f63d477e39b725a79fd3</anchor>
      <arglist>(const sc_kill &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_length_param</name>
    <filename>a01648.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_length_param</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>a459f0232ff8ab64b8085bdd74989d802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_length_param</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>a4d780fbe8be07bac6d330379a4e63524</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_length_param</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>af0810763aeba01375aea76dfc32224e0</anchor>
      <arglist>(const sc_length_param &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_length_param</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>ac42a239d90b8338a69a34c624a37f20d</anchor>
      <arglist>(sc_without_context)</arglist>
    </member>
    <member kind="function">
      <type>sc_length_param &amp;</type>
      <name>operator=</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>a44a89299fefff85bcfbb3f1e17821c6d</anchor>
      <arglist>(const sc_length_param &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>len</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>a2b91174e34e1b3a733f1fcbdf2544da8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>len</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>ad72c0b41a661e5be193b1fc78a4514f2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>a45f2b1d8591129f52468709a19b04a03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>ac73632caa20365ad7b10b67a58b6d537</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>ac1af178f8276e62d25d365dc4a86b683</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>a74b99abfcdb8e09539028bfe87351ec4</anchor>
      <arglist>(const sc_length_param &amp;, const sc_length_param &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01648.html</anchorfile>
      <anchor>acef731a259f2de938398349e2d116fc6</anchor>
      <arglist>(const sc_length_param &amp;, const sc_length_param &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_logic</name>
    <filename>a01400.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ad10a94e99578555e67de48e21726cac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a5fe21ab6ff6a297dd402820463acbccf</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ac1f013fb5acc645a9c0b16747e7cb7fb</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a323c8eb380ee0a04958386ab58c4ff8e</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a709e425a30222fd43cc2dd93c9eefc4b</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>acfdf6258e20568d997668f48cfedb9a8</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a102aeb3d0ea1a8efba1513fa847deda8</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a86e905f8b0847ca768369c51c59b04b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>operator=</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ac2e494e6b547e9cd10523e8639a3821f</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ac31b9cfaed6659fff0fa0d905452396e</anchor>
      <arglist>(const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ad3faff29db3852c96caeb6550bd570ea</anchor>
      <arglist>(const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ac87af0b5f5e2ca30985bb336fbf31646</anchor>
      <arglist>(const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator~</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a9b2fff92a3522268fa94142873343472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>b_not</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ad79ca8c4ad9f8b394898865c88a7ca97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>value</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>afc609184b47832731effc61ee6e9c6f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a838768d767602612c9f38a9bf759ee2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ae98968920229a02e050262e0e5c48c00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to_char</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a8c9eaddeb8cbccfcaa01e777b9871572</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>af9e8ba6acfbb0e2e94bba07a98b4f9aa</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a8e8e1ad7065b87d05d170f7e6f743d95</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a88f70bdb457cf72df81321e25725b4f9</anchor>
      <arglist>(std::size_t, void *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a72376a74a6bd1040bdf0b93c85fc6f65</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a0e1654143b030eae7a8918e7d6cef794</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new []</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a18079120a77c0289a0942f38406a5cdc</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete []</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a00514f68fff162909a765b222b657750</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>char_to_logic</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a5a0eb01c500c4590069420f836013991</anchor>
      <arglist>[128]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>logic_to_char</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a85abac6394b82202d7ca10b1e7c3fcc7</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>and_table</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a57128ae6fbd7936b64a6c5e437b5736d</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>or_table</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a02dd6744bcb364dda697e967f0486d89</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>xor_table</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a3e04869db50ea30eb687be7af97db2ca</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>not_table</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ad0bc26f8605804f9a9fb0b642cf03fac</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a280970a378e1e3662223c8f56f232e59</anchor>
      <arglist>(const sc_logic &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_logic</type>
      <name>operator|</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a785d510fb91a92610f554e8e7396c7d7</anchor>
      <arglist>(const sc_logic &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_logic</type>
      <name>operator^</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>ab5208d2010afe2df1090805c717e8908</anchor>
      <arglist>(const sc_logic &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a835719dac4616e2038f84745946b638a</anchor>
      <arglist>(const sc_logic &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01400.html</anchorfile>
      <anchor>a12429bd34a1ba68c31599df0ea20d2e2</anchor>
      <arglist>(const sc_logic &amp;, const sc_logic &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_lv</name>
    <filename>a01404.html</filename>
    <templarg>W</templarg>
    <base>sc_dt::sc_lv_base</base>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a47e10221766232a99e6e8199bd332fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>acfcfb2a5fc9b2e875e2adb846c1b7ad6</anchor>
      <arglist>(const sc_logic &amp;init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>ac6d70e3188fc7971a387e1b2e47ff0ff</anchor>
      <arglist>(bool init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a3e2ba1431339a92e965b4a022dd8af7e</anchor>
      <arglist>(char init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a13aa13103addab6a3397cdced73e4500</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>ab7a8a8afbe426e20a0c496139d41a3b9</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a3b3e22061ac590357338691d5c5b2e15</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a52bc524245c08af27d77a17cfd653ae2</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a5018b3eb725bb5881febf9f9fd444e03</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a93a9c75913f933cc93ae09ef33edbc45</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>aa29fe94101883cb167ce5c21820ea4f4</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a5e823f83dcf6dd02da6ef81a99b88067</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>afbde4c5241541046ee68cbb746b3800f</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a545673a6ef2b6e151496be1767a8270a</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>aafd604d3d91ea3551056e195cf6c938c</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a9e1a1c665be9e393b5d41bfc7472c19a</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a9b436f4ae5da64702d88dfc40be804c9</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a7979cd462767a6000e3032ce5f3297b1</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>afb4cdfd6824dd974ff3c153424278d30</anchor>
      <arglist>(const sc_lv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a24c9eb449f798ed57182e749f1ee53af</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a809b4bfc37a3a5df0c71f52f471ba1de</anchor>
      <arglist>(const sc_lv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>ad32b14da753c8a05eec132537fe9aeaf</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>aa95b63f7af22da7391d395db1bf25ed7</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a2c80051ffd5b84cb03283da497e78a64</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a3d26c4b6d1001cbf6945d69dfd651498</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a67c662a1053274595835787fdb61172a</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a1a113dcf61f9551348d92fcee5193091</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>aca403c82182eb47836912606a499b00f</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a55fcb027359bbb9218f770ee478a3ef6</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a70ead4b5c500cecef5badb94b81a45d9</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a39afbf2322883483f13e865ffdf8ee5a</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a7473eb89119ed0839721015536c98ff1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>a096ad38281fcffe8793c589fbeb08d76</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01404.html</anchorfile>
      <anchor>af07a8c52b9be5ab61ef9d8979b20cdf3</anchor>
      <arglist>(int64 a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_lv_base</name>
    <filename>a01408.html</filename>
    <base>sc_proxy&lt; sc_lv_base &gt;</base>
    <member kind="typedef">
      <type>sc_proxy&lt; sc_lv_base &gt;</type>
      <name>base_type</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a1637d1d718ac9fbc5aa1812b8fe30236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a70fe4ca54e356662b01f4bb12b8da58b</anchor>
      <arglist>(int length_=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>aad177abe207e9e9b3363a203b373b9fc</anchor>
      <arglist>(const sc_logic &amp;a, int length_=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>aa98894694fdc1d9e0d5bf265b110ad57</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>aa566f8951014f4c1e4a3eec3c02358ad</anchor>
      <arglist>(const char *a, int length_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a953fd24775d6f831e4225954bc083c54</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>af5633429613bceb85e73c0e7792b3b48</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_lv_base</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a5e5668d29dcc1efc99ebedaccd671471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a006f027687690b9e9856133fe8bec5bb</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a228493dbc768ca6742f9ac5d9b9ceb97</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>ae2add7dd68fb1b418b64779e4ed7184a</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>af8db1660ac5c04f08308e0907b4c6da5</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>ac544c50ed9431b08b77cde8bbf765b7a</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>ae014398aa408146d399d52eae1fca1f3</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>ade47f8c836265e4887758b722d8d6933</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a585c28d8ce1441060579b853a60c4d97</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a706b77878b393dc1391e9547c053d96d</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>ae561d39ca1cc68db3f66e5d8e0cb7832</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a93d1137cb5c8826c73c60531a16c24b2</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a343acf50ceeacc1da9efd3b5cf75bd98</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a4479fb90107961a60b3adfd0b1b15310</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a0e7353dc9a58075c75a1092bd0311a2b</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a9caad4d191437e1382b8a229b219c55c</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a092f521a37da5571fc8f4dd3f5555958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>aedf408497a60bbee2bfe3f134f9f55bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>get_bit</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a98fecfa6cda240601fa7c3ecc954a339</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a9c8b11e67e45a2cdd3e62857a1c421fb</anchor>
      <arglist>(int i, sc_logic_value_t value)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a30dce708a138d220e465114323458008</anchor>
      <arglist>(int wi) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a4f94410d1b82d943619028bb800c471d</anchor>
      <arglist>(int wi, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a54f49ba5e16df9e65c0aa11793dc71f6</anchor>
      <arglist>(int wi) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a83a47ca0f46e8fc8337d9b8f9edfc93a</anchor>
      <arglist>(int wi, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a395e2d0989319719b560e4cb728a5223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a8b88b87f3e3110056b3ff6be25e94af6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>aa8c3a52555442570eae3b2223cf6952e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>a775a0d4ffd2f5c3025d57ee4424846e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit *</type>
      <name>m_data</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>aa20c7a5422cb62ab42a0b3723d403384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit *</type>
      <name>m_ctrl</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>abcb0c6b0d29a625a7c32c39f476fef15</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bv_base</name>
      <anchorfile>a01408.html</anchorfile>
      <anchor>aa31c8f5d1ec5ab3b45594163c614f9c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_lv_resolve</name>
    <filename>a01308.html</filename>
    <templarg>W</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resolve</name>
      <anchorfile>a01308.html</anchorfile>
      <anchor>aaaeab3aeb3115d223f2e2f92d25ec2a7</anchor>
      <arglist>(sc_dt::sc_lv&lt; W &gt; &amp;, const std::vector&lt; sc_dt::sc_lv&lt; W &gt; *&gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_member_access</name>
    <filename>a02128.html</filename>
    <templarg>ElementType</templarg>
    <templarg>AccessType</templarg>
    <member kind="typedef">
      <type>ElementType</type>
      <name>element_type</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a41d3fe1dea21a4f85fd9520703b859b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AccessType</type>
      <name>access_type</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>adc9938e357cdacf4cef0f9f3b5134fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>access_typeElementType::*</type>
      <name>member_type</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a61e5b7fa42b4aefa59fb985827b855e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>access_type</type>
      <name>type</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a02147e9dd10e0322ecf3cc20d4e86d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_meta::remove_const&lt; type &gt;::type</type>
      <name>plain_type</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>af6d26ae6526400211cdd12ab60204d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_meta::remove_const&lt; ElementType &gt;::type</type>
      <name>plain_elem_type</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a4a99b73bc7229734a3fcd741fecf6346</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_member_access&lt; element_type, access_type &gt;</type>
      <name>policy</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a4b97c6e39715c9529dd3bc4e452782d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_member_access&lt; plain_elem_type, plain_type &gt;</type>
      <name>non_const_policy</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a99acd781c6f095c8bbc31f36d1b5d214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_member_access&lt; const plain_elem_type, const plain_type &gt;</type>
      <name>const_policy</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a63e150b0f1accfe0092e9cbae7bf52fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_member_access</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a5b77d8646e132130ae21208224ede865</anchor>
      <arglist>(member_type ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_member_access</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>a99cf6f3272be765ea3ae2d546cf05f88</anchor>
      <arglist>(const non_const_policy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>access_type *</type>
      <name>get</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>abab778a8724e02628675c56d192b7aa0</anchor>
      <arglist>(element_type *this_) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_member_access</name>
      <anchorfile>a02128.html</anchorfile>
      <anchor>ae6425eaea4d456afb050ec06590aec2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_mempool</name>
    <filename>a02020.html</filename>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>allocate</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a4a5a52a0b4e95294146ce943483f3c08</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a53eabddd014b14e3a5209ff6bec60783</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>display_statistics</name>
      <anchorfile>a02020.html</anchorfile>
      <anchor>a31669d33450a2dd611fadc74ddfd233f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_method_process</name>
    <filename>a01808.html</filename>
    <base>sc_core::sc_process_b</base>
    <member kind="function">
      <type></type>
      <name>sc_method_process</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>aef14c1881d67aa78bdf1df50a35f3cbc</anchor>
      <arglist>(const char *name_p, bool free_host, SC_ENTRY_FUNC method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>ad3910e7318dd634480d35c3e32bb405b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_for_throws</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>abdfa4e3d64a5c3920817e65522b4d459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>disable_process</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a3ba4bcd1a5161de72b1d88165359d743</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>enable_process</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a19c4ef30fb89bc52b8171df54afc2b0c</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>run_process</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a335868e25152ff0673a3b933f3896ca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>kill_process</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>acc3fd200c8a01b28aa9873f15a6c63b2</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_method_handle</type>
      <name>next_exist</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>ad093c4fbabea4426152be4442b38275f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_method_handle</type>
      <name>next_runnable</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a639ec3b83e529d2aadaccda1bb5b991d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>ae1fcd71522389c44dd2be04e365b2d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a42046a8527c3121071a82ab76e43732e</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a4bac893a79c2b92195c4509290e4b3aa</anchor>
      <arglist>(const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a7965844240f0db8e8ffeb86c83256e2c</anchor>
      <arglist>(const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a0b97578001f92264e2e4659d0e43758c</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>aefa1d89daeb0c6f67c6e7ed9d9bcbd2c</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>afcc913248deeb705227ba97c1e5fef28</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a16f5413088dd7268c40effda6622b5b8</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resume_process</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a787cc559f1309eb7b31c771fb00c98e7</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_next_exist</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>ab2f7c9e81389a41f661f01ed950a3251</anchor>
      <arglist>(sc_method_handle next_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_next_runnable</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a82e1f0fda0dbe23f428383b200ae1b04</anchor>
      <arglist>(sc_method_handle next_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_stack_size</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a6a4c1452dfb33d4957673f2bae67c49b</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>suspend_process</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>ac9f9597bb610daf904816ec883faec67</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_reset</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a9dc781dd3a5887593818f92ca0cb5983</anchor>
      <arglist>(bool async)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_user</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>aafdc10603457af55300744211f7fc3d9</anchor>
      <arglist>(const sc_throw_it_helper &amp;helper, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>trigger_dynamic</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a2a61dbd90ca15f462063c3708bbca671</anchor>
      <arglist>(sc_event *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trigger_static</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a582fb436394d07b722dc1e7c4d18151a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_cor *</type>
      <name>m_cor</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>ab2906fe78ffbf833d74eb8b61d3f3fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_stack_size</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>ad05f675d33cf02d196d20a5e7474af82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_process_monitor * &gt;</type>
      <name>m_monitor_q</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a48cffbc5c0e83c45b451f98f70cd7bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>sc_invoke_method</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a0c408a59b7d4321afcb70bab92b8cacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_table</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a12ba92f261d993145709693ea4466b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_runnable</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a7daf768cb0d25e9950151ec7079decbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_method_cor_fn</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>aa1d6ba1b5b8042513898f6cfb2d268de</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_cmethod_cor_fn</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a71be773b8a8751bacf57f8dc6ee17034</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>aad6025c1a9dbbb9ed0e446a1dff51895</anchor>
      <arglist>(sc_method_handle, std::size_t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a8dc1ba8f2999d29dd629c097285844c0</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a79707c621daca89ab043dccfca40491e</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a5133b91af1b07475cf3a70166eed2cfe</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a053b8034635488d2d0d92551297e9775</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a79fff9128c453572332e5f714799da2b</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a9f34197bbe3568b1574053418206f772</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a60e2b90dbd2c9d40b0b706ee441bbe42</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>next_trigger</name>
      <anchorfile>a01808.html</anchorfile>
      <anchor>a5c6b433437532ce12f87c6261d67dc08</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_mixed_proxy_traits_helper</name>
    <filename>a01448.html</filename>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <base>sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_mixed_proxy_traits_helper&lt; X, X &gt;</name>
    <filename>a01452.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>sc_mixed_proxy_traits_helper&lt; X::traits_type::type, Y::traits_type::type &gt;</name>
    <filename>a01448.html</filename>
    <base>sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</base>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_module</name>
    <filename>a01816.html</filename>
    <base>sc_core::sc_object</base>
    <base>sc_core::sc_process_host</base>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>sc_get_curr_simcontext</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a1afd5043411d44bfa24e99aea9d46998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>gen_unique_name</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a6753b8c866a173f206ddfb6960f4a866</anchor>
      <arglist>(const char *basename_, bool preserve_first)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a24afdf1e309c182a12de04cfef4c9701</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_module</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>afb7f97cf59ddfcfb355b0c00c958c0f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_module &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a7a1515fd5090cef60b8cd0b273884039</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_module &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a2d65bfb7b10be8248eaab1a19a485a7e</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_module &amp;</type>
      <name>operator,</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a93d62836da151a413238b0008ded49f6</anchor>
      <arglist>(sc_interface &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>sc_module &amp;</type>
      <name>operator,</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a288ffbce806f63300ba974be2963591e</anchor>
      <arglist>(sc_port_base &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>const ::std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a0bc14e879a3bbd69b6c15de3cc150063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defunct</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a459def9bb2b824ad85b9f3d1b4586af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a289fa0b8734ccda07b249a1f77c1317e</anchor>
      <arglist>(const sc_bind_proxy &amp;p001, const sc_bind_proxy &amp;p002=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p003=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p004=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p005=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p006=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p007=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p008=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p009=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p010=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p011=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p012=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p013=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p014=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p015=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p016=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p017=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p018=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p019=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p020=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p021=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p022=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p023=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p024=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p025=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p026=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p027=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p028=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p029=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p030=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p031=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p032=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p033=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p034=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p035=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p036=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p037=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p038=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p039=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p040=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p041=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p042=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p043=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p044=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p045=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p046=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p047=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p048=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p049=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p050=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p051=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p052=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p053=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p054=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p055=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p056=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p057=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p058=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p059=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p060=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p061=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p062=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p063=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p064=SC_BIND_PROXY_NIL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a8ee8f0171173bb4bbec2b38b9011e0ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>construction_done</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a3e77bd590c5e801ae904eb17bf1fed61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ada6b8ecb742117ad65d36e5da110c613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>elaboration_done</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a027ac2d66f268289655dd3f9fe406497</anchor>
      <arglist>(bool &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_of_simulation</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a8f90273a6c0330bd891224973c185bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>start_simulation</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>abc724f9efb87e54f67d5607ff87a0360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_simulation</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a7e19e292351567c8efab15e7daf9a398</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>simulation_done</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a263f40eb8f609215659f462cd7e53fe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sc_module_init</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a8ade4e85bcf02e8bd73fa0355464f047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_module</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a1d63603202313bc8dccaa9f381731b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_module</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>abf2b2376796c66293d45909f8d557f17</anchor>
      <arglist>(const sc_module_name &amp;nm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_module</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a08b1c1c9a8d238763e6078c22a56f39a</anchor>
      <arglist>(const char *nm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_module</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>aafee55c32edfcf52c922d5ffab208476</anchor>
      <arglist>(const std::string &amp;nm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>end_module</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a335469380ccd71b230def8ba3f8c62dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dont_initialize</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ac8c22b97fd5b6841347eac007216616b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>positional_bind</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a5a089da7063b255a691e2f45c8a840e0</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>positional_bind</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a87caef8ebab3a9e89e8cb8fbd02d6aca</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a598ffaf3937a10a4bcd7878281e5bb9e</anchor>
      <arglist>(const sc_in&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a174fedb308fd635e8716142a355cb3fd</anchor>
      <arglist>(const sc_inout&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>af79af642ea6595a189a216f36e9fd271</anchor>
      <arglist>(const sc_out&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a6ea041b87d50f1c68298937f02282d14</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a8e2aed37c947bca74306ac7fdf0fa669</anchor>
      <arglist>(const sc_in&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a60c8f89d8e348e6f967fe6666a05422e</anchor>
      <arglist>(const sc_inout&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a1bdada39753a050482f58d9a1609ceb6</anchor>
      <arglist>(const sc_out&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a16b89bbab7cfc47143798918f39dfdb4</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>af06fa45225b1acd0751622b5112b670f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a90356e56e7cd4fbbcf512f0b3da0f432</anchor>
      <arglist>(const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>afd00f5b0c0ff9ca4e0225ddbca8f3773</anchor>
      <arglist>(const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a7861b4532e3eae6884824b91819cd95e</anchor>
      <arglist>(const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a722eedae4f05230f0a438f0148182188</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a9b330614520f47f2087a1182274eeeed</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ad156829f89671fa337fe5ca76915f8c8</anchor>
      <arglist>(const sc_time &amp;t, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a99b60ea172d7a4b5200f081dd27322bc</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>afec1310979b9edede154b5b4e7ef0a23</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a307c14a10471568ac61f4e239e3e39e1</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a2a23bbe92415b28a311ce1b0c4127d17</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>af175353b2268c04c3d22bdffffaf73d2</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a6a458d71781cb3f24f59676f3885d55a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a193a531d61718e9bf4c3e5ab4d3b66a9</anchor>
      <arglist>(const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a576d33d7ba0bcfa45a23981d4d8cc4ef</anchor>
      <arglist>(const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a1b7867730a0785ec67daf9600b4e7722</anchor>
      <arglist>(const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a0380a707ca9335af76e3dadd15d1ce7b</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a3be85b2af0ef29110252bb62eccf98d1</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>acf5f31d328890dc448ee89c53138fefc</anchor>
      <arglist>(const sc_time &amp;t, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a6150b7c767e135091303d447398d6f70</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a482ebc847963c137e407f1a39ee9955f</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a1a0635513c7a8f2de68a6a9a65d12acb</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a7b0c204b0024cd77a606575b97c58772</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a99008263e28860cc093abe6d0132eb5d</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a67b1aa3b55510ee6bcdaa32ba3625080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>halt</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a729823c788d36379140593e4baf5e3fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ac2a40207ce1ce984947f4d14fa9f1086</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a3e40a08ed38141622ee366b12bf0e126</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>aa9c8b57a6728fb05cd5ff4c2250d3154</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a1a02efb49e0f94bdfcdd5d8f17bf149e</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a3d00dfb17ea0d02192258beb743523e9</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>watching</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a7e5fa9cb5662b7c56d35dd16a63a8e39</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_stack_size</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a49238d772547d7e1b38b6668e733efe3</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>append_port</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>ad347d89983ad0183a13302b4183cb42f</anchor>
      <arglist>(sc_port_base *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_sensitive</type>
      <name>sensitive</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a366572064bc944a5e4524d042f3a243f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_sensitive_pos</type>
      <name>sensitive_pos</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a2828a30bece6827e02b85e0400d19002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_sensitive_neg</type>
      <name>sensitive_neg</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>acf142733deeb576e8bff493e8a5555b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module_name</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a961ce39e963a1f45e7e0c73ead0c9be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module_registry</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a500fc9375656110e0bcb26cece285b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_port_registry</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a9db64b27e3fa59526834c1244e6f20a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01816.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_module_name</name>
    <filename>a01820.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_module_name</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>a79a4e8a11ea342022f6f76b43a506d79</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_module_name</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>ad3458f71558edd3667c7df4054886e9a</anchor>
      <arglist>(const sc_module_name &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_module_name</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>af117747a83d44db5d5e2a4a35bfd0e0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>aca84ef3051cec2a86a1c97adcb87a6cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear_module</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>a7897230de792bfcc950edf909b196e36</anchor>
      <arglist>(sc_module *module_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_module</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>a4183f467b1bca05f098c6b5a43a21ec9</anchor>
      <arglist>(sc_module *module_p)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object_manager</name>
      <anchorfile>a01820.html</anchorfile>
      <anchor>aebba0bce7695a731f55e38d2a5ca2d67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_module_registry</name>
    <filename>a01824.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a603b91a0b838762790809ad94c450e1d</anchor>
      <arglist>(sc_module &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>af805c9a1286457e17384b7f71012b9a2</anchor>
      <arglist>(sc_module &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>ab7587f21a0b6647d33ecfb8cbaff333d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01824.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_mpobject</name>
    <filename>a02024.html</filename>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a9db456bfab8c0548ac25b4b181c4c9cf</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a45fc4473d5cc230bf386e11ba09ca48c</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new[]</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a9479ba61f91329385fa2863e68e4f436</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete[]</name>
      <anchorfile>a02024.html</anchorfile>
      <anchor>a1b942567f9500e2735cb9e7c4229de08</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_msg_def</name>
    <filename>a02044.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>msg_type</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>adf4063c29d6695ce4b5a5dad60aba808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_actions</type>
      <name>actions</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>ad2bf0457ad85906c3b654001799b124a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_actions</type>
      <name>sev_actions</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>ab6ae555b5595a23fdadd5f21a2f0563c</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>limit</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a22843393a7ed3181599d3f976156b5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>sev_limit</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>aa2f8ce5f98bf95e643c7efb7f99ae858</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>limit_mask</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a9e41d7276a72f4e1c8e10028949ae87c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>call_count</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>ab81d6dd219818d8e2d5feb1c3afe379e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>sev_call_count</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a454601bf1b87cbb3b81de5085a9cb792</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>msg_type_data</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a4ed6d80922de2e99dfb53ec5d3e7f242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>a02044.html</anchorfile>
      <anchor>a08779fa864555437e599dae71162661a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_mutex</name>
    <filename>a01184.html</filename>
    <base>sc_core::sc_mutex_if</base>
    <base>sc_core::sc_object</base>
    <member kind="function">
      <type></type>
      <name>sc_mutex</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>a4d510d3d38bc6da39d54bb8658c3640d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_mutex</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>a169d49594df3ad0ba58d2395c98b5f12</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_mutex</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>a76822ae4f3a788efcd5ddadab8efea93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>a227813e3089b0d000bba8b39ed30a07e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trylock</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>abfafd461ffa8489bc28d11d774d008ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>a9497893c89e489b107ed2061851c6a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>ab60d33cfbfaf25ed929bae972824b628</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>in_use</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>af0f2b8ac9328e67707daa77301bf8388</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_owner</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>af69ba22a03bab6e983eeb859658ca105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_free</name>
      <anchorfile>a01184.html</anchorfile>
      <anchor>a7179ffe9bb1e33d81114292d366b1b4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_mutex_if</name>
    <filename>a01188.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>a01188.html</anchorfile>
      <anchor>a60e4ec2e991f43bdc946989a3c33e7c3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>trylock</name>
      <anchorfile>a01188.html</anchorfile>
      <anchor>ab3ca0de5f6df296c2993ad46de13176f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>a01188.html</anchorfile>
      <anchor>a98b7482db60812a9acf28554ecbd5f5e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_mutex_if</name>
      <anchorfile>a01188.html</anchorfile>
      <anchor>a9121fc608e21ff5d6805ebcc054c60c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_name_gen</name>
    <filename>a01828.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_name_gen</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a171fca41af5484eb9e31035ba193e008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_name_gen</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a6a7218312f8d41da06ffd5f62e2cd196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>gen_unique_name</name>
      <anchorfile>a01828.html</anchorfile>
      <anchor>a0a33c86d0664c8dd4e2849a63ad09940</anchor>
      <arglist>(const char *basename_, bool preserve_first=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_object</name>
    <filename>a01832.html</filename>
    <class kind="class">sc_core::sc_object::hierarchy_scope</class>
    <member kind="typedef">
      <type>unsigned</type>
      <name>phase_cb_mask</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a38a53f30a8719f77e35df8965845819e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>adef43ac9e24a45710e00765dff1b44cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>basename</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a687936908b37e1c2e56cd12a941f99f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a75778dff40cf1bf16fc4eb74346d923c</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>aea8d11dcba6236902df7f099ac558b80</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a8420debe6ce97f5b07e7dde92efe7cf1</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>afbd4c265b23225679b96688eab0967c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>simcontext</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>aa2ea268cadfad621fab19cd4238d3427</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_attribute</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a65d95751bce0508ac71364fb6e6fe973</anchor>
      <arglist>(sc_attr_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_base *</type>
      <name>get_attribute</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a3ab019ec6f4a4fabc9336d63a0f82867</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_attr_base *</type>
      <name>get_attribute</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a419422ae300553667ce112c1d3177a87</anchor>
      <arglist>(const std::string &amp;name_) const</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_base *</type>
      <name>remove_attribute</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a92e37b69b294df8dc86fdd57d7328eb7</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_all_attributes</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a812edfdd89e6536ff7e479bbe7296cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_attributes</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a5a1213ba04041e8caa6140cac50f12e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_cltn &amp;</type>
      <name>attr_cltn</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>adeb880a9edea3adf08920999cf95da66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_attr_cltn &amp;</type>
      <name>attr_cltn</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a966adcf170c9cc049062fb753565065e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>get_child_events</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a368ceb9aff89ae4193033422dbd1358e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>af85f58320c12f2cb77fd7bf05ed25cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_parent</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a9596b98165db3ca73212b46a71b3dc89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_parent_object</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a091a09c7860ffaeb2ed3e453e1c2d062</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_object</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a3369d21ab73ffa0f2d27be6cf11b6759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_object</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>ac094446cdc95b8606ace0c8e301af6b7</anchor>
      <arglist>(const char *nm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_object</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a367fc3501af7bef3a11017a28a9fdcca</anchor>
      <arglist>(const sc_object &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_object &amp;</type>
      <name>operator=</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a0e79bf80bc35065e23bef0d9ffb7e2ae</anchor>
      <arglist>(const sc_object &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_object</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a5b861716606ce329ee9a16b6d8f13e28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>add_child_event</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a39ba1a14f5ce703758c2f982051981db</anchor>
      <arglist>(sc_event *event_p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>add_child_object</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>ac3e4e798ea9220a9cb9401542c43ab4c</anchor>
      <arglist>(sc_object *object_p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove_child_event</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a3e1c8fe2344ba4a074caf02038cc1745</anchor>
      <arglist>(sc_event *event_p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove_child_object</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a79b493824069d6fccab14fc8d12f7648</anchor>
      <arglist>(sc_object *object_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>phase_cb_mask</type>
      <name>register_simulation_phase_callback</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a98573c57438867b3373d5c09c5aefbc2</anchor>
      <arglist>(phase_cb_mask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>phase_cb_mask</type>
      <name>unregister_simulation_phase_callback</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>ab7e23f225ea242450a151b390d28c872</anchor>
      <arglist>(phase_cb_mask)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>sc_invoke_method</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a0c408a59b7d4321afcb70bab92b8cacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module_dynalloc_list</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>acd24a9f5dbf6135ea29297ae5ca0e2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object_manager</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>aebba0bce7695a731f55e38d2a5ca2d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_phase_callback_registry</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>abad74f3d94e3f056b7caa556811c4a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_runnable</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a7daf768cb0d25e9950151ec7079decbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_trace_file_base</name>
      <anchorfile>a01832.html</anchorfile>
      <anchor>a82af6a9e21a904d89af490e9536515a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_object_manager</name>
    <filename>a01840.html</filename>
    <class kind="struct">sc_core::sc_object_manager::table_entry</class>
    <member kind="typedef">
      <type>std::map&lt; std::string, table_entry &gt;</type>
      <name>instance_table_t</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>ab1452de611bfbbdc6827054bd3fa5206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; sc_object * &gt;</type>
      <name>object_vector_t</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a147e76e83b65b96bb70aef7368fc2f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_object_manager</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a64632290b56003e5a06a756405eb1663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_object_manager</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a14a3b81d6c83e22ea1c1a0184137bfae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event *</type>
      <name>find_event</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a365ba0a8b61ed8ee8717deba341c9c33</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>find_object</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a5f6cc138964c0635e36944b05baa7cdf</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>first_object</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a7934b2fbaa56f20d74e5737b14a0e406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>next_object</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a1c3fad18a5105f3384500cb9e5614d31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hierarchy_push</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a33a07a5677400b797161b0c1e04973ea</anchor>
      <arglist>(sc_object *mdl)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>hierarchy_pop</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a66c195293c603149112193e78f932dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>hierarchy_curr</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>acc9bbfe4481127a4ebef12bc42e19b4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hierarchy_size</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a2ed3e0f05c478e501eee750c96e32c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_module_name</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a7cb5b3f6c893750ae0ca03602dab8041</anchor>
      <arglist>(sc_module_name *mod_name)</arglist>
    </member>
    <member kind="function">
      <type>sc_module_name *</type>
      <name>pop_module_name</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a570a92ea98b02c58f73bc15f379ee871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_module_name *</type>
      <name>top_of_module_name_stack</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>aa8c59f9b207a2c7e842db0b4dda986f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01840.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_out</name>
    <filename>a01288.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_inout</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a4c5f32d092b8f7a232fea1cb07af1862</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_out&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a3e51cb933b6214026e4390aebfd22095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>ae90890620a70a436760a27bb42d5c52a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a349be87b7f4730dc8e6710e8e940ff7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a92dcbc82a0515714b521d26f4521c05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a719dfa41057a4277634bfd1c5d500466</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a172a5b638a354b34bf82e385b7e4c57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a73e9c724425d0b04a958d8fefdb2d894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>afc2643e516d53828d85c3b3ad81ca487</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a8f558a601a9e12541ee306036135496b</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a25e004d2d152800801557d07edb34552</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a73275183f91f2fdb50ff45f50da98b2e</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>ae043e0045ec8d03acef1df1ddeaa4cc5</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a98ab7f92fcb5e717fafa50b470183b43</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>af573c153095c7e5d3616560367228a0d</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_out</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a09e3192d0ceee7313b2b585d7c194cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a0477a6d43a1f775b2eb7bbb5ad7c9174</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a1013fdd11116d4d9c53cf84621dbe55d</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a9094f6cc314be4b012d1425509bc099c</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>abbb59c697e4b9b5b6b14ba5dee5b8e0c</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a630334a8658618a42c9252e0732a7145</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01288.html</anchorfile>
      <anchor>a795ad46b303e4ac8e5ee3b64126331a9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_out_resolved</name>
    <filename>a01304.html</filename>
    <base>sc_core::sc_inout_resolved</base>
    <member kind="typedef">
      <type>sc_out_resolved</type>
      <name>this_type</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a4c924e0d99140dcf8b62c1641c511dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout_resolved</type>
      <name>base_type</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a59bd1762d9d4f97a42a16b7eea7c8062</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a292adb09f4d539f44f132bbbcb36e879</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a6a611e3c6743d282bfe2f6d3a1abc52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a9b62c9d898425ab6d4a92c03c4b3947b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>ab8d8a6c7e6163236806e4dd2e88fe460</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>ab57e4e631926b29509f266f1b66a7de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>aa2adf3fdb19aa6a07efb676ff268c40f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a458b6cc6375a8f5c2bf760077e0b060f</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>ad424bf606438858f2fa06b17da821d17</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a88c351869e95ecb7a6463b7ce2910fe5</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a3e9837594c91882ddc01300f86cad176</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a2426d2bc71271b66bf68eafa1f5660c7</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a9d0c12db69abbe0f21f4385a81433ae6</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a5947ebc8de68a320928d5daa496f8b31</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_out_resolved</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a3c5c31152ef969916310659f171a4471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a3f0c5c758a48ae2422f0e9faf056d139</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a53a8a7939be51d98f71c38a565e90099</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>ae5e47f36a2ba38adc0c272ebec4b20ef</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a9484d26e582aa440e53396fc49108257</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>a10bd1820f6535b1968f0faf97b6267e7</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01304.html</anchorfile>
      <anchor>ad765c7c1298fca17b539e19a19e326fa</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_out_rv</name>
    <filename>a01324.html</filename>
    <templarg>W</templarg>
    <base>sc_core::sc_inout_rv</base>
    <member kind="typedef">
      <type>sc_out_rv&lt; W &gt;</type>
      <name>this_type</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>adeed742b475842bb8c21d0570d7aa541</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout_rv&lt; W &gt;</type>
      <name>base_type</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a94258a2429c42202e1cbb773e7c91e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a21434c01eaf92c7b29e4269573753699</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a977620db82128cfd7e222f4b27dcbf97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>aed37215fe9c244eecd302c6ae08dc3da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a4d399a16826e15ce944cad73c1ab8d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a05fe8b74951bf4989d3dcd0750e712d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a030135d16023d8819135cb9dd38cab7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a3ec4c674b4357990392e1bfd7155f5b3</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>ab522ae2f591fb6318f512f11b5caa10e</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a793a9cc329342723f8cf210b85d25889</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a7fa2d4beb7ffdee5e4020a6a7629813e</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a23e8b68d6afc8d12758b469097c916f9</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>aa3a04ad0a13ef3ea4f6ad3ea0804d02e</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a7bb11244394dd7d6e0f8005d013e4621</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_out_rv</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>abafd81f0e9f16d833bac30198e5f14f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>ac79bd6b005329ffbac2920c749bc4e91</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>aaa59ad7f6d4a34c4eaa0c7648fae7aab</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>ad8fd0f4d012b1e7c8869b1fcbf3d1c72</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a26a24ae822b9e71b2887645ad08b2c56</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>aeaa1f348e8805472df0d44ac6157026b</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01324.html</anchorfile>
      <anchor>a9dc07d0fbaf5d975ae9d48c1beb8457a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_pdhash</name>
    <filename>a01996.html</filename>
    <templarg>K</templarg>
    <templarg>C</templarg>
    <base>sc_core::sc_phash_base</base>
    <member kind="typedef">
      <type>sc_pdhash_iter&lt; K, C &gt;</type>
      <name>iterator</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a5c108b347d02debd0663fcaa7c6bdb39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_pdhash</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>af53f0e18eb5d017445799b0d77aed83e</anchor>
      <arglist>(C def=(C) 0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, hash_fn_t hash_fn=(hash_fn_t) 0, cmpr_fn_t cmpr_fn=(cmpr_fn_t) 0, void *(*kdup_fn)(const void *)=0, void(*kfree_fn)(void *)=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_pdhash</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>ab123195501d3f698b0b2688b4b35cf9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a8cb7b4e7e2193e8835215b8bed25e64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a8fe5bf2c38cbf5440a6d839ded68e07e</anchor>
      <arglist>(const sc_pdhash&lt; K, C &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>acd678a1320e40c528a53674a5a37d29a</anchor>
      <arglist>(K k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a0cb3d9392fb5637db0df476caf0e19d5</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a64c750a00f26f2d0198f6061d3c82a5a</anchor>
      <arglist>(K k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>ac872f7b38df538ba5944a5763a2fd3c0</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a2523e480bd3fe552bd60e7ea512a4bf1</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a0368e9f550be66e42de8cdea53f0a8c6</anchor>
      <arglist>(K k, K *pk, C *pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a15f607a8cff567ba1d30e8f8e421e4bd</anchor>
      <arglist>(C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a4b72c08ce75fa699b214aad9ab354ab0</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a3e8053dcac513d398666d21f892f95cb</anchor>
      <arglist>(K k, C *pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>acd5516be4984482b55201c93dd2b03dd</anchor>
      <arglist>(K k) const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>operator[]</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a19288a8186c064d1aa089847142561fb</anchor>
      <arglist>(K k) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_pdhash_iter&lt; K, C &gt;</name>
      <anchorfile>a01996.html</anchorfile>
      <anchor>a359de6cc4ef5fb2ec5a2ca5e183c7334</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_pdhash_iter</name>
    <filename>a01976.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>sc_core::sc_phash_base_iter</base>
    <member kind="function">
      <type></type>
      <name>sc_pdhash_iter</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a99d5be2fac482ce6262438727d6a2934</anchor>
      <arglist>(sc_pdhash&lt; K, C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_pdhash_iter</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a1390f4f53d1f83de338a183d3414ca3c</anchor>
      <arglist>(sc_pdhash&lt; K, C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_pdhash_iter</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a6361becde762edf21c2c66ad754b3193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a8075ffcbbd2a278fd294396878ddd483</anchor>
      <arglist>(sc_pdhash&lt; K, C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a10ac3d6ad2b22bd83775015b405ea58c</anchor>
      <arglist>(sc_pdhash&lt; K, C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a23f170a99f3063a7fcb4549648959c3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>key</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a03e65ae12d8a0f9623949ed9ab2aa5b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>contents</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a31a1e50a728fcc88aa5275591b60253b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>set_contents</name>
      <anchorfile>a01976.html</anchorfile>
      <anchor>a64d6958f1276c9273fb434a177979422</anchor>
      <arglist>(C c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phase_callback_registry</name>
    <filename>a01848.html</filename>
    <class kind="struct">sc_core::sc_phase_callback_registry::entry</class>
    <member kind="typedef">
      <type>sc_phase_callback_registry</type>
      <name>this_type</name>
      <anchorfile>a01848.html</anchorfile>
      <anchor>a4c6899be3ba3d633874cdb7fb34ecfa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_object</type>
      <name>cb_type</name>
      <anchorfile>a01848.html</anchorfile>
      <anchor>a31196395523308cf9bc302d4764f8221</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cb_type::phase_cb_mask</type>
      <name>mask_type</name>
      <anchorfile>a01848.html</anchorfile>
      <anchor>a34d80bd6872213d9f1241d24c555fae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01848.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a01848.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phash</name>
    <filename>a01992.html</filename>
    <templarg>K</templarg>
    <templarg>C</templarg>
    <base>sc_core::sc_phash_base</base>
    <member kind="typedef">
      <type>sc_phash_iter&lt; K, C &gt;</type>
      <name>iterator</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>aca3d8eb61e11873c7ddd6ebb155f8728</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>ab6937a3b63192f795c56e0dc71554419</anchor>
      <arglist>(C def=(C) 0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, hash_fn_t hash_fn=default_ptr_hash_fn, cmpr_fn_t cmpr_fn=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a3e67ecbbbab5e0cf3d330ba82e272ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a2c51a31e2277beb79246fd61ee757852</anchor>
      <arglist>(const sc_phash&lt; K, C &gt; *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a4de059258489c01b3d5863bfbd0cd1c9</anchor>
      <arglist>(const sc_phash&lt; K, C &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a36b5636343f668932ac16593840e3e8f</anchor>
      <arglist>(const sc_phash&lt; K, C &gt; &amp;b, void *(*kdup)(const void *), void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>adbdacd35f27ddbb1d459461703b113c2</anchor>
      <arglist>(K k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>ac3a5da105c944e1d920a855a882391c7</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>af548a0fd3deaab20045571ba9b7ec36b</anchor>
      <arglist>(K k, C c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>ab468962fb793693cbfea833b8ac374f7</anchor>
      <arglist>(K k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a3fb8aedb02a13f8d55bb55e3b8d81e3e</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a5f19ab6f4d46ff20f40e9c716d61fa4c</anchor>
      <arglist>(K k, C c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>af3a91d4b98ee91f552936a20501272b3</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a87d463c998073762348fa41954a9d08e</anchor>
      <arglist>(K k, K *pk, C *pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a968681e0d0e81d578532b9cdeaa42ca2</anchor>
      <arglist>(K k, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a28d617da62c3c107cff75b4d9107bb52</anchor>
      <arglist>(C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a4d76894c22064e8f92c885514b810f82</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a3c0c66bea7930bdaf3caf6490936fddf</anchor>
      <arglist>(const void *c, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a9b8a99a412de96617e63955a609cb0f4</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a8c39e4641f779194e7444225f94563a6</anchor>
      <arglist>(K k, C *pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a872a0b3233640198369891d63e475bf1</anchor>
      <arglist>(K k) const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>operator[]</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a786503bdfc170b64c74b87b197ceeaf7</anchor>
      <arglist>(K k) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_phash_iter&lt; K, C &gt;</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a811283b5e65292839b362921ebd4d363</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_phash&lt; void *, const T *&gt;</name>
    <filename>a01992.html</filename>
    <base>sc_core::sc_phash_base</base>
    <member kind="typedef">
      <type>sc_phash_iter&lt; void *, const T * &gt;</type>
      <name>iterator</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>aca3d8eb61e11873c7ddd6ebb155f8728</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>ab6937a3b63192f795c56e0dc71554419</anchor>
      <arglist>(const T * def=(const T *) 0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, hash_fn_t hash_fn=default_ptr_hash_fn, cmpr_fn_t cmpr_fn=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a3e67ecbbbab5e0cf3d330ba82e272ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a2c51a31e2277beb79246fd61ee757852</anchor>
      <arglist>(const sc_phash&lt; void *, const T * &gt; *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a4de059258489c01b3d5863bfbd0cd1c9</anchor>
      <arglist>(const sc_phash&lt; void *, const T * &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a36b5636343f668932ac16593840e3e8f</anchor>
      <arglist>(const sc_phash&lt; void *, const T * &gt; &amp;b, void *(*kdup)(const void *), void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>adbdacd35f27ddbb1d459461703b113c2</anchor>
      <arglist>(void * k, const T * c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>ac3a5da105c944e1d920a855a882391c7</anchor>
      <arglist>(void * k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>af548a0fd3deaab20045571ba9b7ec36b</anchor>
      <arglist>(void * k, const T * c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>ab468962fb793693cbfea833b8ac374f7</anchor>
      <arglist>(void * k, const T * c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a3fb8aedb02a13f8d55bb55e3b8d81e3e</anchor>
      <arglist>(void * k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a5f19ab6f4d46ff20f40e9c716d61fa4c</anchor>
      <arglist>(void * k, const T * c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>af3a91d4b98ee91f552936a20501272b3</anchor>
      <arglist>(void * k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a87d463c998073762348fa41954a9d08e</anchor>
      <arglist>(void * k, void * *pk, const T * *pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a968681e0d0e81d578532b9cdeaa42ca2</anchor>
      <arglist>(void * k, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a28d617da62c3c107cff75b4d9107bb52</anchor>
      <arglist>(const T * c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a4d76894c22064e8f92c885514b810f82</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a3c0c66bea7930bdaf3caf6490936fddf</anchor>
      <arglist>(const void *c, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a9b8a99a412de96617e63955a609cb0f4</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a8c39e4641f779194e7444225f94563a6</anchor>
      <arglist>(void * k, const T * *pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a872a0b3233640198369891d63e475bf1</anchor>
      <arglist>(void * k) const</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator[]</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a786503bdfc170b64c74b87b197ceeaf7</anchor>
      <arglist>(void * k) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_phash_iter&lt; K, C &gt;</name>
      <anchorfile>a01992.html</anchorfile>
      <anchor>a811283b5e65292839b362921ebd4d363</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phash_base</name>
    <filename>a01980.html</filename>
    <member kind="typedef">
      <type>unsigned(*</type>
      <name>hash_fn_t</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a59529a6ed129062f880140ac253f3745</anchor>
      <arglist>)(const void *)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>cmpr_fn_t</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>abdc8ee4a09eb6c1474ed5c09ccdca68d</anchor>
      <arglist>)(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash_base</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a17331b21a19f165e0521610b5dfaa466</anchor>
      <arglist>(void *def=0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, hash_fn_t hash_fn=default_ptr_hash_fn, cmpr_fn_t cmpr_fn=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash_base</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ac8e300fb36097c0fcf27cefc36b52368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cmpr_fn</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>aa3f7f3bef4b089b91b5e4299dfb97deb</anchor>
      <arglist>(cmpr_fn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_hash_fn</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>af98c51de3efc59d6027d1043f3679669</anchor>
      <arglist>(hash_fn_t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a57b665dd44b8cacb73582ace3b56a5c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>count</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ae0d61f4aa469d86b1c78b8192830a56c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a80f2be9a2f2b77ce2c428dc935be991d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>abdbb49159df8b5b877961c9122bac9e5</anchor>
      <arglist>(void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>af9db74d4c750e099ce70f4c72abd959c</anchor>
      <arglist>(const sc_phash_base *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a04f9b49d7ed8fb1c3e3710d09c7e251c</anchor>
      <arglist>(const sc_phash_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a7c1703c2832e8face20f0cd94d57c64c</anchor>
      <arglist>(const sc_phash_base &amp;b, void *(*kdup)(const void *), void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a022a21748d8cd0974d3542660dc293a6</anchor>
      <arglist>(void *k, void *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>af75909eef1d8dc9941bb9cd2dbdfd581</anchor>
      <arglist>(void *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a8734a0185f81d4eb1b0fa0d284f91c82</anchor>
      <arglist>(void *k, void *c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>add2fea1e71b2c753ef8311c3200bc336</anchor>
      <arglist>(void *k, void *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ac9302b4acd958a7f1ec23df23c81e843</anchor>
      <arglist>(void *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>acf1b94268fc4eca45fd472f663303f1c</anchor>
      <arglist>(void *k, void *c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a4454b5079837cb83d347a9294f2e4b2c</anchor>
      <arglist>(const void *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ab3932fde242498dacda232f22b9299bb</anchor>
      <arglist>(const void *k, void **pk, void **pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>aedc7a7ff084d70cce8c8b01e0d4703f6</anchor>
      <arglist>(const void *k, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>abd513cdedf9d49f24b210c801495aee5</anchor>
      <arglist>(const void *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a113d533b097c597fca7c0af85a06b66d</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ad7599cce2ebc22bc3278410ec7a9ed69</anchor>
      <arglist>(const void *c, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>adba5faae9a836f2c77b2a3ec61d9ae7c</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a6a87a0ba9c3463ef310a4712f6a3b478</anchor>
      <arglist>(const void *k, void **pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a9f9c0ff24c0117ad0a7ce743c39cd82f</anchor>
      <arglist>(const void *k) const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator[]</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a8bf98f686e73fbcafca86129bb702ef7</anchor>
      <arglist>(const void *key) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rehash</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a6400e22ca66b43be5cc50ef46fc3cf37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>do_hash</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ab1db3f6c3d577d591bdba097f069c7b5</anchor>
      <arglist>(const void *key) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_phash_elem *</type>
      <name>add_direct</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a8c6f1dd47b0e42740a1722570d5a4092</anchor>
      <arglist>(void *key, void *contents, unsigned hash_val)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_phash_elem *</type>
      <name>find_entry_c</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a379dbdb5192e85651798050e6d89a996</anchor>
      <arglist>(unsigned hv, const void *k, sc_phash_elem ***plast)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_phash_elem *</type>
      <name>find_entry_q</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>aa94e77a5949a68bea287230e95c64ec3</anchor>
      <arglist>(unsigned hv, const void *k, sc_phash_elem ***plast)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_phash_elem *</type>
      <name>find_entry</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a6703d3e93396a4a6d716a3dcbcb03d9f</anchor>
      <arglist>(unsigned hv, const void *k, sc_phash_elem ***plast=0) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>default_value</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a3bf8d404259c72d9cbe4081b27f46457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_bins</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>aeced047ff0c2b5fd489e3c815cda2e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_entries</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a0dd202991132db7e8e6d1e0f213bb51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_density</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>af66353cdf032339990242864ef0a3f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reorder_flag</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a9b8329a91c235660f0f2344bb84ab283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>grow_factor</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a465bb4574cca3fdac0158ced4aec228d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_elem **</type>
      <name>bins</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ad1c4c2e20a04fbfec496a38ade6208dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>hash_fn_t</type>
      <name>hash</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>ab3bd8ab737e21a89cb8f1808d5c6c401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cmpr_fn_t</type>
      <name>cmpr</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a0584b2279e9ce71f58eb485e34ca4fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_phash_base_iter</name>
      <anchorfile>a01980.html</anchorfile>
      <anchor>a3b247b2a01d8688d9b14aeb6ee58258a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phash_base_iter</name>
    <filename>a01984.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>acdaedafcfdcf65968fd401118f41cd3e</anchor>
      <arglist>(sc_phash_base *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>af4cd507dcef212e1ffc5c1669407d9f5</anchor>
      <arglist>(sc_phash_base &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash_base_iter</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a62cd39e9f7df412dd7dca2753b00dc0e</anchor>
      <arglist>(sc_phash_base *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash_base_iter</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a783cbee346e5dca6ef94438b2575cb24</anchor>
      <arglist>(sc_phash_base &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash_base_iter</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a33ddfe2de7658dbaaf5d002f971c8828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a399bac5574749fa0be12acdffc05d03e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>ad6e8c2f688b8608a07cc0e0d4f7d65f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a9ceb96715a9b9097886c2147351f8234</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a3c0db39735e794085dfc570857a17d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a962f0b2272f78441a06d6b1ea937c110</anchor>
      <arglist>(void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>key</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>ae5a2002d9647f4c3c8692b000ee0499a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>contents</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a6ca3be8ac3a436f3dc622111e1ba5e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>set_contents</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a8fc712db01d2236de314415f0d979ae4</anchor>
      <arglist>(void *c)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_base *</type>
      <name>table</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a9fa1ba9941ef88363c1e534c50ed0a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_elem *</type>
      <name>entry</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a2ce19ca73151bf6ce7fd70acf39621cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_elem *</type>
      <name>next</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>a047e21a9c119827e8981e78e858c8eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_elem **</type>
      <name>last</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>ae1c1d3acb8e059649d6cf59238dab68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>index</name>
      <anchorfile>a01984.html</anchorfile>
      <anchor>acc4c15105fab4ddddaf2c45e5a3349e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phash_iter</name>
    <filename>a01988.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>sc_core::sc_phash_base_iter</base>
    <member kind="function">
      <type></type>
      <name>sc_phash_iter</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>a9d82a92d8f6291cb293b09849a69aa1f</anchor>
      <arglist>(sc_phash&lt; K, C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash_iter</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>afa11466971a40470e09811c0d4043146</anchor>
      <arglist>(sc_phash&lt; K, C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash_iter</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>ae9051d1346f16ade55427dab9b20099b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>a4a1e91f817ba775560e87f55f39bcfe4</anchor>
      <arglist>(sc_phash&lt; K, C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>aa1eec14398d12da7f238ceb9876e87ce</anchor>
      <arglist>(sc_phash&lt; K, C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>key</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>a876a2975c3ce86328f5e192e2d42e3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>contents</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>a40843bcbe52f22ad6ba6abcd68fe4d51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>set_contents</name>
      <anchorfile>a01988.html</anchorfile>
      <anchor>afdbea54bab8f9a31e2add3c7b7a0b96c</anchor>
      <arglist>(C c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_plist</name>
    <filename>a01912.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_plist_base</base>
    <member kind="typedef">
      <type>sc_plist_iter&lt; T &gt;</type>
      <name>iterator</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>ade090fde380874b78e2311d0e453c90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_plist</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a2ea4609f75bf12877d2ca4992471b520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_plist</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a2d003de584c0f703471e8bb7a8da6b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>push_back</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a83b915e0553f88d11a4726a011ee4dea</anchor>
      <arglist>(T d)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>push_front</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a848632a67589902341b561e401b386be</anchor>
      <arglist>(T d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a0bc527b45a0e5be7d2588c603e16e717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_front</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a38b9ca911c1a3a4a37bbe76aafe8254e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>insert_before</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a50d77410ef290b06779a31803bb537ce</anchor>
      <arglist>(handle_t h, T d)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>insert_after</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a5fe41780153382a60597cb773db4ed24</anchor>
      <arglist>(handle_t h, T d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>ac43a30a604ca9ec83e8c8173cb6a9342</anchor>
      <arglist>(handle_t h)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a7f1b47eba80a1581f64b002d08fc917a</anchor>
      <arglist>(handle_t h) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a28a079ad988963d878263cb87b0213a9</anchor>
      <arglist>(handle_t h, T d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>aedf1f401f0cd7cd20c5d90e5f24870f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>a46190692516bef9514ea0c1c22df0d5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_plist_iter&lt; T &gt;</name>
      <anchorfile>a01912.html</anchorfile>
      <anchor>afa209fe8e911045dd397d52a948f99c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_plist_base</name>
    <filename>a02012.html</filename>
    <member kind="typedef">
      <type>sc_plist_elem *</type>
      <name>handle_t</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a28431d8068b787c1d7ed30613897698d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_plist_base</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>ad0ae7c2d6ca7f62517f424f92b0f353d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_plist_base</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a1bdecfbd0dd4fd1be8d8de36afa5da9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>push_back</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a2c2be0f99f988e934608a9339bea19d9</anchor>
      <arglist>(void *d)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>push_front</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a70dbf8b386f49946f148bae7c52150eb</anchor>
      <arglist>(void *d)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pop_back</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a2f280436cc6651739603091d5ee7fba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pop_front</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a7b828689a81f5db62b7e241a0bbfc472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>insert_before</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a3c68920892a691afd39e85b00b121a26</anchor>
      <arglist>(handle_t h, void *d)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>insert_after</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a06997a69a3377f70b25800aa96483d28</anchor>
      <arglist>(handle_t h, void *d)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>remove</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>af38b50f0978dcfce8ef8177915ae9ab4</anchor>
      <arglist>(handle_t h)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a332824b71bc72b8bdb17ce00c89675de</anchor>
      <arglist>(handle_t h) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a9557f192f03b5a013f44e526db2e874a</anchor>
      <arglist>(handle_t h, void *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapcar</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a4d5c8ae4c17e62a662ac2d1b801fa8d7</anchor>
      <arglist>(sc_plist_map_fn f, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>front</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a094a05275d5d359251fcba4b5a5f0e31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>back</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a584db294d4f83db42bae67c52afb60a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase_all</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>ae96ae66effa5ae111724ac5a102ebdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>ad78ed8fb4ca02092e647d38b490cba47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>aec491c2294f290f166c87fa2858380d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_plist_base_iter</name>
      <anchorfile>a02012.html</anchorfile>
      <anchor>a97047803f54e70a6ec8664f10afc43bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_plist_base_iter</name>
    <filename>a02016.html</filename>
    <member kind="typedef">
      <type>sc_plist_elem *</type>
      <name>handle_t</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a889f516a6f037d12e5599933dcb644a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_plist_base_iter</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a16ea04a8a44a8f757f2347dd8ca8dc35</anchor>
      <arglist>(sc_plist_base *l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_plist_base_iter</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>ada240dce0ff66ea1e8a82022ee79a1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a7739c0e2f32670497e09af2849c06073</anchor>
      <arglist>(sc_plist_base *l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a84f5d3e1126ae29a608ff7714af31535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a2482647530779ce31fd962346d52ee38</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a77eb26c6fdaa46fac35c03deb87ae904</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a7bc12bbc85727b40a386f8d5c5887b9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a67b239a365fd480fd48bddac451ae86a</anchor>
      <arglist>(void *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a896674804d288b06e71cbc3d978e6c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>ab24dde879b11e45a8c0844ef16f172b2</anchor>
      <arglist>(int direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_handle</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>a5920701fa6b8b38eab20618b5db45553</anchor>
      <arglist>(handle_t h)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>get_handle</name>
      <anchorfile>a02016.html</anchorfile>
      <anchor>ac62642550c9ca1ef2b7c3b09daf1d9ca</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_plist_iter</name>
    <filename>a02008.html</filename>
    <templarg></templarg>
    <base>sc_core::sc_plist_base_iter</base>
    <member kind="function">
      <type></type>
      <name>sc_plist_iter</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a9e7bd44e5f0d2b500a6bc6917df9e697</anchor>
      <arglist>(sc_plist&lt; T &gt; *l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_plist_iter</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a0dd435b0c913165e93302a9314441dd8</anchor>
      <arglist>(sc_plist&lt; T &gt; &amp;l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_plist_iter</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a1ff33733a48d03cb5db0414a36f10625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a6ce5631c8e155002f8286d099d0111f2</anchor>
      <arglist>(sc_plist&lt; T &gt; *l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a1106e475e5d6a865ee5ae45db89d2d18</anchor>
      <arglist>(sc_plist&lt; T &gt; &amp;l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a03ce911e8392844b7d18c1513fce135a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a9a655c058dd5a6218d9fa1861635e80d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02008.html</anchorfile>
      <anchor>a08622141232a796204065a033bfcaef6</anchor>
      <arglist>(T d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_port</name>
    <filename>a01208.html</filename>
    <templarg>IF</templarg>
    <templarg>N</templarg>
    <templarg>P</templarg>
    <base>sc_core::sc_port_b</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port&lt; sc_fifo_in_if&lt; T &gt;, 0, SC_ONE_OR_MORE_BOUND &gt;</name>
    <filename>a01208.html</filename>
    <base>sc_port_b&lt; sc_fifo_in_if&lt; T &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(sc_fifo_in_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, sc_fifo_in_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port&lt; sc_fifo_out_if&lt; T &gt;, 0, SC_ONE_OR_MORE_BOUND &gt;</name>
    <filename>a01208.html</filename>
    <base>sc_port_b&lt; sc_fifo_out_if&lt; T &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(sc_fifo_out_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, sc_fifo_out_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port&lt; sc_signal_in_if&lt; bool &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
    <filename>a01208.html</filename>
    <base>sc_port_b&lt; sc_signal_in_if&lt; bool &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(sc_signal_in_if&lt; bool &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, sc_signal_in_if&lt; bool &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port&lt; sc_signal_in_if&lt; sc_dt::sc_logic &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
    <filename>a01208.html</filename>
    <base>sc_port_b&lt; sc_signal_in_if&lt; sc_dt::sc_logic &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port&lt; sc_signal_in_if&lt; T &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
    <filename>a01208.html</filename>
    <base>sc_port_b&lt; sc_signal_in_if&lt; T &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(sc_signal_in_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, sc_signal_in_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port&lt; sc_signal_inout_if&lt; bool &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
    <filename>a01208.html</filename>
    <base>sc_port_b&lt; sc_signal_inout_if&lt; bool &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(sc_signal_inout_if&lt; bool &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, sc_signal_inout_if&lt; bool &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port&lt; sc_signal_inout_if&lt; sc_dt::sc_logic &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
    <filename>a01208.html</filename>
    <base>sc_port_b&lt; sc_signal_inout_if&lt; sc_dt::sc_logic &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(sc_signal_inout_if&lt; sc_dt::sc_logic &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, sc_signal_inout_if&lt; sc_dt::sc_logic &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port&lt; sc_signal_inout_if&lt; T &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
    <filename>a01208.html</filename>
    <base>sc_port_b&lt; sc_signal_inout_if&lt; T &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(sc_signal_inout_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, sc_signal_inout_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01208.html</anchorfile>
      <anchor>a0715b180a86bd6520f2753672c4585f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_port_b</name>
    <filename>a01204.html</filename>
    <templarg>IF</templarg>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; IF &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IF *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IF *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IF *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>IF *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function">
      <type>IF *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const IF *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port_b&lt; sc_fifo_in_if&lt; T &gt; &gt;</name>
    <filename>a01204.html</filename>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; sc_fifo_in_if&lt; T &gt; &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(sc_fifo_in_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(sc_fifo_in_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fifo_in_if&lt; T &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_fifo_in_if&lt; T &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fifo_in_if&lt; T &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fifo_in_if&lt; T &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fifo_in_if&lt; T &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fifo_in_if&lt; T &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port_b&lt; sc_fifo_out_if&lt; T &gt; &gt;</name>
    <filename>a01204.html</filename>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; sc_fifo_out_if&lt; T &gt; &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(sc_fifo_out_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(sc_fifo_out_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fifo_out_if&lt; T &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_fifo_out_if&lt; T &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fifo_out_if&lt; T &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fifo_out_if&lt; T &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fifo_out_if&lt; T &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fifo_out_if&lt; T &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port_b&lt; sc_signal_in_if&lt; bool &gt; &gt;</name>
    <filename>a01204.html</filename>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; sc_signal_in_if&lt; bool &gt; &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(sc_signal_in_if&lt; bool &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(sc_signal_in_if&lt; bool &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; bool &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; bool &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; bool &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; bool &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; bool &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; bool &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port_b&lt; sc_signal_in_if&lt; sc_dt::sc_logic &gt; &gt;</name>
    <filename>a01204.html</filename>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; sc_signal_in_if&lt; sc_dt::sc_logic &gt; &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port_b&lt; sc_signal_in_if&lt; T &gt; &gt;</name>
    <filename>a01204.html</filename>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; sc_signal_in_if&lt; T &gt; &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(sc_signal_in_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(sc_signal_in_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; T &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; T &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; T &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; T &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_in_if&lt; T &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_in_if&lt; T &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port_b&lt; sc_signal_inout_if&lt; bool &gt; &gt;</name>
    <filename>a01204.html</filename>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; sc_signal_inout_if&lt; bool &gt; &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(sc_signal_inout_if&lt; bool &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(sc_signal_inout_if&lt; bool &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; bool &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; bool &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; bool &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; bool &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; bool &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; bool &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port_b&lt; sc_signal_inout_if&lt; sc_dt::sc_logic &gt; &gt;</name>
    <filename>a01204.html</filename>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; sc_signal_inout_if&lt; sc_dt::sc_logic &gt; &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(sc_signal_inout_if&lt; sc_dt::sc_logic &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(sc_signal_inout_if&lt; sc_dt::sc_logic &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; sc_dt::sc_logic &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_port_b&lt; sc_signal_inout_if&lt; T &gt; &gt;</name>
    <filename>a01204.html</filename>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a99a096d4c0afaca0ecd111503e7c53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; sc_signal_inout_if&lt; T &gt; &gt;</type>
      <name>this_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a247d9a5be29f047574832c7ecad89f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a15b71cc19c23d5791ab075368422c873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a57e3906f259f38ad18792956d80b73f0</anchor>
      <arglist>(sc_signal_inout_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>SC_VIRTUAL_ void</type>
      <name>bind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa368f463c7a9460b05720b4b4b85ca46</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(sc_signal_inout_if&lt; T &gt; &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; T &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; T &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; T &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; T &gt; *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a1855025b663a19cae7646497cfea75ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aa12f4c522060f98d987efc1a0669aa82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signal_inout_if&lt; T &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a40e7d0e11029081f7c227ef16a808d5f</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signal_inout_if&lt; T &gt; *</type>
      <name>operator[]</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ac69f658e16e4e32a5a75a8a070d3a951</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01204.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_port_base</name>
    <filename>a01196.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>this_type</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a41e3b234bcace2db0619b2c90f18ca87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_count</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a6448d53a209be65590b26e0547516aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>ad22035a56ab17e27b01677b1b4cf58e8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a61179430b4fe856c82f6c585bb0bacff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a83346d9636ef34ede3030cdf5389493d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_base</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a49a2335e1b3f7058c1f9445151874d1e</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_base</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a2128f4445171e7625633365906ab012c</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_base</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a2b8424bc3b800e4ed426183fbbdb0d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bind</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a0684ec254aaf508e1a265521e2adf489</anchor>
      <arglist>(sc_interface &amp;interface_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bind</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>ad223e4f31a0d17731a7bc60423731ae0</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>ad48a2a91e5064dc5d5b733e7641db561</anchor>
      <arglist>(sc_interface &amp;)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a5c3b274e098183ded49dddee80a60faa</anchor>
      <arglist>(sc_port_base &amp;)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>add_interface</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a6326f170f2b535a82a64d26881674e3d</anchor>
      <arglist>(sc_interface *)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>interface_count</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>aad7f9abce976f1450a9ab493ff9b3f16</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const char *</type>
      <name>if_typename</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a951b5cdb4ffcb94f7b7edac30f18734e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>abd3794439fb67b489a57b95925c78a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a6de92b3f34b64c853599c40d5a42a15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_of_simulation</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a262b9ec042009301a6a170b8258245e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_simulation</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>aec39c7c931426fc6a5c4bb602e6a540c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a73bc9bb3eb8b6c58ac783394ff788b4a</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a9c60712c746ae37b2894b34c82d6e35f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a0077d5f3de15998cb0877bf117061b04</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_static_event</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a59308809e967032b25e99964d39dfcb9</anchor>
      <arglist>(sc_method_handle process_p, const sc_event &amp;event) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_static_event</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>ae7f97fa6790c6ee01c6fedc56f52d404</anchor>
      <arglist>(sc_thread_handle process_p, const sc_event &amp;event) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_bind_info *</type>
      <name>m_bind_info</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>aa8b1c991b599ac1fed5bdf1898ff51e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_port_registry</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a9db64b27e3fa59526834c1244e6f20a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01196.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_port_registry</name>
    <filename>a01200.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01200.html</anchorfile>
      <anchor>a1af868ebb6e09f2b8443b2edf88d717c</anchor>
      <arglist>(sc_port_base *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01200.html</anchorfile>
      <anchor>adbe317941a71ec3c566fd6d80065336c</anchor>
      <arglist>(sc_port_base *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01200.html</anchorfile>
      <anchor>a0d250524bdea70168d8fe3a37597b1f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01200.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_ppq</name>
    <filename>a02032.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_ppq_base</base>
    <member kind="function">
      <type></type>
      <name>sc_ppq</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>ac5fd697aa3ab3d353a4865d6e0f53d34</anchor>
      <arglist>(int sz, compare_fn_t cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_ppq</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a8254cbd10295e7292a30f926da429b6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>top</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>aaf588c32eaf57b5a5909751b8dd4d631</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract_top</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a00046bb25feaee6cf4ab998b4f67e72d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a3d3927372c5147a90fe458caab47f6ae</anchor>
      <arglist>(T elem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_ppq&lt; sc_core::sc_event_timed *&gt;</name>
    <filename>a02032.html</filename>
    <base>sc_core::sc_ppq_base</base>
    <member kind="function">
      <type></type>
      <name>sc_ppq</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>ac5fd697aa3ab3d353a4865d6e0f53d34</anchor>
      <arglist>(int sz, compare_fn_t cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_ppq</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a8254cbd10295e7292a30f926da429b6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_core::sc_event_timed *</type>
      <name>top</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>aaf588c32eaf57b5a5909751b8dd4d631</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_core::sc_event_timed *</type>
      <name>extract_top</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a00046bb25feaee6cf4ab998b4f67e72d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a3d3927372c5147a90fe458caab47f6ae</anchor>
      <arglist>(sc_core::sc_event_timed * elem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_ppq&lt; sc_core::sc_time *&gt;</name>
    <filename>a02032.html</filename>
    <base>sc_core::sc_ppq_base</base>
    <member kind="function">
      <type></type>
      <name>sc_ppq</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>ac5fd697aa3ab3d353a4865d6e0f53d34</anchor>
      <arglist>(int sz, compare_fn_t cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_ppq</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a8254cbd10295e7292a30f926da429b6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_core::sc_time *</type>
      <name>top</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>aaf588c32eaf57b5a5909751b8dd4d631</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_core::sc_time *</type>
      <name>extract_top</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a00046bb25feaee6cf4ab998b4f67e72d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02032.html</anchorfile>
      <anchor>a3d3927372c5147a90fe458caab47f6ae</anchor>
      <arglist>(sc_core::sc_time * elem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_ppq_base</name>
    <filename>a02028.html</filename>
    <member kind="typedef">
      <type>int(*</type>
      <name>compare_fn_t</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>aa77e95f29b79fdd7a86303a3dd4cf9b1</anchor>
      <arglist>)(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ppq_base</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a836b130b15ff89dfe7cdb6573060b6a0</anchor>
      <arglist>(int sz, compare_fn_t cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_ppq_base</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a71f0c739165fa19b7dcf2d8ad916c823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>top</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>af1933b540b63aa1040371390e479a5f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>extract_top</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>aecb6ae514eab1cd20e4498d2be0cb399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a04e569f8e749cd238d737c1b240681aa</anchor>
      <arglist>(void *elem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>ab83bdde9aaf0a6239bbf4f2851f2d6a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a698165e4ec86672d1e01592afaf8b30c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parent</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a2a04c0deb463c52ca79a0b27b22f3d45</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>left</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>ae17a1bae1dcc3c0dafd6f09229920754</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>right</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>aa73bd99ab0d624dd4bae78714e439c69</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>heapify</name>
      <anchorfile>a02028.html</anchorfile>
      <anchor>a62a817ad4499fa1a41bceb2c5ca98125</anchor>
      <arglist>(int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_prim_channel</name>
    <filename>a01212.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="enumvalue">
      <name>list_end</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a1810eb2a169c517e61fc55370ee59ed6af89cea8b43c2a5e4ff986f2d870609ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>list_end</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a1810eb2a169c517e61fc55370ee59ed6af89cea8b43c2a5e4ff986f2d870609ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>aea7199c39bb147048ffdce757d1c48fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update_requested</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a08bb4a2536b7867fc9b07f0a8f6b354c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_update</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a4425be1df41342d34b811c9c4a311fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_request_update</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>aaea343cfd39a55513dde1375ed2c8118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_prim_channel</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a6fcd8df8c99a6d18e108f64fa9a9f5db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_prim_channel</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a9465234b60ef3146f3cebc12e9a586df</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_prim_channel</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>afc20ff476e6bc68c2f86e5792c88f109</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>aa5424bdf12aa3eccc5060b49d49ba506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a2916851247ca5443c3224fa138173778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a9c28aaa7c9a510eec74317a9ed7763b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_of_simulation</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>abe01cf8288a6acfb6975dbef9066f8a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_simulation</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>acf81d9d475c7295773f47a16ddab3ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>aeb8ce70dffbe186c2e37652fe6d59999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a8e7b39bf540586a4d286f0c4b07dea75</anchor>
      <arglist>(const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a035a8cb75b6edcc4602260de793cefa4</anchor>
      <arglist>(const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a83926c0f35246426d0f6e1914e362ab7</anchor>
      <arglist>(const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a360e61ef1933e8b10c9f61dd6d45cfae</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a7022637b4de91cbb0329379a8c157461</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a7a61ceed5f74611adbb39955495473e6</anchor>
      <arglist>(const sc_time &amp;t, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a690bce7b736d29a7a66ef53e9770060e</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>abf05eb0b0696113f67adf9c0f10d7733</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a53d9324845443071624132a5cef84459</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a5b47eff8cb19f7dc1d6ac334c1e02504</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a4a9f326f5e38302abd32f182135f9750</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a1c4072e95784e0275244b4edc3423173</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a000afa996b27f83657ac6daa127fe319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a5b88ce5a56c6342af86f5dbac155a17c</anchor>
      <arglist>(const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>adbafeb3d82b376553efbc17bd19a0bf3</anchor>
      <arglist>(const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a44006b03ef93f3326ce33a8cc54803e0</anchor>
      <arglist>(const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a7175e06de7a76d2e281c260777c13f4b</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a28887573a11769d42f4f3cd380a6b2f6</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a10ac850f2250024198491b12bf9ab7a2</anchor>
      <arglist>(const sc_time &amp;t, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a3ddbdae049a5f7f32c92fb6664f01ae2</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>af1a55774a522f3419b03faf6aaf86fbf</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>add2b9a5b6fdd4afee6ea89d930a514e7</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a36c1b2c186cef9c979e702fa00992aa5</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a3b99e3ff7af74a44460a4e529f225621</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>a716213487640ac313243d19b6238adc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_prim_channel_registry</name>
      <anchorfile>a01212.html</anchorfile>
      <anchor>aa55374e55a96f357791338986acafa36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_prim_channel_registry</name>
    <filename>a01216.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01216.html</anchorfile>
      <anchor>ab8b541ceb7a22b96967947f083a6efff</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01216.html</anchorfile>
      <anchor>a84b6065e1b779945f8aecd86aea487ac</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01216.html</anchorfile>
      <anchor>ae02323d80e37562f525661860ef6798d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_update</name>
      <anchorfile>a01216.html</anchorfile>
      <anchor>a3a3e2974d04c5f05e0e2223421701483</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_request_update</name>
      <anchorfile>a01216.html</anchorfile>
      <anchor>a3c5284e4a925a2aa52799be12b869607</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending_updates</name>
      <anchorfile>a01216.html</anchorfile>
      <anchor>a6c6735a2f0e08b7aa30bf8232bd54535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending_async_updates</name>
      <anchorfile>a01216.html</anchorfile>
      <anchor>a019be8c4398bb609b2fca927b4fd4721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01216.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_process_b</name>
    <filename>a01872.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="enumeration">
      <type></type>
      <name>process_throw_type</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_NONE</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a24a72304587d661b4324884a702e56c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_KILL</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a288ddd2ebc117b8e3efa8f499e018bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_USER</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a209bb27e361a60f551c3f557b111efa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_ASYNC_RESET</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a97b12fe9ed7373e18fa66ffd1ec9f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_SYNC_RESET</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a9b3ad2c20e1c611bfe214298f7b0dfbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>process_state</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_disabled</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a88e7de4bbbf33d9ae67354e37cee18b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_ready_to_run</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a75f72f390a3b933df53f86db821ef0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_suspended</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a2f163c7d80598bf4bbf2a9977dfbfae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_zombie</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a60229a842a99b0f2f7d9fab83b3970d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_normal</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443ad84a00d0fe477e398bab774b271020e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>reset_type</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_asynchronous</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051acf19c7930f6a21b901212fd682cd7ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_synchronous_off</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051a55516b1601564ba08fe50a9d951e12e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_synchronous_on</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051a26d9c9e8590b76f26a91b642a1aff629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>trigger_t</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATIC</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a6bbcc4d4c50193b508e8e81659d3afd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a39f7f9f3dc00e458831624140be5d8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR_LIST</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94ae404ac4285d683c40788def820a0821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND_LIST</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a2f3564efd6df3306ff53c71913f20b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94adc22a2642d2d0f5812012a8cc92d8880</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT_TIMEOUT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a72d68be29f9bbc26877861cde8d2717b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR_LIST_TIMEOUT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a76edaf79319541b19bae3d6132cd31c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND_LIST_TIMEOUT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a2f6c6abccadfc5bda6b9ba0f3b00dc4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_NONE</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a24a72304587d661b4324884a702e56c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_KILL</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a288ddd2ebc117b8e3efa8f499e018bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_USER</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a209bb27e361a60f551c3f557b111efa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_ASYNC_RESET</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a97b12fe9ed7373e18fa66ffd1ec9f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_SYNC_RESET</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a9b3ad2c20e1c611bfe214298f7b0dfbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_disabled</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a88e7de4bbbf33d9ae67354e37cee18b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_ready_to_run</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a75f72f390a3b933df53f86db821ef0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_suspended</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a2f163c7d80598bf4bbf2a9977dfbfae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_zombie</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a60229a842a99b0f2f7d9fab83b3970d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_normal</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443ad84a00d0fe477e398bab774b271020e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_asynchronous</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051acf19c7930f6a21b901212fd682cd7ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_synchronous_off</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051a55516b1601564ba08fe50a9d951e12e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_synchronous_on</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051a26d9c9e8590b76f26a91b642a1aff629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATIC</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a6bbcc4d4c50193b508e8e81659d3afd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a39f7f9f3dc00e458831624140be5d8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR_LIST</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94ae404ac4285d683c40788def820a0821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND_LIST</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a2f3564efd6df3306ff53c71913f20b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94adc22a2642d2d0f5812012a8cc92d8880</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT_TIMEOUT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a72d68be29f9bbc26877861cde8d2717b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR_LIST_TIMEOUT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a76edaf79319541b19bae3d6132cd31c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND_LIST_TIMEOUT</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a2f6c6abccadfc5bda6b9ba0f3b00dc4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_process_b</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab127ef93aad74928190d5bff106b6f5d</anchor>
      <arglist>(const char *name_p, bool is_thread, bool free_host, SC_ENTRY_FUNC method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current_state</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a48098896b8b1c430ff9024d00bfd436b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dont_initialize</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0dce3ee99b471e48d1962c8c10fed46d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dont_initialize</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a448f38c460ba68fc76b80f18cf4d15de</anchor>
      <arglist>(bool dont)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dump_state</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0e61baf80f9b2a1d02321b4e135ab506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ::std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a82ffc179bfdaf5149e71930cc39dba3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_kind</type>
      <name>proc_kind</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a95564aa2085d052b96b6df248977dca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>reset_event</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a06f14edba42f5d82254c378c9a3299bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>terminated_event</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab26788239e6ef260507a925f9caa51ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_process_handle</type>
      <name>last_created_process_handle</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab8442fb6c17ad5f72f7177d4beb286c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>file</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a99cc428f873fa6470a210f92a19098c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lineno</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a3484e4adfe2f43e2115929f2798f90fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>proc_id</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5d0b56fd49755c938b8ffcd4c7e1097e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_process_b</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac68384ab1922dcde59aaf5f8ac9ff658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>add_child_object</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aada14415b9be5b1b9beb4ed97a32742d</anchor>
      <arglist>(sc_object *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_static_event</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a80d59feeb38b0a14f9fbd346421ae623</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>dynamic</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0d27ce850ad0424b4f4deb48ce703ada</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>gen_unique_name</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a1fc0edef11c367d1f06856de89f810d1</anchor>
      <arglist>(const char *basename_, bool preserve_first)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_report *</type>
      <name>get_last_report</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a8040af5941a3ddb19dab5c490c30d967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_disabled</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a7daed93e35a4d436b18ac65d2f51d617</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_runnable</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af19238d335e3cd528f5a7538822bff6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove_child_object</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab9490244d3a43726e0240cfe12884830</anchor>
      <arglist>(sc_object *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_dynamic_events</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a93cedc4e538aac20e8f2584324b229aa</anchor>
      <arglist>(bool skip_timeout=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_static_events</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a8471138d3ba14870baa08058e2a08ef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_last_report</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ad7004d9c622d35af3dc6107abe42c681</anchor>
      <arglist>(sc_report *last_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab07cfef3b264ac72941da8ced3106179</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a03a0d91a60d6ea6d5c8962cf1d13d1d6</anchor>
      <arglist>(const char *msgid, const char *msg=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_immediate_self_notification</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a1d1f0368e0a934d5e71eb75043ecbc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>disable_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a914dda3b1ff60d903cfd6dcd9be3cb5c</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disconnect_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a0c9280a028ff6e61ec2f83b94b75d535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>enable_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a254aa9cade9b3e2845d7e3e409889bd2</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initially_in_reset</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a3fd75df28f38539e7266f2988e6a54af</anchor>
      <arglist>(bool async)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_unwinding</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aba04382da34bacfdb87754205a33bdb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>start_unwinding</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aec1fd9e4a80f0f70869a099750e9f682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>clear_unwinding</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a35cb7dad0a07d594dfcb6c5532e15b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>kill_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a2a9a00ef1f025ef141757d380179ac71</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_changed</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ae2fcac32f0933252105660eabe2e01ec</anchor>
      <arglist>(bool async, bool asserted)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a7e4b14f8600d9137187b5a9f4e9eb0ee</anchor>
      <arglist>(reset_type rt, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>resume_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a217f211da141b960f239cb77c0e42e2e</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>suspend_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9839b7477d47f1d32fcf0601fe9abb11</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>throw_user</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa431865a79cdf51b1c19a8da4a4423a0</anchor>
      <arglist>(const sc_throw_it_helper &amp;helper, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>throw_reset</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a4ec15bb1d268eb5310c6081f817abeb9</anchor>
      <arglist>(bool async)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>terminated</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a76e434c6e5ac898ac1f6e8584f25508f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trigger_reset_event</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa5b7d4f76c359440b370b4962427ee5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>semantics</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aacccc829d67e9b6b9892a5446530e343</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static sc_process_b *</type>
      <name>last_created_process_base</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a598fbf04facff586e0c743d007bd9cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_active_areset_n</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a11b3d6abee08c4193a82800496c3f770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_active_reset_n</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a6b933e4ff7ebfa245069cb79e3bc2788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_dont_init</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a4bba193dd9f42734a0bf18e694464c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_dynamic_proc</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a6850067b78f7beb56f0d7f238d4fdeec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_event *</type>
      <name>m_event_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>acd2ccfa88438085032b72d154ea6c733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_event_count</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa06f8822ecee9661a4558f165915060b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_event_list *</type>
      <name>m_event_list_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a6d6e55ba572b77c74dc9999946a5b9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_exist_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab816e15feece55ddbda9dbc46cbd6659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_free_host</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ad2c393784246e910cda401a479b0ee13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_has_reset_signal</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a70c3c7de06e5a03b39052f17c4dd9207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_has_stack</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a9290049f92d92b2cd8669cabd0f2359c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_is_thread</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a52f7ec996a79e50038b84c085c9d6975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_report *</type>
      <name>m_last_report_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a00d61b089792b1bb93e5866c8067014a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_name_gen *</type>
      <name>m_name_gen_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ab9b257a883c0a4d73d5b02c72ae2896b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_curr_proc_kind</type>
      <name>m_process_kind</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af40bf45d91c9766c3582f8a5aa8aa0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_references_n</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aaef110083edfc73e241617a1b5e5fb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_reset * &gt;</type>
      <name>m_resets</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ad2f2018f471252b6cb453dd95ffd5ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_reset_event_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a1c8ef5a4fb1d603649d1dbe6e3188848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_resume_event_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a14c3baa00f8759d75c35fee61f612210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_runnable_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a4090b13b42cd1259d2b40867a1ca5855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_host *</type>
      <name>m_semantics_host_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aded7ad046c6039c7aa86240cd50eb418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SC_ENTRY_FUNC</type>
      <name>m_semantics_method_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a8926a28a0c67059c2e4b66af1e52476e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_state</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a3a7c616f6590f84df9caff51ef47ab29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const sc_event * &gt;</type>
      <name>m_static_events</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>afa69a0ea561f83794f7a22e0278fae1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_sticky_reset</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a04b6f76ef03e8092d0d1510934a757dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_term_event_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a3ec8bdaa79ba3c4e9e04fb4d8aeaba09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_throw_it_helper *</type>
      <name>m_throw_helper_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a738d6e9f16a1650d015651c307c2d99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>process_throw_type</type>
      <name>m_throw_status</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a5eb7fe7c88ba1de299071e9dec2ea02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_timed_out</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a8e21c84fe49e911a4f2fbe76e98d5e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_timeout_event_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a7a4fb73508cd06832780de9b4ce1ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>trigger_t</type>
      <name>m_trigger_type</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a35a19ed7e35d33ea77db5042c98f9ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unwinding</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a17bd4b253de298fb1694a6100b5d3230</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_process_b *</type>
      <name>m_last_created_process_p</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a48edb38a4b7e32433804933444cabd5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_cthread_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af2c9e96bc0fe4f99c3fdbf18a3965fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_port_base</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac16572a975a3185797ffbd9f318470fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_runnable</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a7daf768cb0d25e9950151ec7079decbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_report_handler</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aaba7034cfa93e6c1a3e2f1e9e57f9b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a459c3ab69abfc8912c9261f7dc0719dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset_finder</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>af692216008e752352d2831cd7c62e7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unwind_exception</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>aa82b5a44736cfa6eae577e422fe1da51</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend const char *</type>
      <name>sc_gen_unique_name</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>ac4a943a6420dea21b95c2b5b9b1a2f92</anchor>
      <arglist>(const char *, bool preserve_first)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend sc_process_handle</type>
      <name>sc_get_current_process_handle</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a4eb8431a7635edb24fb1424f43f412be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>timed_out</name>
      <anchorfile>a01872.html</anchorfile>
      <anchor>a76d925fe565e7b70ebcec8e6b34acff7</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_process_handle</name>
    <filename>a01880.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_process_handle</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>aae174624e0f27d3a4c87784138bf8e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_process_handle</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>aadae3b03c5ce34e2c0f34ddfe97e2f88</anchor>
      <arglist>(sc_object *object_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_process_handle</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a58ffb7a1bce18fead41ed52d75fcd54b</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_process_handle</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ac69885e0499b490a627b53d7b58f5279</anchor>
      <arglist>(const sc_process_handle &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_process_handle</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a496f28d7586080b47e761ca613202fc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle &amp;</type>
      <name>operator=</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>acfca4d9a9d9744f1ecddc010a86c6292</anchor>
      <arglist>(sc_process_handle src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a7d3c0cd16c76ffb1950f7edb66f904b7</anchor>
      <arglist>(sc_process_handle &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a1f7ca1b4b7c181454095f84360316330</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dynamic</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a841f2f471bed8c03b11fdff073f63ea6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a39e6f89e641c0917e6a82b298c3dae95</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>get_child_events</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a2baedaf870d67edadf52ac7ceb3589a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a7876cc1013d02f91af473ef4502efc80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_parent_object</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a0558eb49020b5a588b63d5f555214ecd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_process_object</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>aeb183e0d1f454d5d512484d7d066c662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unwinding</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ae87c67766fa5bf259cb024a5975b7dcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kill</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a6698d508929a8d4d3a3ee9e015a4ef70</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a490748a44684eeecec814a583a2094a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_kind</type>
      <name>proc_kind</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ae8b97f2cabe249c72ca2338c4a4c6530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ae773070079aa5a660c6a370338364269</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>reset_event</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a856bf152a422892857c71a226b78f4cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a893b2e55367627556863b5c23f7d7e1a</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspend</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a73370b93855a7d9131c7e49eb400bfa5</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_reset_off</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>aea2d31a4fd74836ed5cc19688aea1978</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_reset_on</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ac6d5b6e68cfb770ca60cd09a5f34cdb8</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>terminated_event</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a3ba1726872c886bd7fbd27621f599919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>terminated</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ac0e074a6e68f3343701698fd4e72446c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>throw_it</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ab9ad47b3b8341ceb54ef870a7e7502e8</anchor>
      <arglist>(const EXCEPT &amp;exception, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a2f01c9d2ab793a1651927115455d079b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dump_state</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a5fa45b361df163995215623f5317a336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_process_b *</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a7b6f22594564a4cc2319f48f3059b08f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_cthread_handle</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a22be50fea0a9b7a93ebfd32bcd56eb2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_method_handle</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a2a10fe75c3f85a9c2261c9119d416df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_thread_handle</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a540c9b2cbffa001aa92312141b76fdcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>dont_initialize</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ac5d5035ffc2355c74f850db84ba5cb88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dont_initialize</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a69a76fbb1c768fd450a0889722bb56c8</anchor>
      <arglist>(bool dont)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_target_p</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a72903172697a15674e032286baa2d3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::vector&lt; sc_event * &gt;</type>
      <name>empty_event_vector</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a5a7789d3a75c355e5c76afb21f509288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::vector&lt; sc_object * &gt;</type>
      <name>empty_object_vector</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a7d62b018af4eb8ae661860ea621b7da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_event</type>
      <name>non_event</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ad458f3ce0027b17acbaf1f609029efc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_join</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>aeb79ed0c7e8b054a1908e8e6346ef2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a459c3ab69abfc8912c9261f7dc0719dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>ab59ca88ddcee98ed1842dde0843b64c0</anchor>
      <arglist>(const this_type &amp;left, const this_type &amp;right)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a04d9f9de9173ba30957bd3652e72ce89</anchor>
      <arglist>(const this_type &amp;left, const this_type &amp;right)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01880.html</anchorfile>
      <anchor>a8472be65af106f8df033c337acbf4d77</anchor>
      <arglist>(const this_type &amp;left, const this_type &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_process_host</name>
    <filename>a01856.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_process_host</name>
      <anchorfile>a01856.html</anchorfile>
      <anchor>ac5e639b1c7069ba45b190c361c832cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_process_host</name>
      <anchorfile>a01856.html</anchorfile>
      <anchor>aa314af2f955cf8c79b4d56eef65714bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defunct</name>
      <anchorfile>a01856.html</anchorfile>
      <anchor>acf24d38ae99fdf5fed561e8fb8301111</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_process_monitor</name>
    <filename>a01860.html</filename>
    <member kind="enumvalue">
      <name>spm_exit</name>
      <anchorfile>a01860.html</anchorfile>
      <anchor>a24408d943e4ca2ee7c1ec29962298356a302665cd4a823e3f8b6c702fb29466b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>spm_exit</name>
      <anchorfile>a01860.html</anchorfile>
      <anchor>a24408d943e4ca2ee7c1ec29962298356a302665cd4a823e3f8b6c702fb29466b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_process_monitor</name>
      <anchorfile>a01860.html</anchorfile>
      <anchor>ac807fb723845344ad8bab1db426d2e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>signal</name>
      <anchorfile>a01860.html</anchorfile>
      <anchor>a0e298ea807c0d1ed5d0f14941d58cec8</anchor>
      <arglist>(sc_thread_handle thread_p, int type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_proxy</name>
    <filename>a01412.html</filename>
    <templarg>X</templarg>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; X &gt;::type</type>
      <name>traits_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acee0b8284a8d3e544d191b093c221851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaa4692ad396c4cef0b790b3861206a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_proxy</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>accea890ca3d76271b14869cd5d296c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a489a3ac3560c28ea6ddc93f36db011c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const X &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aad29fc1cb5bd123799ce597553889ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae9bd2cfad180ee59cc256d908798d5e8</anchor>
      <arglist>(const sc_proxy&lt; Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf1b2909e107881e6dcbe686f2988c83</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac0337fdba86b96a04989a171442b90c2</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aead6476441626a33fda6454c829d8d9a</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9890ca14cbadd90f0c4ec3d723e3c73f</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3bd0570f833cf42d377ee7cbceb0e453</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4879a3354fcd830933d6ec8e56a7fb38</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a860d02174604eab87f0697383f1de557</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a520bd5e7211b6c6c9fffe316b0349ecc</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a702f89f2149e4ac25765265ca74c16a1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4638e65f60e07c46587538a4a19d5b13</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad8ff4c0defa9b2ee308a091c7f233493</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa71aaab91c3586527b77b9465c02395e</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab2073e7075b8d90298f6db2348505e27</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_not</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a54452404cfaaf83f5b965521dbbbb367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator~</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab623e93ff909044db41d8c015a4d7803</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a86b4ebd3a9862b2096d1d1ebf7020773</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a264fd8ad14c2506578f3fab7afee73e3</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af5420c5998e155af8045d7ba113c25c7</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a84a62dca75210780c5c0497a3373e80a</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad1a2f9aa2a0faa5ef1dcd03033561653</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a7a90a06ece25915931d5f1bb7c05c6</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a25da5016b367fed5c870eaeef07d171d</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af8ff7f708c8346a7cfd7ada069813239</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a265eb47dfd10779203073fcc79481e80</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a72dfb5f39e2ffa7b2bec0c65272dcda1</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f5f07afb0bdbe12a07aceeac87ac1c</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a8a716dac2f55fc52b05ce1f66a0b1044</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2a732d8b954d43fff798962505ca84b1</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6de32120589bcf21fa3f07c4025c6b12</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad032653d364c3a15395447b45a9d37e4</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>afd2d9f5b89f02a81214ccd241a9fe905</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a30fd2985c264d3a98401bb7964ba95b8</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a40729092dcbf1aec07c974d0106fa9d1</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a449bc65eff8f926ed81fd2f175f29a5f</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f8c836a667af63928a772337d4a9887</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5b10312822e9328d303b1e2bf0d15579</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0038a437e94cf9c50c9b3b8781f5f723</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a477ea9f549391112e8be4d8bd406d73f</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a641a8aa4ae96d1b5f621ede257d5c5c6</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a22aaf970caa71b12f22ab3d792113173</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae282cd3b774a20d6f757b47e91ca9f79</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae078fe2a615548682d5c44caa00e0be8</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a29b4d09ec21cc7134de32035ca87a143</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1b261a6fdeb1b543f98867e72de8ad7c</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92173f91180737e0cb58c4c97a1a7bd2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a03bb4d0bc2ebfd730c85167e4fdd9416</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a533bb3030cec09841ce4578dd7f48b25</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f175af5379de67f31c991ab71f6a2a</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac9f2af15b5bbce57f3ff7ada3ad12bc6</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa189758b04335d961d260421fca9c19a</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a753198b9f3cdc0493aeff06c667169f0</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1d8f410adb1a52dc867feb22e1f035bd</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6638fd229d4444d9602ff02b65c54556</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a46a5689d72dc32f37a3b87c775dd13b0</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1e7f8dd8fb35aa8275b3dca88f950b4e</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23945b783cd3eeeede0b8539fafb6219</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a145e31a2ffec3aea379a3ea6e88d84</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab4e00cb55adfae59734b0bbf40107619</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4e4780d3519341015d4dc970d142f322</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eba8a5074f6939c4f8372bc39c83cc7</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7bdf613f95d2694e3cb53c350768479f</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a45f9ab67990ed27b795d684059333d6b</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af561359c97a630df5b7ac6c95f6faa73</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a95fdc53f9f4a5cc5a21a9168001e9b28</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c5ebb79ada10f6a7573689135dda594</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a701c0b283c49b22752d0671b2a5b2318</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf156376b1d12a81efdf432582d63971</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a648c7584d2a91abb2bc4269a8f9ef4b0</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2de0c28f7fe5ad3f7d8cc383f50466f1</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ade17b406588b0e4be8870dd3ff527659</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5726462fceb02bd2eee0f50449247ab2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f7c39b9a776290689395c541b620b7f</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaced446f27460c93611b3e74f327d056</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a297900474ee55749af025ebcbab9951b</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adc2090cb2526b39b65e98238897081c0</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11900667adbee5a92661353b275f603e</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a035057831a850194fdc1dc58c045b714</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af73baceda1dba48a4cfb5b7cc357288b</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2413456c990b78a93ca8942279e58593</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaaa722d2c7225751c702cf45a3f10da9</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aeab2cdc4f3cc8a36599751accd5b2ebb</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92f0cb3e2d5ec8844bb7f98970d2f6d2</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5148c79e5ba084eb6b05b9fc2faa0e67</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74614e41eb31d026ecab0a7bfeff7d99</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7396528f2bf3c2fe379aa4db4a21cd43</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae62b2196c54f18f168f1dbc2a7f1a7af</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a711d1a9cdfd65453d5732472df413405</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3e89ed1516e6d787166c54f8dda4faca</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a48e8fc7e6215c5da1dbc61bed2c7afa5</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a78c04f56c35bde2d930bc62f280debd0</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eff76e16e705c31e7e28354471f4061</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23fc7286d2bc7f8296a0bb47e12ce159</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa709c0dda0d9195448401dae88242bd0</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2882e7426bc972fbb191889d2dcd1bf9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae90ffd99bed3830ce4a5e8bbba46ecaf</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a09b602fca8cd3df55a16e69ed75178a6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a4576482a8ea60cba6b1ffcaa79bafd</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>lrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0aec43149b265e26139d8b9973a6991a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>rrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af0fd16d5bc50daa7286e0d3cf6a6f6e2</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>reverse</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4b367159d44258eecf57bd36c16d5554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf77fba82163eda04b7e40dd4e28442f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; X &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a896497462d930a195e394f8476b61d05</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a712d82f04d4289ecf22eea07149dc559</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; X &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa2c66ae15e2ca06be161f64314d87ac0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab393eba9b1480ab97d0dee2513165820</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a64c3a779968cde182045205600e4cd90</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0b63028369350f1388a93a299446a3d7</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4c4467c60f64375b37bd31b1d9add11b</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>and_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11bc43f1ff73917096e7340efe94493b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nand_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adfa45a6455349e732a1621f49aee32bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>or_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a50a6d8e4725d98e652b37faa6d60cc29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f4ac80eeb51a9d60f9ad77f817ff9f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac05f7b13229ad82e93f196b1baf2f6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xnor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a270334afad7be2944c32f8e8ebb2a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad13398f205d5b8a53f71605412f361df</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7829bdf1b498079c14ebec82b1405eb0</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f1254d5bdb19033d0ae8ac571c4eafe</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a889b273c321437528630c794964f1da6</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3018eb3e4553f73e21d3ffa6d6ea765c</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad806388868e0fd388eb352136ae60ee8</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c6535f135da67eadf1d0529d4cd608c</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6a48d1107e791634cbceaed0b2187965</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab63313dafe9ab775c588ed8da8bbd06b</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7f2fbed25a2b7e77ee8c3260ed1e1c6a</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74ce3db95d1d00e5f35425015f8300ac</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a10364103e06df161f81b33dbdec68b3e</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae25f4528cb003daec2784f5bac4c6dfc</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aac319bd336dfdbcfc3e8a8b293f3df2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5ef75afb2bccd38c135ecd33c436ee28</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2042eb0fd5e678cc15438b3bc932c677</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5f397533750a51f6aef9d47d249dd60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adaa8fae85694bca2cc32df9a096bf831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>abfee16d1787a828ac01decd569199aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a714205f3bd2bd16a979f8e8d8b77181f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a13ab95af579bbee1ee64f4d3274929f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a93218be1c993aa03bd6f33453b682768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af3cd336e8752b48bf608fa7eda24ca51</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1bac4fd44ca356072cb734e8fd74a6eb</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_bounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a146fc7f639127ff0614a4b1c2034a289</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_wbounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a840c619647d717b35123f933d4cb3570</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_digit</type>
      <name>to_anything_unsigned</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a453ffec2738e7e1065549504d2c33dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>to_anything_signed</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2aa696455dd02c24c982228db9744f3d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_proxy&lt; sc_bv_base &gt;</name>
    <filename>a01412.html</filename>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; sc_bv_base &gt;::type</type>
      <name>traits_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acee0b8284a8d3e544d191b093c221851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaa4692ad396c4cef0b790b3861206a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_proxy</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>accea890ca3d76271b14869cd5d296c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a489a3ac3560c28ea6ddc93f36db011c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_bv_base &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aad29fc1cb5bd123799ce597553889ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae9bd2cfad180ee59cc256d908798d5e8</anchor>
      <arglist>(const sc_proxy&lt; Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf1b2909e107881e6dcbe686f2988c83</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac0337fdba86b96a04989a171442b90c2</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aead6476441626a33fda6454c829d8d9a</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9890ca14cbadd90f0c4ec3d723e3c73f</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3bd0570f833cf42d377ee7cbceb0e453</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4879a3354fcd830933d6ec8e56a7fb38</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a860d02174604eab87f0697383f1de557</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a520bd5e7211b6c6c9fffe316b0349ecc</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a702f89f2149e4ac25765265ca74c16a1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4638e65f60e07c46587538a4a19d5b13</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad8ff4c0defa9b2ee308a091c7f233493</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa71aaab91c3586527b77b9465c02395e</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab2073e7075b8d90298f6db2348505e27</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>b_not</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a54452404cfaaf83f5b965521dbbbb367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator~</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab623e93ff909044db41d8c015a4d7803</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a86b4ebd3a9862b2096d1d1ebf7020773</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a264fd8ad14c2506578f3fab7afee73e3</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af5420c5998e155af8045d7ba113c25c7</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a84a62dca75210780c5c0497a3373e80a</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad1a2f9aa2a0faa5ef1dcd03033561653</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a7a90a06ece25915931d5f1bb7c05c6</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a25da5016b367fed5c870eaeef07d171d</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af8ff7f708c8346a7cfd7ada069813239</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a265eb47dfd10779203073fcc79481e80</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a72dfb5f39e2ffa7b2bec0c65272dcda1</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f5f07afb0bdbe12a07aceeac87ac1c</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a8a716dac2f55fc52b05ce1f66a0b1044</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2a732d8b954d43fff798962505ca84b1</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6de32120589bcf21fa3f07c4025c6b12</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad032653d364c3a15395447b45a9d37e4</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>afd2d9f5b89f02a81214ccd241a9fe905</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a30fd2985c264d3a98401bb7964ba95b8</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a40729092dcbf1aec07c974d0106fa9d1</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a449bc65eff8f926ed81fd2f175f29a5f</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f8c836a667af63928a772337d4a9887</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5b10312822e9328d303b1e2bf0d15579</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0038a437e94cf9c50c9b3b8781f5f723</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a477ea9f549391112e8be4d8bd406d73f</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a641a8aa4ae96d1b5f621ede257d5c5c6</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a22aaf970caa71b12f22ab3d792113173</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae282cd3b774a20d6f757b47e91ca9f79</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae078fe2a615548682d5c44caa00e0be8</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a29b4d09ec21cc7134de32035ca87a143</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1b261a6fdeb1b543f98867e72de8ad7c</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92173f91180737e0cb58c4c97a1a7bd2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a03bb4d0bc2ebfd730c85167e4fdd9416</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a533bb3030cec09841ce4578dd7f48b25</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f175af5379de67f31c991ab71f6a2a</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac9f2af15b5bbce57f3ff7ada3ad12bc6</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa189758b04335d961d260421fca9c19a</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a753198b9f3cdc0493aeff06c667169f0</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1d8f410adb1a52dc867feb22e1f035bd</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6638fd229d4444d9602ff02b65c54556</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a46a5689d72dc32f37a3b87c775dd13b0</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1e7f8dd8fb35aa8275b3dca88f950b4e</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23945b783cd3eeeede0b8539fafb6219</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a145e31a2ffec3aea379a3ea6e88d84</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab4e00cb55adfae59734b0bbf40107619</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4e4780d3519341015d4dc970d142f322</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eba8a5074f6939c4f8372bc39c83cc7</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7bdf613f95d2694e3cb53c350768479f</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a45f9ab67990ed27b795d684059333d6b</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af561359c97a630df5b7ac6c95f6faa73</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a95fdc53f9f4a5cc5a21a9168001e9b28</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c5ebb79ada10f6a7573689135dda594</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a701c0b283c49b22752d0671b2a5b2318</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf156376b1d12a81efdf432582d63971</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a648c7584d2a91abb2bc4269a8f9ef4b0</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2de0c28f7fe5ad3f7d8cc383f50466f1</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ade17b406588b0e4be8870dd3ff527659</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5726462fceb02bd2eee0f50449247ab2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f7c39b9a776290689395c541b620b7f</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaced446f27460c93611b3e74f327d056</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a297900474ee55749af025ebcbab9951b</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adc2090cb2526b39b65e98238897081c0</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11900667adbee5a92661353b275f603e</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a035057831a850194fdc1dc58c045b714</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af73baceda1dba48a4cfb5b7cc357288b</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2413456c990b78a93ca8942279e58593</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaaa722d2c7225751c702cf45a3f10da9</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aeab2cdc4f3cc8a36599751accd5b2ebb</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92f0cb3e2d5ec8844bb7f98970d2f6d2</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5148c79e5ba084eb6b05b9fc2faa0e67</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74614e41eb31d026ecab0a7bfeff7d99</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7396528f2bf3c2fe379aa4db4a21cd43</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae62b2196c54f18f168f1dbc2a7f1a7af</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a711d1a9cdfd65453d5732472df413405</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3e89ed1516e6d787166c54f8dda4faca</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a48e8fc7e6215c5da1dbc61bed2c7afa5</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a78c04f56c35bde2d930bc62f280debd0</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eff76e16e705c31e7e28354471f4061</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23fc7286d2bc7f8296a0bb47e12ce159</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa709c0dda0d9195448401dae88242bd0</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2882e7426bc972fbb191889d2dcd1bf9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae90ffd99bed3830ce4a5e8bbba46ecaf</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a09b602fca8cd3df55a16e69ed75178a6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a4576482a8ea60cba6b1ffcaa79bafd</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>lrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0aec43149b265e26139d8b9973a6991a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>rrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af0fd16d5bc50daa7286e0d3cf6a6f6e2</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>reverse</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4b367159d44258eecf57bd36c16d5554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; sc_bv_base &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf77fba82163eda04b7e40dd4e28442f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; sc_bv_base &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a896497462d930a195e394f8476b61d05</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; sc_bv_base &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a712d82f04d4289ecf22eea07149dc559</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; sc_bv_base &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa2c66ae15e2ca06be161f64314d87ac0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; sc_bv_base &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab393eba9b1480ab97d0dee2513165820</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; sc_bv_base &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a64c3a779968cde182045205600e4cd90</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; sc_bv_base &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0b63028369350f1388a93a299446a3d7</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; sc_bv_base &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4c4467c60f64375b37bd31b1d9add11b</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>and_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11bc43f1ff73917096e7340efe94493b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nand_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adfa45a6455349e732a1621f49aee32bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>or_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a50a6d8e4725d98e652b37faa6d60cc29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f4ac80eeb51a9d60f9ad77f817ff9f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac05f7b13229ad82e93f196b1baf2f6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xnor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a270334afad7be2944c32f8e8ebb2a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad13398f205d5b8a53f71605412f361df</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7829bdf1b498079c14ebec82b1405eb0</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f1254d5bdb19033d0ae8ac571c4eafe</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a889b273c321437528630c794964f1da6</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3018eb3e4553f73e21d3ffa6d6ea765c</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad806388868e0fd388eb352136ae60ee8</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c6535f135da67eadf1d0529d4cd608c</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6a48d1107e791634cbceaed0b2187965</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab63313dafe9ab775c588ed8da8bbd06b</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7f2fbed25a2b7e77ee8c3260ed1e1c6a</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74ce3db95d1d00e5f35425015f8300ac</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a10364103e06df161f81b33dbdec68b3e</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae25f4528cb003daec2784f5bac4c6dfc</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aac319bd336dfdbcfc3e8a8b293f3df2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5ef75afb2bccd38c135ecd33c436ee28</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2042eb0fd5e678cc15438b3bc932c677</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5f397533750a51f6aef9d47d249dd60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adaa8fae85694bca2cc32df9a096bf831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>abfee16d1787a828ac01decd569199aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a714205f3bd2bd16a979f8e8d8b77181f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a13ab95af579bbee1ee64f4d3274929f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a93218be1c993aa03bd6f33453b682768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af3cd336e8752b48bf608fa7eda24ca51</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1bac4fd44ca356072cb734e8fd74a6eb</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_bounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a146fc7f639127ff0614a4b1c2034a289</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_wbounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a840c619647d717b35123f933d4cb3570</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_digit</type>
      <name>to_anything_unsigned</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a453ffec2738e7e1065549504d2c33dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>to_anything_signed</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2aa696455dd02c24c982228db9744f3d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_proxy&lt; sc_concref_r&lt; X, Y &gt; &gt;</name>
    <filename>a01412.html</filename>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; sc_concref_r&lt; X, Y &gt; &gt;::type</type>
      <name>traits_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acee0b8284a8d3e544d191b093c221851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaa4692ad396c4cef0b790b3861206a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_proxy</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>accea890ca3d76271b14869cd5d296c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a489a3ac3560c28ea6ddc93f36db011c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aad29fc1cb5bd123799ce597553889ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae9bd2cfad180ee59cc256d908798d5e8</anchor>
      <arglist>(const sc_proxy&lt; Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf1b2909e107881e6dcbe686f2988c83</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac0337fdba86b96a04989a171442b90c2</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aead6476441626a33fda6454c829d8d9a</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9890ca14cbadd90f0c4ec3d723e3c73f</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3bd0570f833cf42d377ee7cbceb0e453</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4879a3354fcd830933d6ec8e56a7fb38</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a860d02174604eab87f0697383f1de557</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a520bd5e7211b6c6c9fffe316b0349ecc</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a702f89f2149e4ac25765265ca74c16a1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4638e65f60e07c46587538a4a19d5b13</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad8ff4c0defa9b2ee308a091c7f233493</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa71aaab91c3586527b77b9465c02395e</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab2073e7075b8d90298f6db2348505e27</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>b_not</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a54452404cfaaf83f5b965521dbbbb367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator~</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab623e93ff909044db41d8c015a4d7803</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a86b4ebd3a9862b2096d1d1ebf7020773</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a264fd8ad14c2506578f3fab7afee73e3</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af5420c5998e155af8045d7ba113c25c7</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a84a62dca75210780c5c0497a3373e80a</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad1a2f9aa2a0faa5ef1dcd03033561653</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a7a90a06ece25915931d5f1bb7c05c6</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a25da5016b367fed5c870eaeef07d171d</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af8ff7f708c8346a7cfd7ada069813239</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a265eb47dfd10779203073fcc79481e80</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a72dfb5f39e2ffa7b2bec0c65272dcda1</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f5f07afb0bdbe12a07aceeac87ac1c</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a8a716dac2f55fc52b05ce1f66a0b1044</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2a732d8b954d43fff798962505ca84b1</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6de32120589bcf21fa3f07c4025c6b12</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad032653d364c3a15395447b45a9d37e4</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>afd2d9f5b89f02a81214ccd241a9fe905</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a30fd2985c264d3a98401bb7964ba95b8</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a40729092dcbf1aec07c974d0106fa9d1</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a449bc65eff8f926ed81fd2f175f29a5f</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f8c836a667af63928a772337d4a9887</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5b10312822e9328d303b1e2bf0d15579</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0038a437e94cf9c50c9b3b8781f5f723</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a477ea9f549391112e8be4d8bd406d73f</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a641a8aa4ae96d1b5f621ede257d5c5c6</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a22aaf970caa71b12f22ab3d792113173</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae282cd3b774a20d6f757b47e91ca9f79</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae078fe2a615548682d5c44caa00e0be8</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a29b4d09ec21cc7134de32035ca87a143</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1b261a6fdeb1b543f98867e72de8ad7c</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92173f91180737e0cb58c4c97a1a7bd2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a03bb4d0bc2ebfd730c85167e4fdd9416</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a533bb3030cec09841ce4578dd7f48b25</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f175af5379de67f31c991ab71f6a2a</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac9f2af15b5bbce57f3ff7ada3ad12bc6</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa189758b04335d961d260421fca9c19a</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a753198b9f3cdc0493aeff06c667169f0</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1d8f410adb1a52dc867feb22e1f035bd</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6638fd229d4444d9602ff02b65c54556</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a46a5689d72dc32f37a3b87c775dd13b0</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1e7f8dd8fb35aa8275b3dca88f950b4e</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23945b783cd3eeeede0b8539fafb6219</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a145e31a2ffec3aea379a3ea6e88d84</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab4e00cb55adfae59734b0bbf40107619</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4e4780d3519341015d4dc970d142f322</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eba8a5074f6939c4f8372bc39c83cc7</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7bdf613f95d2694e3cb53c350768479f</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a45f9ab67990ed27b795d684059333d6b</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af561359c97a630df5b7ac6c95f6faa73</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a95fdc53f9f4a5cc5a21a9168001e9b28</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c5ebb79ada10f6a7573689135dda594</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a701c0b283c49b22752d0671b2a5b2318</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf156376b1d12a81efdf432582d63971</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a648c7584d2a91abb2bc4269a8f9ef4b0</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2de0c28f7fe5ad3f7d8cc383f50466f1</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ade17b406588b0e4be8870dd3ff527659</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5726462fceb02bd2eee0f50449247ab2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f7c39b9a776290689395c541b620b7f</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaced446f27460c93611b3e74f327d056</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a297900474ee55749af025ebcbab9951b</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adc2090cb2526b39b65e98238897081c0</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11900667adbee5a92661353b275f603e</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a035057831a850194fdc1dc58c045b714</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af73baceda1dba48a4cfb5b7cc357288b</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2413456c990b78a93ca8942279e58593</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaaa722d2c7225751c702cf45a3f10da9</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aeab2cdc4f3cc8a36599751accd5b2ebb</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92f0cb3e2d5ec8844bb7f98970d2f6d2</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5148c79e5ba084eb6b05b9fc2faa0e67</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74614e41eb31d026ecab0a7bfeff7d99</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7396528f2bf3c2fe379aa4db4a21cd43</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae62b2196c54f18f168f1dbc2a7f1a7af</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a711d1a9cdfd65453d5732472df413405</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3e89ed1516e6d787166c54f8dda4faca</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a48e8fc7e6215c5da1dbc61bed2c7afa5</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a78c04f56c35bde2d930bc62f280debd0</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eff76e16e705c31e7e28354471f4061</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23fc7286d2bc7f8296a0bb47e12ce159</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa709c0dda0d9195448401dae88242bd0</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2882e7426bc972fbb191889d2dcd1bf9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae90ffd99bed3830ce4a5e8bbba46ecaf</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a09b602fca8cd3df55a16e69ed75178a6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a4576482a8ea60cba6b1ffcaa79bafd</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>lrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0aec43149b265e26139d8b9973a6991a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>rrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af0fd16d5bc50daa7286e0d3cf6a6f6e2</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; &amp;</type>
      <name>reverse</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4b367159d44258eecf57bd36c16d5554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; sc_concref_r&lt; X, Y &gt; &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf77fba82163eda04b7e40dd4e28442f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; sc_concref_r&lt; X, Y &gt; &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a896497462d930a195e394f8476b61d05</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; sc_concref_r&lt; X, Y &gt; &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a712d82f04d4289ecf22eea07149dc559</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; sc_concref_r&lt; X, Y &gt; &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa2c66ae15e2ca06be161f64314d87ac0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; sc_concref_r&lt; X, Y &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab393eba9b1480ab97d0dee2513165820</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; sc_concref_r&lt; X, Y &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a64c3a779968cde182045205600e4cd90</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; sc_concref_r&lt; X, Y &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0b63028369350f1388a93a299446a3d7</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; sc_concref_r&lt; X, Y &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4c4467c60f64375b37bd31b1d9add11b</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>and_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11bc43f1ff73917096e7340efe94493b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nand_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adfa45a6455349e732a1621f49aee32bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>or_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a50a6d8e4725d98e652b37faa6d60cc29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f4ac80eeb51a9d60f9ad77f817ff9f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac05f7b13229ad82e93f196b1baf2f6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xnor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a270334afad7be2944c32f8e8ebb2a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad13398f205d5b8a53f71605412f361df</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7829bdf1b498079c14ebec82b1405eb0</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f1254d5bdb19033d0ae8ac571c4eafe</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a889b273c321437528630c794964f1da6</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3018eb3e4553f73e21d3ffa6d6ea765c</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad806388868e0fd388eb352136ae60ee8</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c6535f135da67eadf1d0529d4cd608c</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6a48d1107e791634cbceaed0b2187965</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab63313dafe9ab775c588ed8da8bbd06b</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7f2fbed25a2b7e77ee8c3260ed1e1c6a</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74ce3db95d1d00e5f35425015f8300ac</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a10364103e06df161f81b33dbdec68b3e</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae25f4528cb003daec2784f5bac4c6dfc</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aac319bd336dfdbcfc3e8a8b293f3df2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5ef75afb2bccd38c135ecd33c436ee28</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2042eb0fd5e678cc15438b3bc932c677</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5f397533750a51f6aef9d47d249dd60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adaa8fae85694bca2cc32df9a096bf831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>abfee16d1787a828ac01decd569199aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a714205f3bd2bd16a979f8e8d8b77181f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a13ab95af579bbee1ee64f4d3274929f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a93218be1c993aa03bd6f33453b682768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af3cd336e8752b48bf608fa7eda24ca51</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1bac4fd44ca356072cb734e8fd74a6eb</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_bounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a146fc7f639127ff0614a4b1c2034a289</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_wbounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a840c619647d717b35123f933d4cb3570</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_digit</type>
      <name>to_anything_unsigned</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a453ffec2738e7e1065549504d2c33dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>to_anything_signed</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2aa696455dd02c24c982228db9744f3d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_proxy&lt; sc_lv_base &gt;</name>
    <filename>a01412.html</filename>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; sc_lv_base &gt;::type</type>
      <name>traits_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acee0b8284a8d3e544d191b093c221851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaa4692ad396c4cef0b790b3861206a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_proxy</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>accea890ca3d76271b14869cd5d296c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a489a3ac3560c28ea6ddc93f36db011c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aad29fc1cb5bd123799ce597553889ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae9bd2cfad180ee59cc256d908798d5e8</anchor>
      <arglist>(const sc_proxy&lt; Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf1b2909e107881e6dcbe686f2988c83</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac0337fdba86b96a04989a171442b90c2</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aead6476441626a33fda6454c829d8d9a</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9890ca14cbadd90f0c4ec3d723e3c73f</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3bd0570f833cf42d377ee7cbceb0e453</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4879a3354fcd830933d6ec8e56a7fb38</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a860d02174604eab87f0697383f1de557</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a520bd5e7211b6c6c9fffe316b0349ecc</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a702f89f2149e4ac25765265ca74c16a1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4638e65f60e07c46587538a4a19d5b13</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad8ff4c0defa9b2ee308a091c7f233493</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa71aaab91c3586527b77b9465c02395e</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab2073e7075b8d90298f6db2348505e27</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>b_not</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a54452404cfaaf83f5b965521dbbbb367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator~</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab623e93ff909044db41d8c015a4d7803</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a86b4ebd3a9862b2096d1d1ebf7020773</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a264fd8ad14c2506578f3fab7afee73e3</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af5420c5998e155af8045d7ba113c25c7</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a84a62dca75210780c5c0497a3373e80a</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad1a2f9aa2a0faa5ef1dcd03033561653</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a7a90a06ece25915931d5f1bb7c05c6</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a25da5016b367fed5c870eaeef07d171d</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af8ff7f708c8346a7cfd7ada069813239</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a265eb47dfd10779203073fcc79481e80</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a72dfb5f39e2ffa7b2bec0c65272dcda1</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f5f07afb0bdbe12a07aceeac87ac1c</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a8a716dac2f55fc52b05ce1f66a0b1044</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2a732d8b954d43fff798962505ca84b1</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6de32120589bcf21fa3f07c4025c6b12</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad032653d364c3a15395447b45a9d37e4</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>afd2d9f5b89f02a81214ccd241a9fe905</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a30fd2985c264d3a98401bb7964ba95b8</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a40729092dcbf1aec07c974d0106fa9d1</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a449bc65eff8f926ed81fd2f175f29a5f</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f8c836a667af63928a772337d4a9887</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5b10312822e9328d303b1e2bf0d15579</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0038a437e94cf9c50c9b3b8781f5f723</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a477ea9f549391112e8be4d8bd406d73f</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a641a8aa4ae96d1b5f621ede257d5c5c6</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a22aaf970caa71b12f22ab3d792113173</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae282cd3b774a20d6f757b47e91ca9f79</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae078fe2a615548682d5c44caa00e0be8</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a29b4d09ec21cc7134de32035ca87a143</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1b261a6fdeb1b543f98867e72de8ad7c</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92173f91180737e0cb58c4c97a1a7bd2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a03bb4d0bc2ebfd730c85167e4fdd9416</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a533bb3030cec09841ce4578dd7f48b25</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f175af5379de67f31c991ab71f6a2a</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac9f2af15b5bbce57f3ff7ada3ad12bc6</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa189758b04335d961d260421fca9c19a</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a753198b9f3cdc0493aeff06c667169f0</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1d8f410adb1a52dc867feb22e1f035bd</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6638fd229d4444d9602ff02b65c54556</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a46a5689d72dc32f37a3b87c775dd13b0</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1e7f8dd8fb35aa8275b3dca88f950b4e</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23945b783cd3eeeede0b8539fafb6219</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a145e31a2ffec3aea379a3ea6e88d84</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab4e00cb55adfae59734b0bbf40107619</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4e4780d3519341015d4dc970d142f322</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eba8a5074f6939c4f8372bc39c83cc7</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7bdf613f95d2694e3cb53c350768479f</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a45f9ab67990ed27b795d684059333d6b</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af561359c97a630df5b7ac6c95f6faa73</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a95fdc53f9f4a5cc5a21a9168001e9b28</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c5ebb79ada10f6a7573689135dda594</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a701c0b283c49b22752d0671b2a5b2318</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf156376b1d12a81efdf432582d63971</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a648c7584d2a91abb2bc4269a8f9ef4b0</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2de0c28f7fe5ad3f7d8cc383f50466f1</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ade17b406588b0e4be8870dd3ff527659</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5726462fceb02bd2eee0f50449247ab2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f7c39b9a776290689395c541b620b7f</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaced446f27460c93611b3e74f327d056</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a297900474ee55749af025ebcbab9951b</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adc2090cb2526b39b65e98238897081c0</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11900667adbee5a92661353b275f603e</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a035057831a850194fdc1dc58c045b714</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af73baceda1dba48a4cfb5b7cc357288b</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2413456c990b78a93ca8942279e58593</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaaa722d2c7225751c702cf45a3f10da9</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aeab2cdc4f3cc8a36599751accd5b2ebb</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92f0cb3e2d5ec8844bb7f98970d2f6d2</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5148c79e5ba084eb6b05b9fc2faa0e67</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74614e41eb31d026ecab0a7bfeff7d99</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7396528f2bf3c2fe379aa4db4a21cd43</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae62b2196c54f18f168f1dbc2a7f1a7af</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a711d1a9cdfd65453d5732472df413405</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3e89ed1516e6d787166c54f8dda4faca</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a48e8fc7e6215c5da1dbc61bed2c7afa5</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a78c04f56c35bde2d930bc62f280debd0</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eff76e16e705c31e7e28354471f4061</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23fc7286d2bc7f8296a0bb47e12ce159</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa709c0dda0d9195448401dae88242bd0</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2882e7426bc972fbb191889d2dcd1bf9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae90ffd99bed3830ce4a5e8bbba46ecaf</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a09b602fca8cd3df55a16e69ed75178a6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a4576482a8ea60cba6b1ffcaa79bafd</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>lrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0aec43149b265e26139d8b9973a6991a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>rrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af0fd16d5bc50daa7286e0d3cf6a6f6e2</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>reverse</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4b367159d44258eecf57bd36c16d5554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; sc_lv_base &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf77fba82163eda04b7e40dd4e28442f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; sc_lv_base &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a896497462d930a195e394f8476b61d05</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; sc_lv_base &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a712d82f04d4289ecf22eea07149dc559</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; sc_lv_base &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa2c66ae15e2ca06be161f64314d87ac0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; sc_lv_base &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab393eba9b1480ab97d0dee2513165820</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; sc_lv_base &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a64c3a779968cde182045205600e4cd90</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; sc_lv_base &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0b63028369350f1388a93a299446a3d7</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; sc_lv_base &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4c4467c60f64375b37bd31b1d9add11b</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>and_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11bc43f1ff73917096e7340efe94493b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nand_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adfa45a6455349e732a1621f49aee32bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>or_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a50a6d8e4725d98e652b37faa6d60cc29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f4ac80eeb51a9d60f9ad77f817ff9f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac05f7b13229ad82e93f196b1baf2f6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xnor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a270334afad7be2944c32f8e8ebb2a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad13398f205d5b8a53f71605412f361df</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7829bdf1b498079c14ebec82b1405eb0</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f1254d5bdb19033d0ae8ac571c4eafe</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a889b273c321437528630c794964f1da6</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3018eb3e4553f73e21d3ffa6d6ea765c</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad806388868e0fd388eb352136ae60ee8</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c6535f135da67eadf1d0529d4cd608c</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6a48d1107e791634cbceaed0b2187965</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab63313dafe9ab775c588ed8da8bbd06b</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7f2fbed25a2b7e77ee8c3260ed1e1c6a</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74ce3db95d1d00e5f35425015f8300ac</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a10364103e06df161f81b33dbdec68b3e</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae25f4528cb003daec2784f5bac4c6dfc</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aac319bd336dfdbcfc3e8a8b293f3df2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5ef75afb2bccd38c135ecd33c436ee28</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2042eb0fd5e678cc15438b3bc932c677</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5f397533750a51f6aef9d47d249dd60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adaa8fae85694bca2cc32df9a096bf831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>abfee16d1787a828ac01decd569199aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a714205f3bd2bd16a979f8e8d8b77181f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a13ab95af579bbee1ee64f4d3274929f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a93218be1c993aa03bd6f33453b682768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af3cd336e8752b48bf608fa7eda24ca51</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1bac4fd44ca356072cb734e8fd74a6eb</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_bounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a146fc7f639127ff0614a4b1c2034a289</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_wbounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a840c619647d717b35123f933d4cb3570</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_digit</type>
      <name>to_anything_unsigned</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a453ffec2738e7e1065549504d2c33dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>to_anything_signed</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2aa696455dd02c24c982228db9744f3d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_proxy&lt; sc_subref_r&lt; X &gt; &gt;</name>
    <filename>a01412.html</filename>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; sc_subref_r&lt; X &gt; &gt;::type</type>
      <name>traits_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acee0b8284a8d3e544d191b093c221851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaa4692ad396c4cef0b790b3861206a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_proxy</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>accea890ca3d76271b14869cd5d296c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a489a3ac3560c28ea6ddc93f36db011c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_subref_r&lt; X &gt; &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aad29fc1cb5bd123799ce597553889ebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae9bd2cfad180ee59cc256d908798d5e8</anchor>
      <arglist>(const sc_proxy&lt; Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf1b2909e107881e6dcbe686f2988c83</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac0337fdba86b96a04989a171442b90c2</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aead6476441626a33fda6454c829d8d9a</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9890ca14cbadd90f0c4ec3d723e3c73f</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3bd0570f833cf42d377ee7cbceb0e453</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4879a3354fcd830933d6ec8e56a7fb38</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a860d02174604eab87f0697383f1de557</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a520bd5e7211b6c6c9fffe316b0349ecc</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a702f89f2149e4ac25765265ca74c16a1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4638e65f60e07c46587538a4a19d5b13</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad8ff4c0defa9b2ee308a091c7f233493</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa71aaab91c3586527b77b9465c02395e</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>assign_</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab2073e7075b8d90298f6db2348505e27</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>b_not</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a54452404cfaaf83f5b965521dbbbb367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator~</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab623e93ff909044db41d8c015a4d7803</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a86b4ebd3a9862b2096d1d1ebf7020773</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a264fd8ad14c2506578f3fab7afee73e3</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af5420c5998e155af8045d7ba113c25c7</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a84a62dca75210780c5c0497a3373e80a</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad1a2f9aa2a0faa5ef1dcd03033561653</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a7a90a06ece25915931d5f1bb7c05c6</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a25da5016b367fed5c870eaeef07d171d</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af8ff7f708c8346a7cfd7ada069813239</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a265eb47dfd10779203073fcc79481e80</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a72dfb5f39e2ffa7b2bec0c65272dcda1</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f5f07afb0bdbe12a07aceeac87ac1c</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a8a716dac2f55fc52b05ce1f66a0b1044</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2a732d8b954d43fff798962505ca84b1</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6de32120589bcf21fa3f07c4025c6b12</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad032653d364c3a15395447b45a9d37e4</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>afd2d9f5b89f02a81214ccd241a9fe905</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a30fd2985c264d3a98401bb7964ba95b8</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a40729092dcbf1aec07c974d0106fa9d1</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a449bc65eff8f926ed81fd2f175f29a5f</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f8c836a667af63928a772337d4a9887</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5b10312822e9328d303b1e2bf0d15579</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0038a437e94cf9c50c9b3b8781f5f723</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a477ea9f549391112e8be4d8bd406d73f</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a641a8aa4ae96d1b5f621ede257d5c5c6</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a22aaf970caa71b12f22ab3d792113173</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator &amp;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae282cd3b774a20d6f757b47e91ca9f79</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae078fe2a615548682d5c44caa00e0be8</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a29b4d09ec21cc7134de32035ca87a143</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1b261a6fdeb1b543f98867e72de8ad7c</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92173f91180737e0cb58c4c97a1a7bd2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a03bb4d0bc2ebfd730c85167e4fdd9416</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a533bb3030cec09841ce4578dd7f48b25</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a15f175af5379de67f31c991ab71f6a2a</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac9f2af15b5bbce57f3ff7ada3ad12bc6</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa189758b04335d961d260421fca9c19a</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a753198b9f3cdc0493aeff06c667169f0</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1d8f410adb1a52dc867feb22e1f035bd</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6638fd229d4444d9602ff02b65c54556</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a46a5689d72dc32f37a3b87c775dd13b0</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1e7f8dd8fb35aa8275b3dca88f950b4e</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23945b783cd3eeeede0b8539fafb6219</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a145e31a2ffec3aea379a3ea6e88d84</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab4e00cb55adfae59734b0bbf40107619</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4e4780d3519341015d4dc970d142f322</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eba8a5074f6939c4f8372bc39c83cc7</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7bdf613f95d2694e3cb53c350768479f</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a45f9ab67990ed27b795d684059333d6b</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af561359c97a630df5b7ac6c95f6faa73</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a95fdc53f9f4a5cc5a21a9168001e9b28</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c5ebb79ada10f6a7573689135dda594</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a701c0b283c49b22752d0671b2a5b2318</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf156376b1d12a81efdf432582d63971</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a648c7584d2a91abb2bc4269a8f9ef4b0</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2de0c28f7fe5ad3f7d8cc383f50466f1</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ade17b406588b0e4be8870dd3ff527659</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5726462fceb02bd2eee0f50449247ab2</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2f7c39b9a776290689395c541b620b7f</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaced446f27460c93611b3e74f327d056</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a297900474ee55749af025ebcbab9951b</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adc2090cb2526b39b65e98238897081c0</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11900667adbee5a92661353b275f603e</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a035057831a850194fdc1dc58c045b714</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af73baceda1dba48a4cfb5b7cc357288b</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2413456c990b78a93ca8942279e58593</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aaaa722d2c7225751c702cf45a3f10da9</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aeab2cdc4f3cc8a36599751accd5b2ebb</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a92f0cb3e2d5ec8844bb7f98970d2f6d2</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5148c79e5ba084eb6b05b9fc2faa0e67</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74614e41eb31d026ecab0a7bfeff7d99</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7396528f2bf3c2fe379aa4db4a21cd43</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae62b2196c54f18f168f1dbc2a7f1a7af</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a711d1a9cdfd65453d5732472df413405</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3e89ed1516e6d787166c54f8dda4faca</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a48e8fc7e6215c5da1dbc61bed2c7afa5</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a78c04f56c35bde2d930bc62f280debd0</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4eff76e16e705c31e7e28354471f4061</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a23fc7286d2bc7f8296a0bb47e12ce159</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa709c0dda0d9195448401dae88242bd0</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2882e7426bc972fbb191889d2dcd1bf9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae90ffd99bed3830ce4a5e8bbba46ecaf</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a09b602fca8cd3df55a16e69ed75178a6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a4576482a8ea60cba6b1ffcaa79bafd</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>lrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0aec43149b265e26139d8b9973a6991a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>rrotate</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af0fd16d5bc50daa7286e0d3cf6a6f6e2</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; &amp;</type>
      <name>reverse</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4b367159d44258eecf57bd36c16d5554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; sc_subref_r&lt; X &gt; &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>acf77fba82163eda04b7e40dd4e28442f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; sc_subref_r&lt; X &gt; &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a896497462d930a195e394f8476b61d05</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; sc_subref_r&lt; X &gt; &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a712d82f04d4289ecf22eea07149dc559</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; sc_subref_r&lt; X &gt; &gt;</type>
      <name>bit</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aa2c66ae15e2ca06be161f64314d87ac0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; sc_subref_r&lt; X &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab393eba9b1480ab97d0dee2513165820</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; sc_subref_r&lt; X &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a64c3a779968cde182045205600e4cd90</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; sc_subref_r&lt; X &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a0b63028369350f1388a93a299446a3d7</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; sc_subref_r&lt; X &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a4c4467c60f64375b37bd31b1d9add11b</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>and_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a11bc43f1ff73917096e7340efe94493b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nand_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adfa45a6455349e732a1621f49aee32bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>or_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a50a6d8e4725d98e652b37faa6d60cc29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f4ac80eeb51a9d60f9ad77f817ff9f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ac05f7b13229ad82e93f196b1baf2f6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xnor_reduce</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9a270334afad7be2944c32f8e8ebb2a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad13398f205d5b8a53f71605412f361df</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7829bdf1b498079c14ebec82b1405eb0</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a9f1254d5bdb19033d0ae8ac571c4eafe</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a889b273c321437528630c794964f1da6</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a3018eb3e4553f73e21d3ffa6d6ea765c</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ad806388868e0fd388eb352136ae60ee8</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7c6535f135da67eadf1d0529d4cd608c</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a6a48d1107e791634cbceaed0b2187965</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ab63313dafe9ab775c588ed8da8bbd06b</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a7f2fbed25a2b7e77ee8c3260ed1e1c6a</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a74ce3db95d1d00e5f35425015f8300ac</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a10364103e06df161f81b33dbdec68b3e</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>ae25f4528cb003daec2784f5bac4c6dfc</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>aac319bd336dfdbcfc3e8a8b293f3df2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5ef75afb2bccd38c135ecd33c436ee28</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2042eb0fd5e678cc15438b3bc932c677</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a5f397533750a51f6aef9d47d249dd60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>adaa8fae85694bca2cc32df9a096bf831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>abfee16d1787a828ac01decd569199aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a714205f3bd2bd16a979f8e8d8b77181f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a13ab95af579bbee1ee64f4d3274929f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a93218be1c993aa03bd6f33453b682768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>af3cd336e8752b48bf608fa7eda24ca51</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a1bac4fd44ca356072cb734e8fd74a6eb</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_bounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a146fc7f639127ff0614a4b1c2034a289</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_wbounds</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a840c619647d717b35123f933d4cb3570</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_digit</type>
      <name>to_anything_unsigned</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a453ffec2738e7e1065549504d2c33dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int64</type>
      <name>to_anything_signed</name>
      <anchorfile>a01412.html</anchorfile>
      <anchor>a2aa696455dd02c24c982228db9744f3d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits</name>
    <filename>a01416.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_bitref&lt; X &gt; &gt;</name>
    <filename>a01432.html</filename>
    <templarg></templarg>
    <base>sc_dt::sc_proxy_traits</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_bitref_r&lt; X &gt; &gt;</name>
    <filename>a01428.html</filename>
    <templarg></templarg>
    <base>sc_dt::sc_proxy_traits</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_bv_base &gt;</name>
    <filename>a01420.html</filename>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; sc_bv_base &gt;</type>
      <name>traits_type</name>
      <anchorfile>a01420.html</anchorfile>
      <anchor>a6bdc9d28d2ae4140d4d9bfdcca10dd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>value_type</name>
      <anchorfile>a01420.html</anchorfile>
      <anchor>abe14bc464c7ca3f1e54ff8f471d993d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>bit_type</name>
      <anchorfile>a01420.html</anchorfile>
      <anchor>aefaea1ebd96c758ef03ab34f069d58b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_bv_base</type>
      <name>vector_type</name>
      <anchorfile>a01420.html</anchorfile>
      <anchor>a3d05c67d2c135ecd1a80bc2f01b8f149</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type</type>
      <name>type</name>
      <anchorfile>a01420.html</anchorfile>
      <anchor>aae760d412b4b3ae9e1666b21180342b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_concref&lt; X, Y &gt; &gt;</name>
    <filename>a01460.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>sc_mixed_proxy_traits_helper&lt; X::traits_type::type, Y::traits_type::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_concref_r&lt; X, Y &gt; &gt;</name>
    <filename>a01456.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>sc_mixed_proxy_traits_helper&lt; X::traits_type::type, Y::traits_type::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</name>
    <filename>a01424.html</filename>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; sc_lv_base &gt;</type>
      <name>traits_type</name>
      <anchorfile>a01424.html</anchorfile>
      <anchor>a7924f5c80decd41a823decb430238721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_logic_value_t</type>
      <name>value_type</name>
      <anchorfile>a01424.html</anchorfile>
      <anchor>af5841dc11601db55930a77f00a2a5d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_logic</type>
      <name>bit_type</name>
      <anchorfile>a01424.html</anchorfile>
      <anchor>a82bf7f8d1e45381a714e5c6b71808f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_lv_base</type>
      <name>vector_type</name>
      <anchorfile>a01424.html</anchorfile>
      <anchor>a5443cef98101c73aed54aae383082d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type</type>
      <name>type</name>
      <anchorfile>a01424.html</anchorfile>
      <anchor>a463d94bee2fd8dcc1492edb05f436b81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_proxy&lt; X &gt; &gt;</name>
    <filename>a01444.html</filename>
    <templarg></templarg>
    <base>sc_dt::sc_proxy_traits</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_subref&lt; X &gt; &gt;</name>
    <filename>a01440.html</filename>
    <templarg></templarg>
    <base>sc_dt::sc_proxy_traits</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_subref_r&lt; X &gt; &gt;</name>
    <filename>a01436.html</filename>
    <templarg></templarg>
    <base>sc_dt::sc_proxy_traits</base>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_pvector</name>
    <filename>a02036.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_iterator</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ac9c1354fc50d68740fdd551b781a0710</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ab2816a13887cc1060609f6a2ba06d028</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_pvector</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ac682432c080131304c11dd1f475cb1a4</anchor>
      <arglist>(int alloc_n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_pvector</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ad00eb10bf276225da8e99ab29fbe05b2</anchor>
      <arglist>(const sc_pvector&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_pvector</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ab2d7e7a33f0f32d89eb679b2a107eaa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a20d80a6cada6372a25b1f622495abdcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ac6af1c03ca496dd688b1ac0c9e39026f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a567d26813ecdfc4a9f2471a6815cb628</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a417cf2ad581cfc92cc293a9ba5244209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a2e0f456af0a31ba2d8ad2d4761bc3b65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_pvector&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a826d0ba73728077316299385ae2450c2</anchor>
      <arglist>(const sc_pvector&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a5eeae0e6fdfd24ce9ace78be47154d3a</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a5242a450ea0563ab6df86f6d5f720246</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fetch</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>aab98ce720e6b0651a51a1200666ff5d2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fetch</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>aafcd3b9b27544296d3b950a231f6adec</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>raw_data</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a9e97958c548e6bff3b2333dbc44bdcad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>raw_data</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ab7af8efc905511b2897fc859d3d20821</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const ::std::vector&lt; T &gt; &amp;</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a288d1f44c3b4a29f7664709b1e620343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a34208867e140a447cff66ffc221d1c68</anchor>
      <arglist>(T item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase_all</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a01070908127744178971b57030c2db10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>acec913cd1aa138a2e70bfde9df1497fa</anchor>
      <arglist>(CFT compar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>ae25fb5f8f28ade9124b24bcafdfd928f</anchor>
      <arglist>(T item, int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decr_count</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>aa5257c0622a0d6da68e3343a9ca9fcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decr_count</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a8ca50da1abe8653f35a342e205fa4a3c</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mutable ::std::vector&lt; T &gt;</type>
      <name>m_vector</name>
      <anchorfile>a02036.html</anchorfile>
      <anchor>a2de0a1016715adb1fa5f0fd0159ac706</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_report</name>
    <filename>a02040.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_report</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a69e2466d84837de7691cc3f664da9c27</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_report &amp;</type>
      <name>operator=</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ac1dece76c141506a5c156a2fbbc40a47</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_report</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a3fe03b50da9dedc559d6b47d49ed9814</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_msg_type</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a6f49a8383eeb5a14b7ca59c35b709ed5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_msg</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ac8db9a4416f65b66f1734750851bc1f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_severity</type>
      <name>get_severity</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ac27d91a69ccf0020469eb9eae6ed75dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_file_name</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a92a21489cc2cee4c97579e6cadc29ffc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_line_number</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a7a8274efcf44f5b4f049251bab9ba646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>get_time</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>aabf91a421a90dfa5c9e92a9a1245a1d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_process_name</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a6507658dc932d26852b476b2d435df10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_verbosity</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>afccaef2a01b79e56695ef3a1ebc08453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ab01fe32b8c41f1a8a0b1770c0ec2983d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>ae4c803a896ab106fb85a1da6d2dd24fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a749bfa2eab9c71a257883986771c3469</anchor>
      <arglist>(sc_report &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_id</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a8bdfdadb285609318d15fa61040ee4b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>get_message</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a6083a6de7a1c3b40d405d9d459593d9e</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_suppressed</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a9c5f3831495a9112ff3b36def62e3b8a</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_warnings_errors</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a17d064208ef1237c8acee0367fbc9524</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>register_id</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a29444bcc87f33553222f4dfa59febaf7</anchor>
      <arglist>(int id, const char *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>suppress_id</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a173032de1318fa6362b755519921a056</anchor>
      <arglist>(int id, bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>suppress_infos</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a7d17fa48fedbceffb8f6b599ffeb543d</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>suppress_warnings</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a071058617234e14af95d74160a226300</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_report</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a6690fe02e85097442c58240e35ceb430</anchor>
      <arglist>(sc_severity, const sc_msg_def *, const char *msg, const char *file, int line, int verbosity_level=SC_MEDIUM)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_severity</type>
      <name>severity</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a4c15d41e03a228a892c6dd50f8d4110a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_msg_def *</type>
      <name>md</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a4c662eb8f2c1eca3ada268a34e45e00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>msg</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a4a59c2388719c3a03e945f3b7828b170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>file</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a3c57ea4596fc8d7e514d2409b7b4aea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>line</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>afdc783ad849e1b81bcb920e62392b3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time *</type>
      <name>timestamp</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a7b7fdef48274049bf9b24d3f886aee61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_object *</type>
      <name>process</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a9d581ae5c21041d7187fd490ce131854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_verbosity_level</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a53aada114f80b94d3e6ed37ef48df304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>m_what</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a9d9e9190baf7d7b29a5660e2ea280d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_report_handler</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>aaba7034cfa93e6c1a3e2f1e9e57f9b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend sc_report *</type>
      <name>sc_handle_exception</name>
      <anchorfile>a02040.html</anchorfile>
      <anchor>a65bb9f2f294b62890c4b090de85258dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_report_handler</name>
    <filename>a02048.html</filename>
    <class kind="struct">sc_core::sc_report_handler::msg_def_items</class>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a2f5982e27329ddf79528a42682d4cafa</anchor>
      <arglist>(sc_severity, const char *msg_type, const char *msg, const char *file, int line)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a46b22c53c6977d135dcc9bc067e72b78</anchor>
      <arglist>(sc_severity, const char *msg_type, const char *msg, int verbosity, const char *file, int line)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>set_actions</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a12fa58880045f69093171ef9087a3e71</anchor>
      <arglist>(sc_severity, sc_actions=SC_UNSPECIFIED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>set_actions</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a80bce4475369c277dad6004f72c0e6ec</anchor>
      <arglist>(const char *msg_type, sc_actions=SC_UNSPECIFIED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>set_actions</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a639eb7a2d3ef8245076ecd9a7257be14</anchor>
      <arglist>(const char *msg_type, sc_severity, sc_actions=SC_UNSPECIFIED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stop_after</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>aa730d4804036b41675f0a44a8492619a</anchor>
      <arglist>(sc_severity, int limit=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stop_after</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a625fab1c491ddba0a203adbff4a350a0</anchor>
      <arglist>(const char *msg_type, int limit=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stop_after</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a43785f0d26da14c5afba1aac261e7ed7</anchor>
      <arglist>(const char *msg_type, sc_severity, int limit=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>suppress</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>ad8efc312922c9ff796a8f0e9863b4b3a</anchor>
      <arglist>(sc_actions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>suppress</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a5d209bc5905df0618be6fff118ee6207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>force</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a8ed5ae33998b96349e4e3e7463a9f349</anchor>
      <arglist>(sc_actions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>force</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a3d7e3bee1d6e3447223d681f009f2db3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_count</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>adae3db5a5eca940bb6b72bf3d868a43b</anchor>
      <arglist>(sc_severity severity_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_count</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a64614f9f138da99cab2a1a2903c5ffe3</anchor>
      <arglist>(const char *msg_type_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_count</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>acf560b2f424bd13db680f165f77c3261</anchor>
      <arglist>(const char *msg_type_, sc_severity severity_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_verbosity_level</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>aa94b00d0247b5a2231d0a21c960bae9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>set_verbosity_level</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a12e15f16c2f86d08be3ae7a9e7a18665</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a1a700d6e3597d808ca287eb45ebf82dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a97ab01a401e6b1b703a5f627e779b576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_report_handler_proc</type>
      <name>set_handler</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a63ae30f73b77ce21615413a63354d12a</anchor>
      <arglist>(sc_report_handler_proc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_report_handler_proc</type>
      <name>get_handler</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a2a193142918cc8150033097486de31af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>default_handler</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a3d2a0bc49f9bb29c766fbb33697448eb</anchor>
      <arglist>(const sc_report &amp;, const sc_actions &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>get_new_action_id</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a4f8d77c90063490aa7466e63e28877e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_report *</type>
      <name>get_cached_report</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a396c7143e259377e544760014891d27c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear_cached_report</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>ae2e22d432f4a9eae29e8e73d832b3f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>set_log_file_name</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>af6e78f8f6055ab877630d53870ce85cb</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>get_log_file_name</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a238e9ebcb5233c21d85efaab5aa9812c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_static_msg_types</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a08d60085012c319c35045717cabfd5ff</anchor>
      <arglist>(msg_def_items *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_msg_def *</type>
      <name>add_msg_type</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a46718c5ee3a749d9b55e3dd288587116</anchor>
      <arglist>(const char *msg_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>ae66f8ac6885bf8a8954fbe9597e1cf26</anchor>
      <arglist>(sc_severity, int id, const char *add_msg, const char *file, int line)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>cache_report</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a924ab6206f0b1c914709242b87cb4f44</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>execute</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a6a81c2d0c7f56ef2ba4e4c175bd950cc</anchor>
      <arglist>(sc_msg_def *, sc_severity)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static sc_msg_def *</type>
      <name>mdlookup</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>ad6919481818ec1e25be0fc4097cbe682</anchor>
      <arglist>(const char *msg_type)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>suppress_mask</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a93d4239b2a2bb543dcdbb43a0f726f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>force_mask</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a9b2f87072ff55af8082d9751b65c9a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>sev_actions</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a8780dce51eb67ac1beca6c5b0619c738</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static unsigned</type>
      <name>sev_limit</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a070934d1902f18a565d78fc2783b0e6f</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static unsigned</type>
      <name>sev_call_count</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>afd84d41cdbddc97a8d54d699ebee78a3</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_report *</type>
      <name>last_global_report</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a3862196aab67e3ea88b53f843a3d544d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>available_actions</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>ada57f87504198adced48e443dc1fd7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static char *</type>
      <name>log_file_name</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a2add9c71044d7ae7c82db2ac0eecd605</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>verbosity_level</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a883db3d127e7676353fe72e0b104906d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static msg_def_items *</type>
      <name>messages</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>af9d9e21bc401e78d3b6ecbf4ccb285c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static msg_def_items</type>
      <name>msg_terminator</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a41907c3ad9176745ae6a0755bddde819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_report_handler_proc</type>
      <name>handler</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a27377bcce2e0bd434733a21fea45a63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_report</name>
      <anchorfile>a02048.html</anchorfile>
      <anchor>a0752ef816341a65f29f869d200c86549</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_reset</name>
    <filename>a01892.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_reset</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>ab0f28fbfbe059183806280c8edbe15d3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; *iface_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>notify_processes</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a6a4d8abc3fee9340ffc7c57685e372d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_process</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a76df1ddaa2cb5fddf32174f9de336ebd</anchor>
      <arglist>(sc_process_b *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reconcile_resets</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a43dcafac926873419aa3214f5f23d48e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>ae7d09b54e38a6f2250347859929c3374</anchor>
      <arglist>(bool async, const sc_signal_in_if&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>ac5f468a5a6b6f08fe345d1b0c616cc1f</anchor>
      <arglist>(bool async, const sc_in&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>aa4b24fb1b10759bc53c63dea2f11ada9</anchor>
      <arglist>(bool async, const sc_inout&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a78d2fdf2bd7357c7f3495176ae9e47e2</anchor>
      <arglist>(bool async, const sc_out&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_signal_in_if&lt; bool &gt; *</type>
      <name>m_iface_p</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a182ac2397b431be9cfa1da1fc3b5233b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_reset_target &gt;</type>
      <name>m_targets</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a9dfa71633901f6b8c78e3b76019cc544</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_cthread_process</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>af2c9e96bc0fe4f99c3fdbf18a3965fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signal&lt; bool, SC_ONE_WRITER &gt;</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>aed8bd449a86d253c0bb8244d163f97ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signal&lt; bool, SC_MANY_WRITERS &gt;</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>abd6d1d40161d82c11b78741e28868bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signal&lt; bool, SC_UNCHECKED_WRITERS &gt;</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a6955ada6338a02dc37b3ce53bed13b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_spawn_reset</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>aa7502c4c4532c9b04b5368d321554349</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01892.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_reset_target</name>
    <filename>a01888.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>m_async</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>aacb45ee9fbbe13c48f21fa00260f423e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_level</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>ad1244aeb679918ddf0f70c88554c0a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_process_b *</type>
      <name>m_process_p</name>
      <anchorfile>a01888.html</anchorfile>
      <anchor>ace2d7ddc8bd1e80fbf0e21362d1372f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_runnable</name>
    <filename>a01896.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_runnable</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a25c522a6ae4220b655b3b2ad9495d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_runnable</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a0b229274cabc74789b9ec67a37d18b05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a08bcc8fa13b220c4f67db7cf3136e9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggle_methods</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a00a80901a65cc204ced7db9af698007c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggle_threads</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>ab610e2e8924f9e21863f83897462d9d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_method</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a79126ce283e9e1e14a71d06aaf30ca8e</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_thread</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>aa1e1024be4438bbea4845cc629a4a352</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute_method_next</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a94d489fc7ae649460c62b8661d2a4e28</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute_thread_next</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a39bee2036a6731976222445a56175f1b</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back_method</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>adb7cad7b6eded23b17882cf92c2ee7ad</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back_thread</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a840d9587ece497f2c64ba35f0babc790</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front_method</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>ae2995bc36b3cb0244eb1a0a76ae4f879</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front_thread</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a22e36e2799e565725d22e9a77964a95d</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>aa45c5c77d12c00cd81f2cf94ef60d62f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_empty</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>ae1a08294e423d8b0d0c8898e70770609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_method_handle</type>
      <name>pop_method</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>ae824571559dacd7de8601e144dfd452e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_thread_handle</type>
      <name>pop_thread</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>afee0c05abfda18740ad7d427c612f523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01896.html</anchorfile>
      <anchor>a18667baf83471811c0eb25259aa4311a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_scoped_lock</name>
    <filename>a01192.html</filename>
    <member kind="typedef">
      <type>sc_mutex_if</type>
      <name>lockable_type</name>
      <anchorfile>a01192.html</anchorfile>
      <anchor>aa0372401b86ca9c680b6a0b3ca587648</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_scoped_lock</name>
      <anchorfile>a01192.html</anchorfile>
      <anchor>a7ab4d6c186ebc30999014602bd582deb</anchor>
      <arglist>(lockable_type &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>release</name>
      <anchorfile>a01192.html</anchorfile>
      <anchor>a144cc48927dd272767638856b58de56f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_scoped_lock</name>
      <anchorfile>a01192.html</anchorfile>
      <anchor>a63a2c68ec6a47e53114fb6f5ea02c2ec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_semaphore</name>
    <filename>a01220.html</filename>
    <base>sc_core::sc_semaphore_if</base>
    <base>sc_core::sc_object</base>
    <member kind="function">
      <type></type>
      <name>sc_semaphore</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>aeef4c0badd55db086e7fafa0af1b61c0</anchor>
      <arglist>(int init_value_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_semaphore</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>abb812ffada0aa593016d68e4e1ed8987</anchor>
      <arglist>(const char *name_, int init_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>a3dfe662a01bf1969d4653760a16a4dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trywait</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>a2dc83e13c644fe76e7dff55acb2a54b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>post</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>a10b7e710d29b7f5e5186c6e83e048517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>a8185e27765f9e6f961c7ff7e76ce3274</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>a974e1aa91d01c684f2d3266d2785132e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>in_use</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>af17df3402c17d093359459e5e0b19966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>a024ab702400b697fe184a951c1ef9618</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_free</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>ad6103731d523d85dac4b5c3df11b010f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_value</name>
      <anchorfile>a01220.html</anchorfile>
      <anchor>abb0967254d50a4126b6c06eb27b77c01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_semaphore_if</name>
    <filename>a01224.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>wait</name>
      <anchorfile>a01224.html</anchorfile>
      <anchor>a502abd3615bf0acc76fdcbfbdd37ce86</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>trywait</name>
      <anchorfile>a01224.html</anchorfile>
      <anchor>a2f5726bc11969f8dd2fce2c1e6940334</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>post</name>
      <anchorfile>a01224.html</anchorfile>
      <anchor>a40b9903de2407397edb7f8115613a22d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_value</name>
      <anchorfile>a01224.html</anchorfile>
      <anchor>a8e0c609b176a938d4fbdf454874ddb66</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_semaphore_if</name>
      <anchorfile>a01224.html</anchorfile>
      <anchor>ae8e4f1f89aa8e6e34882b7461abe19e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_sensitive</name>
    <filename>a01900.html</filename>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; bool &gt;</type>
      <name>in_if_b_type</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a2e61b579211d8011a12fba888ead2056</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt;</type>
      <name>in_if_l_type</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>ac3f43490de86f6d8067a2c1ec4bc3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>in_port_b_type</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a1d8a8819c03250c3df4e84f4b9af8d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; sc_dt::sc_logic &gt;</type>
      <name>in_port_l_type</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>aa3ffb00434505c8469e8615ae57b8030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>inout_port_b_type</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>af0631ca47e844b14a71aa481082e4ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; sc_dt::sc_logic &gt;</type>
      <name>inout_port_l_type</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>affa5fe5c20da14acde95edcd6dc0900a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a11be970beb4850689f34800d976f2454</anchor>
      <arglist>(sc_process_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a9a330569ede0bf8734f4e6f0067a73af</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a611dd4f43b4743c46456adab29364a53</anchor>
      <arglist>(const sc_interface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>aa7753b16dcb7c9fb7aa5aec914055d90</anchor>
      <arglist>(const sc_port_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>af6c326e1c13d7ff137bf3759a64cb0c9</anchor>
      <arglist>(sc_event_finder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a0587098fb48fe783c01da64510274d44</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>aff4a7142765d3364b66820dcff9b7e5f</anchor>
      <arglist>(const sc_interface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>abdbc104b52076270f5016faec39f80ca</anchor>
      <arglist>(const sc_port_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a1af836a9eea5e87d4082c0cc8146ed96</anchor>
      <arglist>(sc_event_finder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>aa5174d2c84e5166053674f7b51269493</anchor>
      <arglist>(sc_cthread_handle, sc_event_finder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a1e31c7221bf30ed5934c941365579099</anchor>
      <arglist>(sc_cthread_handle, const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a86fc6c7a8d0c50714414e1b2695a6f95</anchor>
      <arglist>(sc_cthread_handle, const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a6d178ff0e5c9ba79c30db9aa86fe2481</anchor>
      <arglist>(sc_cthread_handle, const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a5a4fee14dddaabf34f08aa49be45b0d3</anchor>
      <arglist>(sc_cthread_handle, const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>af56e874598c7276e03274ea25672ab3f</anchor>
      <arglist>(sc_cthread_handle, const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a72bf46bdca6c2b299d7aeaf133e38b4e</anchor>
      <arglist>(sc_cthread_handle, const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a043ab37bf5ac8b32532b0a232358d507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_static_sensitivity</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>ae24c60148462ab30ca8278dd9823d97f</anchor>
      <arglist>(sc_process_b *, const sc_event &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_static_sensitivity</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a8bebbeac56ad6847ee7acdc39dfdcc51</anchor>
      <arglist>(sc_process_b *, const sc_interface &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_static_sensitivity</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a1b9b07cd5bec5a1be47fad3fbbdc59ea</anchor>
      <arglist>(sc_process_b *, const sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_static_sensitivity</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>aa3c1bb637a41e33862f9905a2e72fea7</anchor>
      <arglist>(sc_process_b *, sc_event_finder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01900.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_sensitive_neg</name>
    <filename>a01908.html</filename>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; bool &gt;</type>
      <name>in_if_b_type</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>afa026c8d89e686d56802cda9874593f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt;</type>
      <name>in_if_l_type</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>ac43e59600a2b4f4415e9a1f856e828c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>in_port_b_type</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a3c3bad76445b4edc2004a8b33dec624f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; sc_dt::sc_logic &gt;</type>
      <name>in_port_l_type</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a2f1c7cafd933b6734161b741a66c73d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>inout_port_b_type</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>ad5a92bb40296d98324b38fb383776af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; sc_dt::sc_logic &gt;</type>
      <name>inout_port_l_type</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>afce660777df26f91b640bf26bfdc0482</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>ab00a94bcd5f88364402d1d15f2e4f6de</anchor>
      <arglist>(sc_process_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a39f202f35c83ce5c50f295b7b1da901f</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>ac8a16bf210e0e913c90cc5dc39b2335f</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a9272e64b8fb124a02fdde7f0e0aaea67</anchor>
      <arglist>(const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a8158857e0c8278d63f8e685a3473aebe</anchor>
      <arglist>(const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>aa4b40d60cd55dbc62e3881feb5f730e5</anchor>
      <arglist>(const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>afce24cf5e9c749a794a624535555e660</anchor>
      <arglist>(const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a0b06fffc8f0620edbef2169c5f70a8f2</anchor>
      <arglist>(const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a5700a360d37ececebd8e615b1ee43b54</anchor>
      <arglist>(const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a439912d860a1378d8783e7f4cce66752</anchor>
      <arglist>(const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>aabdac5c4f93118d8948a9988880e01ee</anchor>
      <arglist>(const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a8391d0067bc7dfee7e3b9f8eb96b4681</anchor>
      <arglist>(const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a2dedd53acdaaa34fbed5ad4c296fd87e</anchor>
      <arglist>(const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a8407efa7da5769f2af4c720288eb542e</anchor>
      <arglist>(const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a0a2da7b7f094fa52c526a1fb9256aef9</anchor>
      <arglist>(const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>af708a896f434738929b0bda1b15d759f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01908.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_sensitive_pos</name>
    <filename>a01904.html</filename>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; bool &gt;</type>
      <name>in_if_b_type</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>af628c8cfc91064ecaa5c36e9e1024f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt;</type>
      <name>in_if_l_type</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>aadfdc06de3c56f968f2b5070933be09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>in_port_b_type</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>ab8920dbcaebc0d665229b101eb1e37f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; sc_dt::sc_logic &gt;</type>
      <name>in_port_l_type</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a60c4d64fcc3651ca3eb541bc3701cb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>inout_port_b_type</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a6f4223a589d94a9b3b26403f0c9ee9a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; sc_dt::sc_logic &gt;</type>
      <name>inout_port_l_type</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>aef9529df6fd913ca243f3b93cee0f323</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>ad2e90d3578f94eec9b36af96be9de9e9</anchor>
      <arglist>(sc_process_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>ab376da3465be544166bb0a5a08b12951</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>ad72de606dd38621f370aa6935835df9a</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a3613fa0e3b2b00444f5e2926b927f370</anchor>
      <arglist>(const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a4f4c8bea69dd4bd6f85720722de2b1e8</anchor>
      <arglist>(const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>afd7d436ce3e247608261bdaedcccb37d</anchor>
      <arglist>(const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a7990d09798e0335d4bc9e71daabf6a70</anchor>
      <arglist>(const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a3df65d61bf352579cb65e244fea3fa27</anchor>
      <arglist>(const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a5242c34374286f9891049400340fa26a</anchor>
      <arglist>(const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a6afee5ab58d03bd1f772dbc512454c8e</anchor>
      <arglist>(const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a4ef468bc7c3c3b847ed9dafac2321e4a</anchor>
      <arglist>(const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>aa0e0f3dfb6cbebc6155ec2987a4bb307</anchor>
      <arglist>(const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>aa5f49a5f195e0e1b674669d21f0476a5</anchor>
      <arglist>(const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>ab4b049ab0afeb6a363b47a8ca432161b</anchor>
      <arglist>(const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>ad21a556cabfee52ada6b0e3dc4c9574e</anchor>
      <arglist>(const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a9ae0124b831db87c005d4a38e354870e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01904.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal</name>
    <filename>a01228.html</filename>
    <templarg>T</templarg>
    <templarg>POL</templarg>
    <base>sc_core::sc_signal_inout_if</base>
    <base>sc_core::sc_prim_channel</base>
    <base protection="protected">sc_writer_policy_check&lt; POL &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a776c747135919e2dc6baa04ebd4e56f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>af7e9c2410dba2d78920ebb11a8df8bf5</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a3e0459bd7968b559a1b9e569f7a3af8a</anchor>
      <arglist>(const char *name_, const T &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a18fccd7ac6af1d7979956123bdb0a27e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a05e63fdc6f1fd428c973b2c8eb5aaf7d</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ab0eb8c76953159463e863d40b8210d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a29e5277ef30d6d4623d3a4d52235907c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>acf33ce80aa65ec889bcf4c6df6ea36a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const T &amp;</type>
      <name>read</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ae0c7fe60f60f8af7c4a5969dbeb326f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const T &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a665a4086b85c0e3b31c1299f9cbca21d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a30fd58395e49f4197e09be37e473477b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2fcaee5334a877b02763445e98ef0c59</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ab739ec4161f8cd6ef9ac72a856a28e5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a67e1cce0749c5749d6a0c7265e7740fe</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a78dce47c6d80e733b69c2e1ba892a7f1</anchor>
      <arglist>(const sc_signal_in_if&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a3c687790f5297701850e27aab58b2e5f</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_new_value</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ad9445daf3b5d6ebe7eb8cb3a3023f0e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a169be61c854df41fcb9c079de2a5e671</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a0f5a75df4074e9a2b1683716d04d7546</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a715d818413d9ce69dea90e1da73d0a65</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a9fc4c40abfdef7616f7ab9ce04374bbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_inout_if&lt; T &gt;</type>
      <name>if_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2a25cea5170037e3bc5a3ab780b127e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal&lt; T, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aefd953693a8fc310890ead84501169c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ac642010e8a7cba01443bda48f0876c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a6c269f14d95ba45add020df8573e5936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aa916223c7182ec78ef1fa514e060c828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_change_event_p</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a4ce8f1e242a0292ff1d43dbb48c8378a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_cur_val</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ae6eb126290418784a6ca238d1c21188d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::uint64</type>
      <name>m_change_stamp</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2242adf9a074fd6753a55cbcbe25e786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_new_val</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aefc81c66ba4833ecdc50c0d1873e69e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal&lt; bool, POL &gt;</name>
    <filename>a01232.html</filename>
    <templarg>POL</templarg>
    <base>sc_signal_inout_if&lt; bool &gt;</base>
    <base>sc_core::sc_prim_channel</base>
    <base protection="protected">sc_writer_policy_check&lt; POL &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a8aaf3085b78428abde2069c01fe075b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a796e84eb7eb6326e1f4a556ff285324a</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a3ec05c0c484afb79baf850afb257ea4f</anchor>
      <arglist>(const char *name_, bool initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a856b2e845726c0459cc94d8b49270f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a665f63d81c7db90334caaf11c8a0d54f</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a821dca219bf8cf96ad98871008f24f5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a1b2857c007dc162b79f2cf0f901b6e9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a77864e4a9cf2b7a20cbdac32095f6a12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>aac2ad1117433accb97d4b42d97047dd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a6404da48caf872015d55f935311cb609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const bool &amp;</type>
      <name>read</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>af0019019744a3662c9c12534ca9ae461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const bool &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a8a7ad6fc51171037c676fca7ec16fa54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>acb156c0fbc098e6ae0570bd75ade5b74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>posedge</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a15bdbf400dfcf6339fe9789f62bdefbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>negedge</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>acfa155ae472671b53ee17a3db4d7cc05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a2edb19517f36f49a0eec59e5b65fd674</anchor>
      <arglist>(const bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const bool &amp;</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a85069b145f8f73045b97c14e2a1dcbca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a6e2f202cbab50748288602e64b8633a7</anchor>
      <arglist>(const bool &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a6f67d6464f4587b09b2af7816844fda3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>ae23a6da8c3f84a7270b9c48d4d427dd1</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>get_new_value</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a9e41330d0d35b07aabebcec511b8a7a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>ab413e3b61893227f120662d8cb0257b2</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>ae845da78d665339de18f9c6d4c49abbc</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a5a16f56a1a2d30472538a186c9d9481a</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a9fcfa2716d9819351c722d4d20fea341</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_inout_if&lt; bool &gt;</type>
      <name>if_type</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a0a1cb5d6d4c8fc950cfad8e146f93e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal&lt; bool, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a1da2aa128647ce9bcf29a58f68182f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a9e60175e844e7a7f3e393033fdd6b9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a9b4ab529779c4140bf9281aad4f418c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>aa5eb1620128e33378d156b28940ac10a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_clock</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>afdcab73eae67f45bd1a0bf91288a3c73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_change_event_p</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>ad00848adc2253a091ed300613970dc62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_cur_val</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>ab008eaa8b5f335949c66cb1222b46123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::uint64</type>
      <name>m_change_stamp</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a4838e2e7a9ef04bc86fd949777de2692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_negedge_event_p</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>ab21b3dd9d383ede2a440f8da95b973f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_new_val</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>afadc57d379667262e4889d13e2ffc167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_posedge_event_p</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a06a376030a93dbb115c95a32c323d9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_reset *</type>
      <name>m_reset_p</name>
      <anchorfile>a01232.html</anchorfile>
      <anchor>a1b049447ce2ba9bbc8803d598ca41dd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_signal&lt; bool, SC_ONE_WRITER &gt;</name>
    <filename>a01228.html</filename>
    <base>sc_signal_inout_if&lt; bool &gt;</base>
    <base>sc_core::sc_prim_channel</base>
    <base protection="protected">sc_writer_policy_check&lt; POL &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a776c747135919e2dc6baa04ebd4e56f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>af7e9c2410dba2d78920ebb11a8df8bf5</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a3e0459bd7968b559a1b9e569f7a3af8a</anchor>
      <arglist>(const char *name_, const bool &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a18fccd7ac6af1d7979956123bdb0a27e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a05e63fdc6f1fd428c973b2c8eb5aaf7d</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ab0eb8c76953159463e863d40b8210d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a29e5277ef30d6d4623d3a4d52235907c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>acf33ce80aa65ec889bcf4c6df6ea36a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const bool &amp;</type>
      <name>read</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ae0c7fe60f60f8af7c4a5969dbeb326f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const bool &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a665a4086b85c0e3b31c1299f9cbca21d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a30fd58395e49f4197e09be37e473477b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2fcaee5334a877b02763445e98ef0c59</anchor>
      <arglist>(const bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const bool &amp;</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ab739ec4161f8cd6ef9ac72a856a28e5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a67e1cce0749c5749d6a0c7265e7740fe</anchor>
      <arglist>(const bool &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a78dce47c6d80e733b69c2e1ba892a7f1</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a3c687790f5297701850e27aab58b2e5f</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>get_new_value</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ad9445daf3b5d6ebe7eb8cb3a3023f0e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a169be61c854df41fcb9c079de2a5e671</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a0f5a75df4074e9a2b1683716d04d7546</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a715d818413d9ce69dea90e1da73d0a65</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a9fc4c40abfdef7616f7ab9ce04374bbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_inout_if&lt; bool &gt;</type>
      <name>if_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2a25cea5170037e3bc5a3ab780b127e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal&lt; bool, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aefd953693a8fc310890ead84501169c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ac642010e8a7cba01443bda48f0876c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a6c269f14d95ba45add020df8573e5936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aa916223c7182ec78ef1fa514e060c828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_change_event_p</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a4ce8f1e242a0292ff1d43dbb48c8378a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_cur_val</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ae6eb126290418784a6ca238d1c21188d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::uint64</type>
      <name>m_change_stamp</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2242adf9a074fd6753a55cbcbe25e786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_new_val</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aefc81c66ba4833ecdc50c0d1873e69e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal&lt; sc_dt::sc_logic, POL &gt;</name>
    <filename>a01236.html</filename>
    <templarg>POL</templarg>
    <base>sc_signal_inout_if&lt; sc_dt::sc_logic &gt;</base>
    <base>sc_core::sc_prim_channel</base>
    <base protection="protected">sc_writer_policy_check&lt; POL &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>add13f963b1fe2e21e40b5ee03d495b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>ad2ee6d559b22b102fed72accf01f0d4d</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>aafd49c6390dc00eb361cebb1df49083e</anchor>
      <arglist>(const char *name_, sc_dt::sc_logic initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>aaf5726123db39b3bb2fbbe2aa8d56535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a6531344cf3b8a4638a61f37a8adbad75</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>af37ae3200f659da9b0a9404869cb514f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>aa01e77cd24b886b653428820ecf31968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>ab5112ebf43f777d2be8ac9f0713ee97e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a6a90d025452c36cba8a222d292ea4cba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a1e890b594cb3fdb7feee2f14770a5b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_dt::sc_logic &amp;</type>
      <name>read</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>ad02e3672c025c684e9427855bdc5f0b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_dt::sc_logic &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>ab11979e3493cc188511038c22ea4f31f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>accdbd9ff7ddbbe3ee773c79d7e7dfa36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>posedge</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a3170524bb13edbb131680df11f4b030e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>negedge</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>af03305e7502b6d9cb733b7e1724be576</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>ad31b1ee7e5e6330a9289a36bc545aadd</anchor>
      <arglist>(const sc_dt::sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const sc_dt::sc_logic &amp;</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a653b6c0cd32ac2780069d8594bccaa4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a443beff467f32ad0e3211d848d6973f7</anchor>
      <arglist>(const sc_dt::sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a002e7f3cf29d61dc3b537e22f6f9007a</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a6ba39fe69562d14281997c1b18337fa8</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_logic &amp;</type>
      <name>get_new_value</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a2a7391d7254d49518c1bbd41c3ffbeea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a5ff37a971836b70af75c9ffc40f2dce9</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a41706dfaf048908dba884efe3c901fab</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a361ac5fcda1912889a2d9453d513bc22</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a89f76b9fafc2707e47698bfa1d82d9ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_inout_if&lt; sc_dt::sc_logic &gt;</type>
      <name>if_type</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>ac887b62e000c2bb41f1c487f3a0429a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal&lt; sc_dt::sc_logic, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>ab6e50ff59e971765350fce2badfa3ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>aed3274309fbf4f0370d1654af7bc77fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a318a2b5fee69705184f7271ddd42c8e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a45832872d4380babea79404d0a629f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_change_event_p</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a65f52483772518b2c7fd9c07309b183f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_logic</type>
      <name>m_cur_val</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a27c43872e19a0f3a0aefe10615d3b2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::uint64</type>
      <name>m_change_stamp</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a7a95bc287490f1a9b18fa8ff4fe3277a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_negedge_event_p</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>ac00a6f02b16aa7ff3856d46bc85dbdf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_logic</type>
      <name>m_new_val</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a5b399a1ff0e2071613f27431b5c14b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_posedge_event_p</name>
      <anchorfile>a01236.html</anchorfile>
      <anchor>a371161a9aaa15d24377cf93fcee6a76c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_signal&lt; sc_dt::sc_logic, SC_MANY_WRITERS &gt;</name>
    <filename>a01228.html</filename>
    <base>sc_signal_inout_if&lt; sc_dt::sc_logic &gt;</base>
    <base>sc_core::sc_prim_channel</base>
    <base protection="protected">sc_writer_policy_check&lt; POL &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a776c747135919e2dc6baa04ebd4e56f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>af7e9c2410dba2d78920ebb11a8df8bf5</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a3e0459bd7968b559a1b9e569f7a3af8a</anchor>
      <arglist>(const char *name_, const sc_dt::sc_logic &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a18fccd7ac6af1d7979956123bdb0a27e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a05e63fdc6f1fd428c973b2c8eb5aaf7d</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ab0eb8c76953159463e863d40b8210d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a29e5277ef30d6d4623d3a4d52235907c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>acf33ce80aa65ec889bcf4c6df6ea36a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_dt::sc_logic &amp;</type>
      <name>read</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ae0c7fe60f60f8af7c4a5969dbeb326f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_dt::sc_logic &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a665a4086b85c0e3b31c1299f9cbca21d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a30fd58395e49f4197e09be37e473477b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2fcaee5334a877b02763445e98ef0c59</anchor>
      <arglist>(const sc_dt::sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const sc_dt::sc_logic &amp;</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ab739ec4161f8cd6ef9ac72a856a28e5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a67e1cce0749c5749d6a0c7265e7740fe</anchor>
      <arglist>(const sc_dt::sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a78dce47c6d80e733b69c2e1ba892a7f1</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a3c687790f5297701850e27aab58b2e5f</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_logic &amp;</type>
      <name>get_new_value</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ad9445daf3b5d6ebe7eb8cb3a3023f0e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a169be61c854df41fcb9c079de2a5e671</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a0f5a75df4074e9a2b1683716d04d7546</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a715d818413d9ce69dea90e1da73d0a65</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a9fc4c40abfdef7616f7ab9ce04374bbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_inout_if&lt; sc_dt::sc_logic &gt;</type>
      <name>if_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2a25cea5170037e3bc5a3ab780b127e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal&lt; sc_dt::sc_logic, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aefd953693a8fc310890ead84501169c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ac642010e8a7cba01443bda48f0876c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a6c269f14d95ba45add020df8573e5936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aa916223c7182ec78ef1fa514e060c828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_change_event_p</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a4ce8f1e242a0292ff1d43dbb48c8378a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_logic</type>
      <name>m_cur_val</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ae6eb126290418784a6ca238d1c21188d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::uint64</type>
      <name>m_change_stamp</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2242adf9a074fd6753a55cbcbe25e786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_logic</type>
      <name>m_new_val</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aefc81c66ba4833ecdc50c0d1873e69e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_signal&lt; sc_dt::sc_lv&lt; W &gt;, SC_MANY_WRITERS &gt;</name>
    <filename>a01228.html</filename>
    <base>sc_core::sc_signal_inout_if</base>
    <base>sc_core::sc_prim_channel</base>
    <base protection="protected">sc_writer_policy_check&lt; POL &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a776c747135919e2dc6baa04ebd4e56f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>af7e9c2410dba2d78920ebb11a8df8bf5</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a3e0459bd7968b559a1b9e569f7a3af8a</anchor>
      <arglist>(const char *name_, const sc_dt::sc_lv&lt; W &gt; &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a18fccd7ac6af1d7979956123bdb0a27e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a05e63fdc6f1fd428c973b2c8eb5aaf7d</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ab0eb8c76953159463e863d40b8210d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a29e5277ef30d6d4623d3a4d52235907c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>acf33ce80aa65ec889bcf4c6df6ea36a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_dt::sc_lv&lt; W &gt; &amp;</type>
      <name>read</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ae0c7fe60f60f8af7c4a5969dbeb326f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_dt::sc_lv&lt; W &gt; &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a665a4086b85c0e3b31c1299f9cbca21d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a30fd58395e49f4197e09be37e473477b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2fcaee5334a877b02763445e98ef0c59</anchor>
      <arglist>(const sc_dt::sc_lv&lt; W &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const sc_dt::sc_lv&lt; W &gt; &amp;</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ab739ec4161f8cd6ef9ac72a856a28e5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a67e1cce0749c5749d6a0c7265e7740fe</anchor>
      <arglist>(const sc_dt::sc_lv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a78dce47c6d80e733b69c2e1ba892a7f1</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_lv&lt; W &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a3c687790f5297701850e27aab58b2e5f</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_lv&lt; W &gt; &amp;</type>
      <name>get_new_value</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ad9445daf3b5d6ebe7eb8cb3a3023f0e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a169be61c854df41fcb9c079de2a5e671</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a0f5a75df4074e9a2b1683716d04d7546</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a715d818413d9ce69dea90e1da73d0a65</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a9fc4c40abfdef7616f7ab9ce04374bbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_inout_if&lt; sc_dt::sc_lv&lt; W &gt; &gt;</type>
      <name>if_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2a25cea5170037e3bc5a3ab780b127e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal&lt; sc_dt::sc_lv&lt; W &gt;, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aefd953693a8fc310890ead84501169c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ac642010e8a7cba01443bda48f0876c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a6c269f14d95ba45add020df8573e5936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aa916223c7182ec78ef1fa514e060c828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_change_event_p</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a4ce8f1e242a0292ff1d43dbb48c8378a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>m_cur_val</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>ae6eb126290418784a6ca238d1c21188d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::uint64</type>
      <name>m_change_stamp</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>a2242adf9a074fd6753a55cbcbe25e786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>m_new_val</name>
      <anchorfile>a01228.html</anchorfile>
      <anchor>aefc81c66ba4833ecdc50c0d1873e69e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_in_if</name>
    <filename>a01240.html</filename>
    <templarg>T</templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01240.html</anchorfile>
      <anchor>a699c8c309c0d5158f36bc8b9df0fee72</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const T &amp;</type>
      <name>read</name>
      <anchorfile>a01240.html</anchorfile>
      <anchor>ac8fb4f501966a460b3624d6aaa75d668</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const T &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01240.html</anchorfile>
      <anchor>a40f78bb2b8d91c24e55df3f834c3e297</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01240.html</anchorfile>
      <anchor>aa1a12f3c5f702e1dba271774e8aaf197</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_in_if</name>
      <anchorfile>a01240.html</anchorfile>
      <anchor>a63f14a632546ca826dd9e96ef06cbab5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_in_if&lt; bool &gt;</name>
    <filename>a01244.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a5974aafe8ade4210159c3d82b4d63941</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a3053d18c78fd5a0479a9c9b56e2c1781</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a217a71b79f48d76c148e44ad4ea9c5e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const bool &amp;</type>
      <name>read</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a865537da5e44dcebd6d4addba0d9cba5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const bool &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a009210765eca90ec8e346b54d7b86e15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a163b6cddab318db80e5e5dc5fc699e0e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>posedge</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a6b6c3d2d95aad99e57e39d17a5171480</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>negedge</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a7b7bd76eda5060d79b15b76252147376</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_in_if</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>ad033c6fc989c943ca3dff214b2c7f2f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset</name>
      <anchorfile>a01244.html</anchorfile>
      <anchor>a459c3ab69abfc8912c9261f7dc0719dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_in_if&lt; sc_dt::sc_logic &gt;</name>
    <filename>a01248.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a7a3901e6b9459a820a385609a6675808</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>af9c851574dd5895ec1c5946fe070cb3d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>aa576552793a5ab6d32b5730ccf8cb29a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_dt::sc_logic &amp;</type>
      <name>read</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a6dbf9f7e1f5c8c34bec4eba95d9261ea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_dt::sc_logic &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a652ac553007bffe8ca7e72911bda8585</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a8088cf00767db75ee84ed68d2048b980</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>posedge</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a96fcd1858fce429c75a507574d435f83</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>negedge</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a58e94044738deea44313006f04b15e5e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_in_if</name>
      <anchorfile>a01248.html</anchorfile>
      <anchor>a0b0e5b4b8fafc8198f6f08bcda0d77ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_inout_if</name>
    <filename>a01256.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_signal_in_if</base>
    <base>sc_core::sc_signal_write_if</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_inout_if</name>
      <anchorfile>a01256.html</anchorfile>
      <anchor>a008ca3482ed6cadd6b4a65e5624af61d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_signal_inout_if&lt; bool &gt;</name>
    <filename>a01256.html</filename>
    <base>sc_core::sc_signal_in_if&lt; bool &gt;</base>
    <base>sc_signal_write_if&lt; bool &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_inout_if</name>
      <anchorfile>a01256.html</anchorfile>
      <anchor>a008ca3482ed6cadd6b4a65e5624af61d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_signal_inout_if&lt; sc_dt::sc_logic &gt;</name>
    <filename>a01256.html</filename>
    <base>sc_core::sc_signal_in_if&lt; sc_dt::sc_logic &gt;</base>
    <base>sc_signal_write_if&lt; sc_dt::sc_logic &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_inout_if</name>
      <anchorfile>a01256.html</anchorfile>
      <anchor>a008ca3482ed6cadd6b4a65e5624af61d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_resolved</name>
    <filename>a01292.html</filename>
    <base>sc_signal&lt; sc_dt::sc_logic, SC_MANY_WRITERS &gt;</base>
    <member kind="typedef">
      <type>sc_signal_resolved</type>
      <name>this_type</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a4ccf3bf65751f016952186ddb4457fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal&lt; sc_dt::sc_logic, SC_MANY_WRITERS &gt;</type>
      <name>base_type</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>adc94aac483bcd5b68df9261072223716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a1cc487ddfc21ddbd34c26bb00f4b2186</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_resolved</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a26e46f4c1cf86a91c8901f40acc2930c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_resolved</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a1071c18c6e25c795a0983659eba43611</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_resolved</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>aaef5d7d702b257eb0b2456d3fd56c08f</anchor>
      <arglist>(const char *name_, const data_type &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>ac861d4a662e835f2ea8aaf80341fc044</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a2e587b113a098305a2d0a513747dbdc6</anchor>
      <arglist>(const data_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a1b81431685ff1e4c4aece63e3987ff6f</anchor>
      <arglist>(const data_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>ac7d295235f7bb59c9e0bccfbc056eb0b</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a6372a01d0ad9b9f033cd953ef2658e98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>abc54cfbe9b6936f01359d1471b8ec58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_process_b * &gt;</type>
      <name>m_proc_vec</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a9d8d2ba1e1f3f74a5d464c822a7a2c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; data_type &gt;</type>
      <name>m_val_vec</name>
      <anchorfile>a01292.html</anchorfile>
      <anchor>a9b0e0679dd308cc29f876a8a4523e561</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_rv</name>
    <filename>a01312.html</filename>
    <templarg>W</templarg>
    <base>sc_signal&lt; sc_dt::sc_lv&lt; W &gt;, SC_MANY_WRITERS &gt;</base>
    <member kind="typedef">
      <type>sc_signal_rv&lt; W &gt;</type>
      <name>this_type</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>a2f40d967a13c6e8800cd7ac471c77d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal&lt; sc_dt::sc_lv&lt; W &gt;, SC_MANY_WRITERS &gt;</type>
      <name>base_type</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>a90fa5d692f3c509472ae79af7b150f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>data_type</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>aab1e3584772d92a0302bf709a96240a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_rv</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>ad85c846b2a80c42fe78f97b257aceaa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_rv</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>a38ce528d335f44d3b37fc64c024f5025</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal_rv</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>aa01c7764c1a7d915778157051af9b91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>a30a70b7873c0602045f5e493f4cc393f</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>a3f39daa9371342ba558633f56254a1bf</anchor>
      <arglist>(const data_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>ac91f9fe35a2014108fa983102ceefae1</anchor>
      <arglist>(const data_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>ac16f408de5da8a6bb824dd67dc97018f</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>a6c06d4c2f6191c7571d26d71f3e24b12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>af6febd662bfda27d8e1cfcc11bb00a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_process_b * &gt;</type>
      <name>m_proc_vec</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>a0c5ef7aca8eb80c6a90570dab1529caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; data_type * &gt;</type>
      <name>m_val_vec</name>
      <anchorfile>a01312.html</anchorfile>
      <anchor>ab321882d313db3ed4683734098a58f1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_write_if</name>
    <filename>a01252.html</filename>
    <templarg>T</templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function">
      <type></type>
      <name>sc_signal_write_if</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>a7dc59e19ca2ae5f2975cc147adf70589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>aa6f236905f206bc98458c7c38d51f12f</anchor>
      <arglist>(const T &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>a77f46edcd83f910ca3134973b9d99bca</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_signal_write_if&lt; bool &gt;</name>
    <filename>a01252.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function">
      <type></type>
      <name>sc_signal_write_if</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>a7dc59e19ca2ae5f2975cc147adf70589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>aa6f236905f206bc98458c7c38d51f12f</anchor>
      <arglist>(const bool &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>a77f46edcd83f910ca3134973b9d99bca</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_signal_write_if&lt; sc_dt::sc_logic &gt;</name>
    <filename>a01252.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function">
      <type></type>
      <name>sc_signal_write_if</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>a7dc59e19ca2ae5f2975cc147adf70589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>aa6f236905f206bc98458c7c38d51f12f</anchor>
      <arglist>(const sc_dt::sc_logic &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01252.html</anchorfile>
      <anchor>a77f46edcd83f910ca3134973b9d99bca</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed</name>
    <filename>a01668.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae46541d5ed455364cb4da7194667660f</anchor>
      <arglist>(int nb=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a06f405fb8659a988b059966a6624a54a</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac5580c36b6e0bc7455b143cc63697987</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a02f1826f33ee440a3145f63da923caba</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a64a1eb38c842d00f8d3b335c53e013a7</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab843c8498937c443b58039b362273886</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a19645de43c6ce7035963b2ec39dc47ac</anchor>
      <arglist>(const sc_int_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a56b7332adc6c7f2401896f12876ee0f5</anchor>
      <arglist>(const sc_uint_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a23e44cdb37a2a5d18496efa5cf3a39e8</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a66a2bac54f53ca5043aa6d2394fa872c</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a069acee1936fe878fd4a2f0436b11425</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8ad810dc088e2956e1d826a332757075</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af266846acc404c0a767a04b05b70f9e8</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a97a7cc5e1b159e9ced01553acbd9db62</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>adb6b4bb185d5d5249d3d23d95e476c64</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a89c2d79f9e68264085d90746ac3883a1</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abbc0bd08bf68ca53809a55c3e8b06608</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa90e5819e75133e96e8d1b7394695f48</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac00819cdd32248727fac2eadf5591423</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8868e57167f918ac89837c5f3c3a75ee</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af8e46e843dde65a2de3fa37544bdc4dd</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4ff8a080692186e9874aefc095831fca</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aeff0990e353693b683131c98e0e10668</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3c6923f7668e77f31419e7b5f5485664</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a30c209819fc12799108896e65187420f</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aec5b3953176af0465626f15620fca051</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab15d42cf82bfe01ebc946631788d55eb</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signed</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8efa7629cccc7536aa46f47dbbc60fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_raw</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa7ce0f80843c7f87147bf3f0564e21b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a82c79dc2bcb55beffca19f380cb2df09</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3e2b445cd5ae78b9287eba61841e66f8</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab89a8c0db9fb872d47af0a7482854c46</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8ae203d8d9cb34b821f5eac876b70b90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>adc8270fd3c1fe4ec8b8f744587c9cd40</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aeecbf419d2b6a79386a5df0d5576c7c0</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a27f787401a638c42626523a9c81c686d</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab4d9b0f4b14e12f47fbf140e5a01e2d1</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator++</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a11d5121d5609f992f076d4ff3442b825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed</type>
      <name>operator++</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af7f389ca516108f2979a2d244fc7299d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator--</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1aa7a62ac6503f2ed9bfa1d7e7946207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed</type>
      <name>operator--</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3bedebc95392ca05f33fa7c8b75c0310</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_index</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af5b98b9179f7711fa39c8b4fea1b05cf</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_index</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a245e628500b46881dc2680c9bc03df2b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad03779d3a18e0cefc38f1c89bea5b1d0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac70ccc053bbe2380366016b7a16ce439</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac281d57f3e9c6c52b0e0eb500e20c1d6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2fd59f6b5488d057b66c1265e0cdd06c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_range</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0209fb746ead94146064ad790424bb5e</anchor>
      <arglist>(int l, int r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_range</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0720f40f67b10d1a44db30c6abe03f48</anchor>
      <arglist>(int l, int r) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af7c968846bbb851314ae3a37ac23ddc6</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7a55ddb55a6937d04fced14cc4205ca0</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2468315afcb22871e530a1158a1668bd</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0f07db1b49b310a81d0e7b050364139a</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a74df7bd2e6bffe79941050eee4268b30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3350fc2556746f09a9c83c1eaaa8e2a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6558a7156750f6b044cd592e6cc75ded</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8668705ea7a40cf24c95a3c810bc0402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a631517c82d7cb9ac5ea58487fd9874d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa695b5349868fba020c66a0128415833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a13ef7f637e8b57d3abd2251d6e018654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad76b492b0e24bc27c1ebe26e81d9f9f8</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a009bce59b43ee0ade4b036a9f333c20c</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1e10f32a8739fbda6b8e7471546dc2f6</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aaa855fe7f45a74fb6de6bd2554dfa506</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab282e25b0cf67c937f762754a2a9b428</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab28b6aaf3a108d1a94c0c46f6095e50d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iszero</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9e80a7935d4a5e7dd95155423072c06e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sign</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a75ec167f970e243f40116915646cfdc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a526dee7a98f315d204ae82024a457eed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac7e2c7d5996f2939f1dc2e00e606a4af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>afcf904ec269b38dcf158a37ba80dc5d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5b582e0185b63ddbddfd54a34b675e6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>adddf6fbf4bd765946ced16ef5fbca3ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8e525c918285f7c3255d6e864800d759</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2e20217fe4a93a4a4352a82e42cffb70</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a21ac8b8bcc5e8cb7f0fde1d3ca15be12</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a097f07a048d3b4da7a04860d62795385</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4bab15c06384ebf1f4c0f4be2a7c85e0</anchor>
      <arglist>(int i, bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa647055183aa206e91af0be9b78e2e01</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2c57bfc3652132ac49f625355d665b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_packed_rep</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae0e7fef01b766627580716c9458fe6a5</anchor>
      <arglist>(sc_digit *buf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_packed_rep</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5e27829702ab24bdee5a12c481dc29fe</anchor>
      <arglist>(sc_digit *buf)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae26d4cf2e8611b0b8d26ce5267ef24b8</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8b125e38a74309837945e75901448b4f</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a50228655d7cae57633ea85855c244f31</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0fa54eae642a4dc89f4e7c2bbb4184f5</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5f900f68033730f21ac246eb68563864</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a10ac485989d76ddc13a4cd9a3677ac9a</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a56f594872b5459b8131e178b640cfedf</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a62c147855147671c2c8bed025bb9f38c</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6c6af0fd653bf36e90befea9d6e78796</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac2e62b9eff79a3e8723a0d85e93d0b95</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4de963ca24107bbdef0924384ea418d7</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a988dae7c3e371330fd2a4aaa79bdd900</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad9c4df966803c5afbc962d5c9c7b9dc6</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0bb36e632e6a41a822e36e9e59dc2a86</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a03b2d91a87c475482063d623f57822fe</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a06b0e19054435d81e8256d4f8c6e41df</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aedd6b8f8616ca00c46bbe8b391113969</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0c56e33c8950187438ad5c7359f6f0ad</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a751f456b767958df25beaac2dc0093dc</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a22717184064c483e78d624bd805834d0</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a57ccdf08adb6889f4c735770f17d79d2</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3af9eb02c8ae4a59b5866d9161039edc</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a949784aad11b5a164e4094a35ba933c7</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3ff635139294c697c446cea45cca4aa3</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0db9064bf03eac6b9b064ddf3bb6324a</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa3b1b9556e6b0bbe5ccd85a872c765af</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac7ecd8ebe0b5f0c5abff276f796047d0</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6779ecf48e7f30fbec0ec1831d17af47</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6264553a9d114fcc2df73d7111133829</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac3babc83c7e120fa546941dbe0ad8a9f</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa8b77ae16102bd9d54f9c76dc96b65dd</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a018330a910fe456f9d5ac8d8e5234e92</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa5f4aec25dd3c1091b751338c81b01c2</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4e1343663caa205945998d9720158fc5</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a575c45a0b6c9db6d8f98a0730b58e070</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a06f900218b1f147b7a32a0323e5a96e9</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a927ce8aaf4f65588df517f899176a6a1</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abe1ff673099385cd03f376e6a4fc8a2b</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a04f074023eaf3845242d7e4990932722</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab2686e13c818643ce7ce9e67bff29762</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>acfbd9a987d68c278a6152932c09ebfcc</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7fd901e30bc34b2056ccc261723defea</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad145b12a2c9e8684b85fe85378350f67</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa9f15719ad340c02ef7c43b4dca38675</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1cd520749827c8af4689ffa46de9c004</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac527570d9e8b112a72313fe142356d6d</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad5a6e0f3b9f38ee074981ebc3f7a5330</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3748c92dd423cccd01970d8782685012</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abe39843ff7e22e44002c3af4eb9e2500</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a03d33093d86df8eb0065b1f63832f1b9</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a132bc4d8c8c01558e96aa8df58952112</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a06067c308731e8346b9491d8cf9c569b</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9a4acd4cc5b2a2cba89c6dfb2ee87ba6</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3ab4ba398fae9c7debe70fa44e052840</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae0634419070f8af8369f99b4ced10127</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0315d287788691cc8d8c55cf4e99996f</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9245c2445873f5154eb896b576f7a24d</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af7ab2197fe0b88d1fba72b1868f9b3bb</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a77f4086c2f946ea242a36a9eeef41158</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad6ac0999007111dff8fe7051f1f8b6a3</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a377c20628f70cd3a9fdf7d91e9d37da5</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5ff3a2b193405c76580f76394b40fd6e</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a780d0761273c2f67f3e5040ef3eb66d9</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae3c84dcc201db0e0aed05e76a3a721fc</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2b7734332528e0984a4157542191ae57</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0fcdbb8620b61862f7ea46499f075306</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abdea2c50048a7177566b600080454d8e</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aba982e79cfe38bad5c41b40e69385dd2</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae7d076f233b9e985d70ee7bf155ad191</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5ef5fd04fd03a3a1c2190056ff66d922</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3280dfc5a92a4eecb1f57d9d2aea4f42</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9c7752c2313100974c204069c9ff28f5</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1dec08ccd315e1eb4a73dcbaf0fedf1c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6c9b1eaae520471e667fd27ac30772eb</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aba090ee6550a6de0e42abd3df5bd57c7</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9e53523152b75ecc212b11ff27f8d569</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a86aafa7ff6c8e9be64bdcf722cd0d666</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>add336323b66504cb375523db57ea7db8</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3edc1687b46df6cc5bb180b0ea9a6188</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ace781134493810000be1ddf642c0236d</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab2d8de139c1e1c0689df797cd9d3af0b</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8d5e92a952050bfeb8723343acb9528f</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa41af348434245cb7fcf651cd93f60fc</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a393cdfaa42acdd1d7fbd66dcfc6ee08b</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1fe3db939ecff6b34ce7babb760d02a7</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa7cac4caa8496517b260ef476d25ed4a</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a227f71eb33300875966915de5cb3f6c8</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a896ea60274d29aba202fbbb3f52b38a9</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a18e3a9967079f7d10cee84569aa6d86e</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad3891934fc3ccdb04c67a481ce01a28f</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0bedfa792b66398b50803d7655e3a454</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a41ec447c519808e5e89295b389967fbf</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a51206cd1927ce61be5db5921dd57d31b</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a032e4bba80254bdfc50012fa2f124905</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5c61fb246213f92bab8c09e8da6cb3bc</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1a87853fbc5d042952a3107e641a24e3</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a12179e5b049f85fbbec3bc57b2abaedc</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4d7de7198aa9274f01d97b66f1b464ee</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa7d2a36736882d3b47ad57948f2e2f01</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>adfadd17538a60ff2a9f2649176d23a81</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_concatref</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a58586acadea2fc68be0fd227f1708d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_bitref_r</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a11e6c116466487560df3d625cae9b3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_bitref</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a32a67bdec9c901ce1bc576f758473f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_subref_r</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae49cdaa43aed9299ff33a85831d0321a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_subref</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae83c9b2d4f5ed89484c4d7d7ff810aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_subref</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a89c21a388a8a2e533390deee582c458e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>afd1636e2a89ecf598d4bdf0cde780b4e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>acb5f1517ffa885b9eab13dd920f4b74c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6a6d16433b20376458e150f2b896dea7</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8fde9c96cdd3ba3e1b3967574ee3cb80</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>accca2fd56645671b28c4b79513ffec9b</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae13c4ee6fd6b6b09d5c332dbf6c7897e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad036d7bdb0f485547fdae4136948ee10</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0a2811f0efd02c2c26a1123cb6232017</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a76bc96ad8fc911dfeae57ee8d1181fa0</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af952162acb7bf51732f568e319a8a9ce</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad90b69b2c7e498d5d2b092c32d7c20a2</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1e59d29cd94e181505bc0abb2de01bd8</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa805ee3b279aa829abeb8e59da243289</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3f19348392e100fa732b9bf3536f0f32</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aedc87e7f7e1d021770bdb94313ac38c2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab8458d23890429d396621300569ebc2b</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad246cc7d8ab7ce72f4ed42d325563d23</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a458867289651abd386d61d6899014bfe</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4400ad5e11e2b9978850487a67038d58</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a83b82bc220baea452a9872eb94eb8eeb</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2e5ee35de91dffb92eedef4f8ea4a76e</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a819cddc1acd0f5ad2ed5f9427208d07a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3cd2c591f21df4aa7f5ea2e504b59b24</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa15ff13fa830ffe834a4d068c18561eb</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae08a9f8963c30894b91625e0edb0e498</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af18890e0d0ef8d7dbc0c75dc8e21de7b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9a283ebcde5577cf94f87726864e6907</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae19b6b9b506a0ee396e40937e1a520e0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab3d63e35df8a30b691a57e5f43cf9dba</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9381fceeb8a1c879e3b204c60a5c1b8a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>afb301affedd13975666d1743da31d3f6</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>addb08f33a72c7428e2a7df88ac0418ed</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad3ea318a93c11dd176c068515ab7c651</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>adac9060c6153f643c6709e72dc7689db</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a572435c81a1812b469510a17e4b1aea7</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1d2ad204cafce59f9e2edb5f308cd8f4</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad79f326cb748ae603b4e95a793dc88e2</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a842ae04ee2798679373c46f811873eb4</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa4c83bfd905e09ec84aef7e56f6fd86a</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac6dde218f487183b37208bd48c1a3e25</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab5695769eb8d918ea683a98e56d17826</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a935c3de80642c8dbd8262575c7f96771</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9d3e76ce3039240a4c5693dc8921bb84</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a152d289f3e4c657521d3448e03b04a68</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1455a88d1f4955cd91468ff2e8810589</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af8c8253906d158120a517a213a627a2d</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af953e61bde2ac85142410658a9f72bf2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>afa438003990b1cb1cec78246154e2dfa</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a60b315762bfa37e7cef6d298fafa882f</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a997cdef67d8e3baba4deb40236c2ac85</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a44f8019584e47b9f6f359073617041a3</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a878a840a02424c9954a2ba73d6a6ff66</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af13e4e5d7aff43779d1828c769fa19ca</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a229c9345d0d5c3910b597883fd2c3d69</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5577a44cfb49eb11403e46823217dfb3</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0b8cea0ae6ae3dde76042e940120515c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a971a1101fda3ca4e644b6e5efd9fe977</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aef6b7103893c5829d99de3d4d1234b33</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aaa4e5a9be0b43ab2a882ab249982b8ef</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a25ce33e99a7d539c484d800bc4b35b98</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abfd6427878c333312a2fa69e8dbdd54c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a36e39d7a1fe047de67cb72ceb3ffd3c0</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a72353e0a9fddaffe93abeb9f15a7329d</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a851f55f6682cb90daccd3fd39be723fb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8485f667c2e660a3dec722038c0ce9fa</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3a24d8a89729f0abf91298357ab81325</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a24a148654e83fac5282c400898b21046</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abd084b947e6d5588d07850ea567b44d8</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae28d8a58c47a80244d0df8e44fc973ec</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6fd7f839b9fdec0fe3f19ee316b43d0f</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8064cff1f49d11fedfba6f9d5c18d05a</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5a723e0796d97cf5213c9d69328ffffd</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae6151c8de8ef873d5e0afa66f4ecbd12</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a235acaee42f5aeb5bd9496a00d16487e</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3aadb0ae37a773329f7477736db5a33a</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ada161455e787cccbc95c9feb90300d2e</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4f4abf148f715f6b43cb47d17da6ffb6</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>afca56a6dba5d37d5ac34acdea7c34da2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a66dc47c9534cf371e65a87214dd5c2b8</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>adc005bb8accde08a64c4978c1a5ce185</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>acfd6c32eac88980b332a089ec06e357a</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a162f9da172efa722ee90cf5b2228e352</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9e8d3076179e2aaf803ae653c211c1f4</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8e0cb6114b0ce607f2352acbc46673f5</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa7a0dfd8cc418b271969bbea9160d5d2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ace4fb7cc85aa5d70f66433ee71d7402e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0426a30d5b6e2b86b4f91fd44fb5f7b1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab68283a567f8766e8fc5495e84d52f14</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad752843ee8150f60c8fb45ad87916bb8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4f54ed0f0e61bb726f4653f0e86c53c5</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3585992fd95a14de35e1674551f44c0f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a125b6d46ea748aceb54aafee3a5a1a0f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a48cf850ff0d857cabb0adc3e6a7a77c8</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a86f8d483a13f020b9619873cfa94ef0d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aeee08be7e69fee02bb83c26bfd4544a2</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad7fb76e857dd93aa99b155d4fb3114de</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a867c4e68edc77365e49c5adc62f34c21</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a91de3869c84bde34f38f186166db363c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7f1e14ca0c253300cd28281d84452e3b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae00fda2991de8cf5b56b530a6fed65a3</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af361f55000cda68066932d10270dd762</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a07812aeb678202d6cedbb5175c4aea1e</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9c17b8cf41526e9d3798fe01a381fc60</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3746b9a081d7723e18e862782b913aff</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1f9bf5d07bf2fdef636b4cfd101847a5</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab0b8e442af8d6da779132c4dc1c819f9</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0964fc5e93238a7341e9af9ff0700d14</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6c6a353091e384c22a95695a6da47bba</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a84fd69768bbfe5ec5d90e507d38f2070</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8041bcc1f73e4fc1c79d8dc30f9972ac</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5883da1596df33d640e869dc5e8065dd</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aeca9de296b5a321630647833ec305c7a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a56a646e980e6344901af45e4ff9fc9b8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abd0dab9ae4b0b763b8d691b0569de063</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac0860bc63511ec8a16878bd00f7feec2</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a169312f4620062c1f3d23ca93ed7031b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3b83b0073b0541660f7d22ab6456f150</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0dbf897372ae99026acf912a6b6fca97</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab46bcdcdae2796e3e44ec32a279e6d8d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a922c0b1b8b48287dfc50f5d0a8b7db98</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9c718000e36582f28750634f935f5daf</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1c54be9062d756f594096a161cd82dbc</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad8b5de38fd578d2c7de1c00df358d83b</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aec81a659d147ed11da41043dcc66d1af</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aec8b8e2fb65331eee206c969aef9b22d</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa4b606c7464f8c8259e465f8383de2c5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a64deb294c9dc6e35f441d91e39c6bbf8</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac2eecabbf08fcd663adf2d37dd1da591</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af182be66623b32f286572e69731d7963</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af77d8ab460eb7fe1bee1c975dfd6b53c</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa15d33947ec7ffe3d611a307598373bb</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a549e1a2f450ff47a4bb006e094e46a7b</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa26756fa2e6bfd75146f1ee11bf652a2</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0472d087d474ab2002458bd3baa45ce2</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2143ded5c4c76d1961e1bec8a1ac72e1</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8ae4dd708185eb0b1290923c76f25988</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a14ef4df1cca38348eb7ee350dccdfe92</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae0e629dc67377ddd0d9317bb7a87b4b6</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a19b9bf9e65bc5a7e997fc3f80ff87bf7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3f692251c020f685d37aae4c6f6c2ee3</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aee8bed6f23bec23adb3b290f5f5d3071</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1c7ac716a0561f4abb91e80aee474e5d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae942fb396bec6f14a537870face5d13a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a800107cac4b561b34af6f3bc2498d0d5</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3a249e5cb9626589def54a405fee6040</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aab20d360df09a0a7fdf1c9d17cafced9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a01a63585bb84c5449c9e267b7f3519e8</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7190c6a9e79ec7068b1d010fb379ffc5</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0b5f58d69225d1a2e404b277b91a3379</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab304a0a87b7b4dcf5c77068dbe4e4df0</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a646f49a132a2f0d48f25dfcdade56f85</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a434be7ab1208f16b82487074ab8938d1</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa9f07569154a6352e4c8a5e8aa7e5846</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a589f8d8bc6cc1ad8ad6856937df3efc1</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af57af7a820c2836db2488ec57baa4249</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a940ee42ccd57cc77d5472f72c5783a1f</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a543a02310be7f98c82fd9ec8bcb3bba2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a57839b3419ee971c8293702ca75cd902</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0757c18dfb8c4f7ed8d0af5c8c08b3dd</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a51bcd05719a23a86b0404084ad716a24</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8589079bf8a001fc8ca0b51a957e68e1</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2d9fc7af328c8686430e09d03b778765</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac5e662291b6bed56edaa5031002ffc9b</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac6370ddd3b9198bef71e602f9b101f65</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af821f8678856635d913164e4f111bec6</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad14c96b41b7547cacc14645024a6fe62</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a875957fe5a4070d6ac6724267fafc9e3</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a748decf6aeef0e44dede404c234ce8ac</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a65a0647a8a1578f72283112558695829</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1945d102698d4ab5164c9f3694f63aab</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a03bca0a341bafbf1eebab6f6f06c7715</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad0740193b041351e444916045da68190</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a399f342e0bc62cddc0763a901fa9a682</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af5135c23fade7b3769c702dedeafa623</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a83679f745dac6da032e9cd7fadcfbb68</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa1ffaed81b984e177b3383276b57c11c</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7fa3a7dc9988bb8e07ce8ca1dfa42a5a</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae999195f16777ad5668611993857b0f6</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad09f4727b6d7062da559e6990dbc0238</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aed7095385d8a106c740d690bb52fed55</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab1f6080846418a8f33ca846830f40494</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac414e09a5731befea5672a4674194405</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab39b1d1aa10a3204ffaf8f068a5fbb39</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0cc4fcbdb060d36168a4ede4b00263d1</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8d8f4e278d1d965ad67de96b51739527</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a053906a85380763aadd01bcd34f719f2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad63b6a58e50ea0d8b39e57c8b36b891b</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab6c57497344b45253d26dc22f9101f6b</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0e06188926c33a3804fbdc6da99f4255</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa9f2aa892c5b63c3f4d8f9f51975d06e</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af975bebda1d4da1be9cea2afee95cd1d</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ade76664e34c7125d3cf371affd4196de</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abfeb627079874f585840941c88acbc39</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a36430f251e825989d83e2fada31a8ce1</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8d6312c7099f4374fc701469b73dacc2</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab6b087a59d11987b5d24aa6fb1c359ed</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a52d7d0733bd9ce6856b072988b747c46</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7f7cb09fd2b9ab819fa1fb0f6a068590</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aacbb546718541b21ed63e07f47336bc4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ace80b13a48086aa47057f3685a8fd46c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>adc79ad3cf4ca24c20bacb8212aaf0b25</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8bee1240e2d38f373bd617aa9fea6584</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a538b421c2006faa93cb06e668bc57c24</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a25f9a9ab41e723912d627b1024a007d9</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aeecef4ac9a7b68f115e12e32e8c9511f</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1eb619db34f52c230bbda821ffe93003</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae45ea728eb86aae312607d456df892d9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3db619519c11115ec4ad12ef392ad7fa</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a03e61e289d7a46ec9546ee9aba53fd3a</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a913b04165d68fe944f4be22a2a7ada3f</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7babba94480e0876633f9988eda87cc4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a66248410aeeeb1a74f2364d0d3c19ace</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af847f861900aadf4902d6666e8984ee8</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa22dd7539292b1e0fd27534d40e34700</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a57fdf3bcbac37d6945dc52b5b6d881cd</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>acc3af103d5452dd1cc311d5ce4e8210b</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abc57f2dba95a9dfac325ef550ae7129f</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abbc90408e28270b3bab525a44634ad7c</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a86df8f53b7de5ad6bf86c2b47fc2ed57</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a21e1e18add527d606ada2cc338bc3cf0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a12a915f638b03f53001179d9ac1e7455</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a8551834b1f22dce9295b7a12c210603f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aab4fefe114152a5ee78bffa9e8d5b7d8</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0947da79d460387e025f091c605858da</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad371649242e2ac5ccf71b942e38de175</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab7b852acf4b6fc514281436d06be5bb6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa6274bc46b66e8dab364576a8417a0ee</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7d2e0cfe0f9283d6d66da025322da148</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>afbf4627c42a2becdb510b3455d973371</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae3599d21899433961e346be84cdc4fe1</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae8b6a3a02276516b315fa052b26e2c43</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1253faccfdc4d38d7f06547eb481edcf</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1e71cf6d299655661eef0ef2e81ffc7c</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a07f130c8776c2b4eb0d8a58ac2cfa7ae</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2d309a1905856ca97a2f71c8844aefae</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a01780a24effcac7c73039a1738b735f3</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab7cbbd17c3d79b4e0325a8d97e901229</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3d8249f3d0119f42718cf7749562fc47</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abf5b5129aac5a514c89cf266cd6e7d44</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7c79c434c9ecf4754aa5036fec184d03</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0e923338cf811f7fb7c7345d9fb32f04</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7eed91b854e9c1e6b13465748f1ff87f</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a68d6de77c122568a7e2f17cb30bd3485</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a498947850bc5cc331b976028e381f361</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4119f58d23d21bc73811b79e876c78a8</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a686315a13de8e0d5167074a7eaefc8a9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5861c10f1d82586a38aaa3a98f76ca33</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aefb6b847a96b53ec6bcf9f8b7ff8b74e</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a592838f81d7499bc4d3eaa6849a5dc47</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abe5936d968656e384d79382bf36d4353</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a80f7d9dbc0e9822db08cbd2582e96bb0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a54dc427600375f289fd0977f0aa82997</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abcab2bc9fce5aa7fa0312741f4627ac4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4eb84363145a891535ce0850d053bfa6</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a41d74db754366cfc96edaa6d710c92a3</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a57b751f3dbd409960a9d53b33dc22299</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aacd95b8e03083a827c43fba1bc522285</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6937b1a3f1e1526cb4b371ae8fd01e7f</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a09f8ba8c141f6cbb3ee7e338218ee730</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1ea7071f800ddc34db0e0160e1e73059</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6437e64e3c892bfd61fdec68e7a70b3d</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6505b63c65122bc6885f5da118cbc86f</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af73fc1cc80dea3af5261aa6d5f2b0060</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab8672d8efce8db721ce6ab7ead77487c</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4912e501691680cbf79d1622611856d7</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>adcc2f09ead0d6277c4cc3d5dcdaca1f5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a005bc6349b73b8261c0ee432811b00f3</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1cf9649ed29c26122fc082b1446791f2</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aae880017ae8316494e7fff67749f9b15</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a74164f69a91c04b15299db73bb6a5f61</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa569e46ea828422a9cf1b79fa92a2a39</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae671218e46fb1708805d0278cfbc5207</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad2bd41e5bc55c420a51f749019f1b9c8</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a714cd18496fb7017089aa2b738e097fb</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4711bd004b29927f62bdb14832a73ea6</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af359ba696db91020368006064f291fe5</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abe1540bfd28f6117c2a9fbc5f3f84731</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af78522252589584ad04524e6ab0ef9ab</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a494c0dc35fc5536ed16888b784975667</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a264f6ea4a15cb2f0646f4d6676257fbe</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a62f3e77d789f2cb8c00ecee21c8ddc3f</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aebeb64e05b5f77aa22409d4450339b2a</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0e4c663342e9725141359247c52f46c9</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac608064dc0394ceba6c5683abf6cb762</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a054c9190650548a5b94fc8f951ee6ade</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5360e58ada3d31090a5b462444d4c6bd</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a56fe885038290db99c8aee15cb4d62ca</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a37066ba6f26ee65d71d666d53fd1f88a</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a19248491aeeff650300acfe5efe0fede</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2e468fb3cf80bd04a7bd1ecc70267576</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abbdc1ddefb22f789ea3e5eb70b5c18bf</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2a93723570afbfc3636676d897a575d9</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab0cccabdf6eec94e4a669db9b1ede756</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa5232b37bb4fbf857293119257efb02e</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a62ba5e8bee937bc5f53c05dfa2711741</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4097ad0b713b7c47eda5e8f4bcdce030</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a357dda29de12c3514e5941191142fa5c</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3403b067f9211e061a496b0a67374b7f</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac23a6e1d25fcc009b9a9fb1fd75311ff</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2d845518021df2ecb388cbdfce3862bb</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a71dc43805a820e20b30da55cc765aa48</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aaf779bb4dfd290ce241886a7856bd22b</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a35152938bb2f722ea1cfde797b3fc5f3</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a3fa6d0ef738af1b354a09945ae02367f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a30857d4ab11e31c78c6b527d31937386</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a839611dac813199427803c6188332558</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af328cb624786eaa0f581f5da53c33986</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a12dcaaba9957a05c8b69d32bce2a28d2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa46c46f792e2afc6d0fded14dcbb1e80</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa6cca773fb7d3b3277bd7943627837a8</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aba1d6a55d81dbbc82f2bdd8e0f33f427</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac9a591fd1105f5994b5702bbf55aae7a</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aaefcfc7296a5950483a7021fbce06801</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5701dc62a139039a1c1db2e46b8cb7d0</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab013797c4ca5653f507eb5b5f89a3670</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5289cf2ae3c1b8236975565470284de7</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a59c1c62104dc7d5d4adebd1e409e8f9a</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7e2f2a55ec661f220579329b59083d2e</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a612324f5885b40085b0eaff7e8e3b19d</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a331688e45f59c0ffadf15856006ef098</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a328096a8ca41f628c6f3a03e4d4aec66</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a383a710273066c98e6d52579b5aafea6</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a055d8656e16231c13c1f1b96d6c41f9a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>af73e707e57dd54000c465877fd7a63f9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a306455dc63bbc622b8187b2f39c1d4f8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a15d6ee7191acec4e109fab0bd9fd2654</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a50d1d20e919503f042a8a26ebdbe7fc0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a58109355972e5853345fb0e6afad2b7d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a72b4575f29a6ba836f7e8c3c7cfa3cac</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a6da9e138f905bbd0cf25db3fa5f680fa</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0a09bf9f0f17ebda449208aa0c70abd0</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7b51b308c9c26bf98a85195ea0c7991b</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae6c078630ef8da0962caece000b3d04d</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a421529da5bb99a610a31888416461376</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9aa39cca3b67bd716fd97c6fe37a56e5</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ae2b7b4526fda5190393003ee354889a9</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a7af280f69ab2214ae382a72b2c6a231e</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ace9cc45c76b7da6f2b719c9ea00dd353</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad392988c8744883f9b9c9d65042a2dc6</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>afbb9e946da7129ec3007629a5fd2efca</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aab90bb56d858d4574a8e74224c08ef44</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1d5552790fded7bf1f99aa238b8fc9e2</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ada961e7c4d823bedd24bea297dc2f1e7</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a82994c199ae902be1c0b2a3e11e3a69d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aa682e36c656dc60541dc6af15a7eb60f</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aef3cff9ff0693c5511bd25b0ae196ab2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2b7cf3a0f50639037e92d4014b8b229d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a88c2499f1f59bac15cecd2b6cfd87628</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac6b0004ed9b1fec311dd2f6ac4ea15fd</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a544e2ab690ab38482f8e4bc153a5bc95</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>aed3632441db3e5602e87ff2914f5fe15</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a4a4fdb657c9689bc4b93bb5eedc4b63e</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abf8639806804acb6cc4f0c766bab15e4</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a1f2bc944604f454ea7dbe1f9d4ed249d</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a238dcce245f94835a239c47bb8d27519</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a15e20e27da88fc7f41636024bee42fdf</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a0fe1e1016290f1d2d5646445a98ddbd0</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a03b00c072106663958557c9d58678dd0</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>afaecdab093b32b42e44ef3db122ada80</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ada139682a73bb83506e6a29bf82a8584</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a49ec8c803c4e2ed7c2073cf3680e7451</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>abca3d68934b4544c41ce968f036876a4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a03817e77a39acf4aa228324dda0b2214</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a9ca3b5f3251aa169e89b9212c1a34028</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator~</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a96548da65e6696459f807067b0d85d95</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>add_signed_friend</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ac4786ded1b0fc304d8530d45a4a5ff42</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>sub_signed_friend</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2018fca6a1d5d9b8a0c5c07af54ecfac</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>mul_signed_friend</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a50e4bc75cb27660ccc51b2d5c9fb892d</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>div_signed_friend</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a2f3834253f32f66a51a86bf06499343d</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>mod_signed_friend</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a5652a3c6fcfec958beeb0445a1cf23b1</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>and_signed_friend</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ab3a4ca276d2bd35fafec7304875e53a6</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>or_signed_friend</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>a91148f9a603923065a788cb5d9932675</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>xor_signed_friend</name>
      <anchorfile>a01668.html</anchorfile>
      <anchor>ad161009e7e1612bf9cac8b52878e6594</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed_bitref</name>
    <filename>a01656.html</filename>
    <base>sc_dt::sc_signed_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_signed_bitref</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a54cbb050b8f8c96111d2dc1374c24b3e</anchor>
      <arglist>(const sc_signed_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a4f876944eea6016a6d34ae73c41db9b7</anchor>
      <arglist>(const sc_signed_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a57aa894ee82f4f42bfc7719c303be9e5</anchor>
      <arglist>(const sc_signed_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a6c08a97588f32bf3aa6948397c170864</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a4e3fca66b21a7769d3fd16807b4e35f8</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a824dbb70a2486cff234aa4ff63d9e39c</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a01b0bc2d6bd176749160f6b241dd4b1d</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a21faacdf01331334f345738614b5593d</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>ab9cae4c9722fc06b8a7c0b1a6bf4330f</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>ae223256570e774c0b31e3409a75d1a3a</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a038a5a6a29bc118d70e14dfa2fcfbc58</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a6e56740f11f103fdfa86488e866b6ae9</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signed_bitref</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>aba6f905f67814dd914019fd66e81a955</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_signed_bitref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a9f442393353e52d8fcc25e75f0e1a443</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_signed_bitref &gt;</name>
      <anchorfile>a01656.html</anchorfile>
      <anchor>a59037ff17480dbf07d8cef3d06ff36ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed_bitref_r</name>
    <filename>a01652.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signed_bitref_r</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a014645a4f1f1b28dabd5b6a66f2afc49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed_bitref_r</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>ad47977394c72b6ac4710b23e4978643f</anchor>
      <arglist>(const sc_signed_bitref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a1be780b721195771f1eeb470227a0bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a0381b5bd2d49719dcda592be4153b499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a9954d0393ed6d175d6f3194f31a191de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator~</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>aa6c40f7ddef97e2b5843bc7c802578c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>value</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>ae5ad569ea93032698b28e9bf214fb048</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a55f37c777192350594746acfe7218b49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a2d75fc7aa2ca94a4062cd9f94e4b3d30</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>ae23778d155829631fc992aec54b74b04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a3a25b819d2c088d1dfbc624eac2e26d6</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a5ce018562a155e47d01a5b9f09860535</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>ae7dbf6c7a934b60c1a4f710d03a2a083</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signed_bitref_r</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a0501e7def0fbb4eebea773a8659ec715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a4e30528edd3960d96bc154806e3c9926</anchor>
      <arglist>(const sc_signed *obj_p, int index_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a2992a3bf76bbcaa6ebf5ae921129ebd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_signed *</type>
      <name>m_obj_p</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a618a0c55dc63f5e75140e63684d5c469</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01652.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed_subref</name>
    <filename>a01664.html</filename>
    <base>sc_dt::sc_signed_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_signed_subref</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>ab1fc6f49a2c78be3c1b8da9309052e8c</anchor>
      <arglist>(const sc_signed_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>adf71d9171d61fb474829e0f8b94fca57</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>af8f0c14ad684a4a749cad08577639657</anchor>
      <arglist>(const sc_signed_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a5d3448e5098075541ac1cd1e9b1a34d4</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a4517f74dc21af83f39c693e67b3753dc</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a2ae2f84f7a57b553733be01d1efbde99</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>ac33561dabad9712045c7a20c0c2cd707</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a3d099a2eadbc02410ab65fc4554021e8</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>acc1fdcc3e9594770e6a9bc26c0489437</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a908f93b0800dd96a76ce5d8d33d8f733</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>acef90ba20cf581346ed59ef17f504164</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a1fc011248fa4ac28d432036909aafdb7</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a4cc533fd128949bbba9870cc45ada3f5</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a7ac0ead04d0263755de6b543ba3eaa55</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>af08629c6ab46324e394cefdf94eeb970</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a9b17e52cf6a211db3f26be0fd9da3a84</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a96010e8d2ff78c7fe417b38158364da2</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>aecf2606ce554c6d16d76e9de0fa8ddfd</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>aaf7e2a1cbd3611ca4a8e84036c8ae173</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a0f2422b7f3ae9216060269fb86d616b7</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a9b91edb296e5d6ead4fcab66e35065c2</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>ab0472829b30cbea940e085ee3d392d08</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_signed_subref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a9fc429bef2058874c0c7670d8deacef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_signed_subref &gt;</name>
      <anchorfile>a01664.html</anchorfile>
      <anchor>aaa2aa269d40aafed20e27b90ef867110</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed_subref_r</name>
    <filename>a01660.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signed_subref_r</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>ab3dd2a3dc0eebc7880b7af39afd9dae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed_subref_r</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>af497ddf1b8545a2687f05f2ee7b2ef83</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>ae9a16a1d52fdff8649caa53e7978cb68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_unsigned</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a548b74dab52adae0c1c6dae657b77fa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>ae54b9d3a3374e78cf672e7f9e159028f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>ae0eea8cc1e7d40fd95fda49f95ae9651</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>aa567042202588cfa00e634f393dec841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a4ebe656ed0e83596a7f08890543e0cda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>ab0852991c50434a742f8bd34669fbb97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>aca5693b5f957fd3fcc02c86362cb7f00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a16976c59012bb02dfa21294f4f2e27ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a653a8ffe426ad8dd94b67954ecc6d177</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a7c0730bd84adf83d9656fdd0df4cd990</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a469acdf388368ca6e2e64020ff0db715</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a5e4087784ff7efc2260cf2a9b94dc95c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>acc6cadc32ece35cedd29f145f0e98d3d</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a5fdb9e42d3df76a573139b269a0becb6</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a37f1d448eaec1fde3eb1ba4f1fb5996c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a9ba207c067a93d595bc8ca35414801d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a1323d9494c5e445078780f21b4638533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>adf23dd22645a7a4835b87ad64b0f23b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a086870e25d3a4f3c5b6d6f62c4c0c93c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>abe95f79796613ae6b862599ffcc1e5f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>ac7de633033975543cd621fb0fa842a49</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signed_subref_r</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>ad23a781217aa1f6925f38220021224a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a7cc83a9288f69895c9551016ef6be718</anchor>
      <arglist>(const sc_signed *obj_p, int left_, int right_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_left</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>ade494f8e2693b396d6638daa3d3328df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_signed *</type>
      <name>m_obj_p</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a64c5d07b785cfdc127de2d0d837f1a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_right</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a4f5fb601aa6928dbbd6c44ef41a1d99f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_signal</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>aff3099a7eb72fb330a220a526344b538</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01660.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_simcontext</name>
    <filename>a01920.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_simcontext</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a9334d34b5a07200809a59ecd9804eb90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_simcontext</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a6782644b749b256b71907fbb46a06afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aa9fe599fe163deeabe4a1f5d119f8d4f</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cycle</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aadb67731a021e8ca68e103c3f68f5b85</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simulate</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a1584d0dcd7cfb3926790abe371c56667</anchor>
      <arglist>(const sc_time &amp;duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ab9ac7560758f5f9929a513b7a931401a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aefc96234c50bc5138f17449cd55c59bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a9baeb1082852ea3d274a1c57cb9edeaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sim_status</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a4e8089023e9a73d3be9e1d873a1de001</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>elaboration_done</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aea2deb0ebccef6dd978e774dde6c593f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sc_thread_handle &gt; &amp;</type>
      <name>get_active_invokers</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ab30b0f7dafd9594e1a1060fa93e752b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object_manager *</type>
      <name>get_object_manager</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a6aa980c35088e698fa2d3aa1aa68c98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_status</type>
      <name>get_status</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a70201b20480b9c30d29b850bb04557ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>active_object</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>af04609cdec4e868a9f88813d3d73a6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hierarchy_push</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a52a49829429b0f9f931a96ab1e82de07</anchor>
      <arglist>(sc_module *)</arglist>
    </member>
    <member kind="function">
      <type>sc_module *</type>
      <name>hierarchy_pop</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>acb5334d037d1dbede55e7bdd8a2ecd0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_module *</type>
      <name>hierarchy_curr</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ad27331745f190a5df1a17f20737edd9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>first_object</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a3aff77140aa8004d564ee44071b60dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>next_object</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a41cd950ff24f8ba73e6e07694d398be2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>find_object</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aa3eb1bf0e1d6e0b2393a6d7f48d62be4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>sc_module_registry *</type>
      <name>get_module_registry</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>af3e5384d487a745cb2906cd89c0adb4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_port_registry *</type>
      <name>get_port_registry</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aed9144ebbcfee24081db7cde7ad3d2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_export_registry *</type>
      <name>get_export_registry</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a00f6135b88e21c7583fc9b67cde703a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_prim_channel_registry *</type>
      <name>get_prim_channel_registry</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>afa7081416901ed7f0b0007d3e2ca7544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>gen_unique_name</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aa5eb5fc70503ce5c2e80a20af5db37e3</anchor>
      <arglist>(const char *basename_, bool preserve_first=false)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>create_cthread_process</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a0643cbdfceccdcf32112784e10222327</anchor>
      <arglist>(const char *name_p, bool free_host, SC_ENTRY_FUNC method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>create_method_process</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ac30b85bac33c164c09abf39544602e38</anchor>
      <arglist>(const char *name_p, bool free_host, SC_ENTRY_FUNC method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>create_thread_process</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a07904d5da4a40136629f256641a5e686</anchor>
      <arglist>(const char *name_p, bool free_host, SC_ENTRY_FUNC method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_handle</type>
      <name>get_curr_proc_info</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a805d160dbea38fffa421c1ed47b97388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_current_writer</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a1d6a42544d9600bd70b31a8808010138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_check</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>af558684cb333a0994944b5c92d7e22f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_curr_proc</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ab22fd16892cd874ab61d91fa53f06eb1</anchor>
      <arglist>(sc_process_b *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_curr_proc</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>af5b11d35ff1809f83aa792ce4be29ba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next_proc_id</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aaceb8068f51bcd6b3a768ec9e82d0d1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_file</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ac1aee125fef23254772e9091683f0c55</anchor>
      <arglist>(sc_trace_file *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_trace_file</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aeca0492d03c1dde3cef04eedb18c53f6</anchor>
      <arglist>(sc_trace_file *)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>max_time</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a6918bf028e320a1f34f34278a8e6a84e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>time_stamp</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ac625d4b0d701f8c441100134a747d179</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::uint64</type>
      <name>change_stamp</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a2741bd05b3af16cf4d2ea24ba1e2ab91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::uint64</type>
      <name>delta_count</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ae959f3f89bf4a860b225388c4ab21cd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event_occurred</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a64ba6d97cea376275e0e738df49ab6b4</anchor>
      <arglist>(sc_dt::uint64 last_change_count) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluation_phase</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a3fae4b327b8098cad0571b1b8977040f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_running</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>acdb245486c30b6cac0a24c600325d782</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update_phase</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a9a81b1dbb276c09823fe4d0a036dafee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>notify_phase</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a358bbdc5719580df3ff3e33f5a72f0be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_error</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aaf7e589ea2181b2373aa35faf27e0e2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_error</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a8d9fe55b060a95e0982cb81da2fc1fef</anchor>
      <arglist>(sc_report *)</arglist>
    </member>
    <member kind="function">
      <type>sc_cor_pkg *</type>
      <name>cor_pkg</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>acbf9ba8bf0fedf8b845ecf0c99fdfbfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_cor *</type>
      <name>next_cor</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ae9ead1f76e29216cda16cfc40fe3bf56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a43e044251eaeb952bf5dcefeaba7aab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elaborate</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a1308e4a85e567b0f8f67c6a4aefcfc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepare_to_simulate</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a3901494cff792a7fa4e57aa2ff0d5478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initial_crunch</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a53a4151b2caa14dbafb5a9996d771d76</anchor>
      <arglist>(bool no_crunch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next_time</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a3b6df19d5eae94b9b6a581703f3673df</anchor>
      <arglist>(sc_time &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending_activity_at_current_time</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a119e3c7ae6a4c3896746153a38ce3b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>sc_invoke_method</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a0c408a59b7d4321afcb70bab92b8cacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_time</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ad5c5666b46e30e83ba2901b492aab711</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_clock</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a034ac2d3cac16d03fca09a19b0b947e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_phase_callback_registry</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>abad74f3d94e3f056b7caa556811c4a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_prim_channel</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a82133fbb2741616deabd4533c367da1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_cthread_process</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>af2c9e96bc0fe4f99c3fdbf18a3965fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend sc_dt::uint64</type>
      <name>sc_delta_count</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ac51bf944765d1057d69c582fb1db2208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>sc_get_top_level_events</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a8bc7505ac265bd8834b5ce41bfc32a57</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>sc_get_top_level_objects</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aac830e21733167b92bbc5ab0c5315db4</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>sc_is_running</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a9d8cf5a218bc2656b84dbbbfa6404d8e</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_pause</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a56cb83182bfd62f9f3226409ab24c001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>sc_end_of_simulation_invoked</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ab491fc06a857aed372b6ea49b7884793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_start</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a1a5efa2635dde86d78514a4389e5d406</anchor>
      <arglist>(const sc_time &amp;, sc_starvation_policy)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>sc_start_of_simulation_invoked</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a3f38c171fac5b247348f3089e0346ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a3b6d9393496e36a33c0a5232d0e25985</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend sc_time</type>
      <name>sc_time_to_pending_activity</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aa0c8d7cc40403c5259c0fae518037ee6</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>sc_pending_activity_at_current_time</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a858022297a12662181a85aaddd8881ec</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>sc_pending_activity_at_future_time</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a3b0e92e6b3bf778f419609129c4a1284</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>sc_set_time_resolution</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ad6741a7104c03c99202339f78788d4f6</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_time</type>
      <name>sc_get_time_resolution</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>ae1f38db334654eab53c482047497bc1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>sc_set_default_time_unit</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>a0c4ea9d4d6dabe7dcd8ee93ffd18bbc3</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_time</type>
      <name>sc_get_default_time_unit</name>
      <anchorfile>a01920.html</anchorfile>
      <anchor>aad1889ecb4264c707bc2ed0b8215ead0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_spawn_object</name>
    <filename>a01924.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_process_host</base>
    <member kind="function">
      <type></type>
      <name>sc_spawn_object</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a8e306a2890d46659b23b2a91ba284c6a</anchor>
      <arglist>(T object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>semantics</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a3f6055df6581f96bf11e6bd3f3746642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_object</name>
      <anchorfile>a01924.html</anchorfile>
      <anchor>a1d632b76b56ce8b3de1d059d9cae421b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_spawn_object_v</name>
    <filename>a01928.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_process_host</base>
    <member kind="function">
      <type></type>
      <name>sc_spawn_object_v</name>
      <anchorfile>a01928.html</anchorfile>
      <anchor>a36c23b3fb303964c4ea165ac543d27ca</anchor>
      <arglist>(typename T::result_type *r_p, T object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>semantics</name>
      <anchorfile>a01928.html</anchorfile>
      <anchor>a78fcdfcb743b7ca91e4d65f17de23220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_object</name>
      <anchorfile>a01928.html</anchorfile>
      <anchor>af67c05bf2d168d9bbabde87192686e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T::result_type *</type>
      <name>m_result_p</name>
      <anchorfile>a01928.html</anchorfile>
      <anchor>ad47c000057a1fbff7c82114fdcdff154</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_spawn_options</name>
    <filename>a01932.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_spawn_options</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ae2870e096f6171111e3b965b62a4e85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_spawn_options</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>aaee636f1368e438971035047790beb39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a2d9f63a0d782a436867e712cb186e2a5</anchor>
      <arglist>(const sc_in&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ae72f1c81f34297418a6f8a853d45c6ef</anchor>
      <arglist>(const sc_inout&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ab5d5ce06e4e8dd04b99e0d4c5261f41a</anchor>
      <arglist>(const sc_out&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>aa60cbf4660ea1f7df3a579e574b46236</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a2839be3d14e085b2a123818158396e11</anchor>
      <arglist>(const sc_in&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a8b1ac98f7cad69f1665931a2fdc40c32</anchor>
      <arglist>(const sc_inout&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ade8730750a58d5fe07d1e39e4af841af</anchor>
      <arglist>(const sc_out&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>acdd6d13604008f7825a57b30085d3e88</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dont_initialize</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a2543a53aea98b147e7a21cb8d9d54f15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_method</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>abdd6ac0fbb9cc2acb496d2d7e1c966a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stack_size</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a60ac96580288f2939bed145c5b74d721</anchor>
      <arglist>(int stack_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ae063bba3b2314df0ce24877a6ef23bb9</anchor>
      <arglist>(const sc_event *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a4d94797b98a4df5921216dd330a4e186</anchor>
      <arglist>(sc_port_base *port_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a2b558e066cd3a3bc41d8526ddba769aa</anchor>
      <arglist>(sc_interface *interface_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a8dab4c0354d098b89efc616a6991c8bb</anchor>
      <arglist>(sc_export_base *export_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ad9ce12b763706635b3f31854d5361229</anchor>
      <arglist>(sc_event_finder *event_finder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_method</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a3507101b40ea876527a5d34e638eb2ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>specify_resets</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>afd68ab7edf68fce0a32a5384a1d64330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_dont_initialize</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ad19813c57288806da38238f7dd743a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_spawn_reset_base * &gt;</type>
      <name>m_resets</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ac33a6b80ea847b3a5edc5c7e1c5c917c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const sc_event * &gt;</type>
      <name>m_sensitive_events</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>aaf38b96681607b575a5cb0f1e314e0e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_event_finder * &gt;</type>
      <name>m_sensitive_event_finders</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>aaec8b34bc1be7424c2a002cf1f557377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_interface * &gt;</type>
      <name>m_sensitive_interfaces</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ac5bbd2ad5ec68068f2d250ea828a2da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_port_base * &gt;</type>
      <name>m_sensitive_port_bases</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a328fe22adb1e8e3aeaffc22927efd553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_spawn_method</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a1c5dedc98347bd0e2df79ae0b792bc81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_stack_size</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>a5421303e30bac9d24675d9047dac9938</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_cthread_process</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>af2c9e96bc0fe4f99c3fdbf18a3965fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01932.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_spawn_reset</name>
    <filename>a01884.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_strhash</name>
    <filename>a02004.html</filename>
    <templarg>C</templarg>
    <base>sc_core::sc_phash_base</base>
    <member kind="typedef">
      <type>sc_strhash_iter&lt; C &gt;</type>
      <name>iterator</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a0b1e91175b91de90d6fd2b2405259186</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_strhash</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ac3467828a94198041c0146bc9ca1d2f3</anchor>
      <arglist>(C def=(C) 0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, unsigned(*hash_fn)(const void *)=default_str_hash_fn, int(*cmpr_fn)(const void *, const void *)=sc_strhash_cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_strhash</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ad166c10787bf06570033dea8fbcfdb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a937ea44a813224c6569aa6b215e4b315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a5909b6fe064b8c85a96a9e6564d99fe4</anchor>
      <arglist>(const sc_strhash&lt; C &gt; *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ae07634ecbf055a089eeaf2a6b85c3ce9</anchor>
      <arglist>(const sc_strhash&lt; C &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>af508aae9b6fcf29a2597dd90b3f1c10e</anchor>
      <arglist>(char *k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ab8f887ed98680996196a9b36277624b1</anchor>
      <arglist>(char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ae0fe4af3a4a5d15f499e3c712642281e</anchor>
      <arglist>(char *k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a29bd46da50283981379942033e5e023a</anchor>
      <arglist>(char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a79a89ad507398da2d0475df5a35963bc</anchor>
      <arglist>(const char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ae7cba0782d6e627eb13c388c76ae2d8c</anchor>
      <arglist>(const char *k, char **pk, C *pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a513078fc07e9a88b7847f25ad5cb7f35</anchor>
      <arglist>(C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a9ada4f3fafa4c6f981eb5aadd0962df4</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a73a26f250fc0bf2cef83c82995f0585e</anchor>
      <arglist>(const char *k, C *pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a494f1cb739fd3605675213fd0c20b57d</anchor>
      <arglist>(const char *k) const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>operator[]</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a331b4c51caee1aaa82a79f89b5966589</anchor>
      <arglist>(const char *k) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_strhash_iter&lt; C &gt;</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a9982895c7a6d0b9a9cbb905f5e4701ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_strhash&lt; int *&gt;</name>
    <filename>a02004.html</filename>
    <base>sc_core::sc_phash_base</base>
    <member kind="typedef">
      <type>sc_strhash_iter&lt; int * &gt;</type>
      <name>iterator</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a0b1e91175b91de90d6fd2b2405259186</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_strhash</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ac3467828a94198041c0146bc9ca1d2f3</anchor>
      <arglist>(int * def=(int *) 0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, unsigned(*hash_fn)(const void *)=default_str_hash_fn, int(*cmpr_fn)(const void *, const void *)=sc_strhash_cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_strhash</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ad166c10787bf06570033dea8fbcfdb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a937ea44a813224c6569aa6b215e4b315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a5909b6fe064b8c85a96a9e6564d99fe4</anchor>
      <arglist>(const sc_strhash&lt; int * &gt; *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ae07634ecbf055a089eeaf2a6b85c3ce9</anchor>
      <arglist>(const sc_strhash&lt; int * &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>af508aae9b6fcf29a2597dd90b3f1c10e</anchor>
      <arglist>(char *k, int * c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ab8f887ed98680996196a9b36277624b1</anchor>
      <arglist>(char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ae0fe4af3a4a5d15f499e3c712642281e</anchor>
      <arglist>(char *k, int * c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a29bd46da50283981379942033e5e023a</anchor>
      <arglist>(char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a79a89ad507398da2d0475df5a35963bc</anchor>
      <arglist>(const char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>ae7cba0782d6e627eb13c388c76ae2d8c</anchor>
      <arglist>(const char *k, char **pk, int * *pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a513078fc07e9a88b7847f25ad5cb7f35</anchor>
      <arglist>(int * c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a9ada4f3fafa4c6f981eb5aadd0962df4</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a73a26f250fc0bf2cef83c82995f0585e</anchor>
      <arglist>(const char *k, int * *pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a494f1cb739fd3605675213fd0c20b57d</anchor>
      <arglist>(const char *k) const</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>operator[]</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a331b4c51caee1aaa82a79f89b5966589</anchor>
      <arglist>(const char *k) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_strhash_iter&lt; C &gt;</name>
      <anchorfile>a02004.html</anchorfile>
      <anchor>a9982895c7a6d0b9a9cbb905f5e4701ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_strhash_iter</name>
    <filename>a02000.html</filename>
    <templarg></templarg>
    <base>sc_core::sc_phash_base_iter</base>
    <member kind="function">
      <type></type>
      <name>sc_strhash_iter</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>a126a60786b9caf921fcbda277331ff3e</anchor>
      <arglist>(sc_strhash&lt; C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_strhash_iter</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>ab72973fe0e20f8d588597fac17ca3ebe</anchor>
      <arglist>(sc_strhash&lt; C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_strhash_iter</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>a78871d8b4ea3a258be9d8f99ab9e7179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>a89cd3ce4be36d78b51073b9893409652</anchor>
      <arglist>(sc_strhash&lt; C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>af405fe2fa0d30cb8c8df6c6af698cffa</anchor>
      <arglist>(sc_strhash&lt; C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>a0cabb8d6e01871084b04214ad91cfd37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>key</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>a2095ddf7f5e8f811f073dcef03589879</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>contents</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>a22123aa446f92a9bf748eba7fcc21c40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>set_contents</name>
      <anchorfile>a02000.html</anchorfile>
      <anchor>a324a7f7c63bb0177691f3d55283f512e</anchor>
      <arglist>(C c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_string_old</name>
    <filename>a02056.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_string_old</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a07d5dafb8143035ba67edb58b4b590e7</anchor>
      <arglist>(int size=16)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_string_old</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a3425560304e25389eea7bdb1b9455352</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_string_old</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a4ded8f456217c39b8f30c4c88e7bfdde</anchor>
      <arglist>(const char *s, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_string_old</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a8710776d3d43e1d8b987457f887d1c91</anchor>
      <arglist>(const sc_string_old &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_string_old</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a24dbbbfc7d5f6342e662e6fd792b0ae8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>operator=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a53f219c6ae80df40e63e7dab4c5dde64</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>operator=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a60a77ccdaba27e52f88f17db786fd7bc</anchor>
      <arglist>(const sc_string_old &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a3458540ce6f1a91365e80837ac8a50cc</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a69e42f9d9eb89e567f44c416b25d3b3c</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>ae483b96e60fe73421eaa7b72de55f472</anchor>
      <arglist>(const sc_string_old &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old</type>
      <name>operator+</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>aa02c9bfb71af3b481ac0834aceb5db45</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old</type>
      <name>operator+</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>afe7e591ab72326f89447c6941731f97e</anchor>
      <arglist>(char c) const</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old</type>
      <name>operator+</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>acab05b210e6cf282b816cbe2b7d5061b</anchor>
      <arglist>(const sc_string_old &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old</type>
      <name>substr</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a5d86e0f6cd13b5d3ade2b7ce431f50b0</anchor>
      <arglist>(int first, int last) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>aca63032cb5c6aadf76ec7a3af43ad0ad</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>aeda4eef5ad15349e3feafe601ae61e05</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>acd9da81ab54d1e7423fff8c500898075</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a65ac70801c88eca1f7a4cd8fb036e775</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a6558534db9e2fdc5d265d2dacf0bee20</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a1927f36abde9319d759acbd3aa8cb27f</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>af39f0e511a14c75168852fd40f4762fa</anchor>
      <arglist>(const sc_string_old &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>abca060096197ba2443ccd8309e4bf617</anchor>
      <arglist>(const sc_string_old &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a62394e12fc6e1d4a3dc882ed2ef2ae3c</anchor>
      <arglist>(const sc_string_old &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a2660d6c23cf9ed785ba6a4d84c5755ae</anchor>
      <arglist>(const sc_string_old &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>ab6c3adaf080bdf9104204185b44e31ad</anchor>
      <arglist>(const sc_string_old &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a5349c8ce8e13433abe3a513dc1964867</anchor>
      <arglist>(const sc_string_old &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>afb9712a11717176d16208dd5c3817948</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a125dc2a3e37635c150b142515904eb5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>adc1fc5a95de4099baa92ec649076a888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a0c9b39cb5fd9c2e9cc3f414f908cb512</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>ac73a02a01321d6a56f5c8abad7e24b59</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>fmt</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a2b009b9702b23c3a0f20f33a5e0974af</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>fmt</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a8bfd0e2aef98a2c790eda2bbe1a752af</anchor>
      <arglist>(const sc_string_old &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pos</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a78f395e8c2848738a3143447d6872a4f</anchor>
      <arglist>(const sc_string_old &amp;sub_string) const</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>remove</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a117adb210314e92cc2772a72ecb28049</anchor>
      <arglist>(unsigned index, unsigned length)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old &amp;</type>
      <name>insert</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a622e4b98ff7e7a5f296d8b124340fcfa</anchor>
      <arglist>(const sc_string_old &amp;sub_string, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_delimiter</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>aa2cee67fc15128ab274b562045ff447b</anchor>
      <arglist>(const sc_string_old &amp;str, unsigned index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>af0f7fd58abd67586c9bc5b055a00cfc9</anchor>
      <arglist>(char c) const</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old</type>
      <name>uppercase</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>afff036bae59f645afc12da2afa059e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old</type>
      <name>lowercase</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a338f58bfbc524b460a63d9c626382836</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>affbd198a54ccb3d6608ba53002601588</anchor>
      <arglist>(int index, char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cmp</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a3e54839c052e44613bed92e1b6da8f51</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cmp</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>ad2f7d8de113a67cfbd3581b4db0f5d9b</anchor>
      <arglist>(const sc_string_old &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>ac6a219549988e0d11edb5e8c5b15f0ac</anchor>
      <arglist>(systemc_ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_string_old</type>
      <name>to_string</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a42bdf3bf653b12aa64154fa7dcbcd830</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_string_old</type>
      <name>make_str</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>adf027de053b719fac0b26f883fb8d00d</anchor>
      <arglist>(long n)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend systemc_ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a61e2c8e83bd2ebe2083b3f2e72a83d8f</anchor>
      <arglist>(systemc_ostream &amp;os, const sc_string_old &amp;a)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend systemc_istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a7d5229cdc73be6245ddc4578ec0f5a30</anchor>
      <arglist>(systemc_istream &amp;is, sc_string_old &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_string_old</type>
      <name>operator+</name>
      <anchorfile>a02056.html</anchorfile>
      <anchor>a19029b3553a536b2774f501b1acb353b</anchor>
      <arglist>(const char *s, const sc_string_old &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_subref</name>
    <filename>a01380.html</filename>
    <templarg>X</templarg>
    <base>sc_dt::sc_subref_r</base>
    <member kind="typedef">
      <type>sc_subref_r&lt; X &gt;</type>
      <name>base_type</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a69711e9cbfff94300734e8d095db6ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_subref</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>aefcb1adc89501545adff91d682d4a91b</anchor>
      <arglist>(X &amp;obj_, int hi_, int lo_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_subref</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>ab4d2561a75d9de26b9a7dfa4b6553fb6</anchor>
      <arglist>(const sc_subref&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; *</type>
      <name>clone</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>aa1a8d67af8f34b0aa0088605f6db8f15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a18716ed990a76da5036ec7f577b6c0d5</anchor>
      <arglist>(const sc_proxy&lt; Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a4f1774c048d28d73a8cc77a64bb1837a</anchor>
      <arglist>(const sc_subref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a72de52ea29576f3212262061f0a0cff7</anchor>
      <arglist>(const sc_subref&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>aba7e3af83e7f88ecbc9903cd3122100a</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a44e59a70c227e9ba74805d6fb0737db7</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a4ec1c6b85b5ba8598f4bf850ca28aec7</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>aa9401150915f7d680284b02758271c92</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>aa4318ae7b415caba4546e461bc83730d</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a4a5b555f86d10ab1e4bd9c2373e5f443</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>aba76c68ab13c38dfa806a1e1ca658322</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a4c266ced9325a392414344c76bec1c82</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>adbe6b65ba5de752ac6d0173dea2d04bc</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a83a6cc085f79460ecf0a2e2a4cf13166</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a64c86fbf2accb9bcea807ce5f5c65507</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a249ae975781ed3bc9ac597e7d000cc74</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a55fb6b76efa90408b55da4436f1c3d9c</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01380.html</anchorfile>
      <anchor>a73595ab6a78a28d3d53d94b7c2b879cc</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_subref_r</name>
    <filename>a01376.html</filename>
    <templarg>X</templarg>
    <base>sc_proxy&lt; sc_subref_r&lt; X &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_subref_r</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a963f74ccf0e333c47ca4fc4b736a896d</anchor>
      <arglist>(const X &amp;obj_, int hi_, int lo_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_subref_r</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a6a2ae401499544cdc0ff305e23f1e415</anchor>
      <arglist>(const sc_subref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; *</type>
      <name>clone</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>aff26ea72e490a69d4db1072bde2b357d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a644cc8a88ff039b7841c6c9baed5ad17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>ad36169b4eae1f5552e5fa118db667154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>get_bit</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>acad896f5b4718f9d978613a5f66400c7</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>aa23e7b4e04db4b207d00161a8499617a</anchor>
      <arglist>(int n, sc_logic_value_t value)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a35e8e00e11a4030b92aa13601f5fce54</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a334aa8e330bb6b9aa07f53c30d104887</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a3bd4d0760627edac95bc2b06970f0a89</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>aa06bf18855d04ca6a925aa4c31659e01</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a7f0206d8d16fbea92db0e9df03061647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a77f75c18602ce4b85b8fd22a26b6a0b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reversed</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a9ea999d0fecab3a0a9d48eb0bbb917a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>X &amp;</type>
      <name>m_obj</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a37e13f42a5e87ac860e078f680c5f09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_hi</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a6c77f14a4ad5aabde73e214fdef08cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_lo</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>a4a325258e57d04237346c87c7da62d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01376.html</anchorfile>
      <anchor>ad1f96cc8642ee7d3b84987bf17b80c4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_thread_process</name>
    <filename>a01936.html</filename>
    <base>sc_core::sc_process_b</base>
    <member kind="function">
      <type></type>
      <name>sc_thread_process</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>af79711f7ef8deaadcadbefac18e642bf</anchor>
      <arglist>(const char *name_p, bool free_host, SC_ENTRY_FUNC method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a5f30133499d9c3dea081505017cd73da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_thread_process</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a0f2bdd5f2b3f17ea1921faef9981c26f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>disable_process</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aedbdc1ab25de3aff67c23f9c165a729f</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>enable_process</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aa1f318b1ba7871530006b040fe7e7c76</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>kill_process</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a18d42f4d0363880049a3496c0ed8aecb</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_thread_handle</type>
      <name>next_exist</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a6b801d3370e6fce80bab557913b9440d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_thread_handle</type>
      <name>next_runnable</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a23968d4d398955d823d48ee57c1ba252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>prepare_for_simulation</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aa3e04519cd4c25685490e689cf73aee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resume_process</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a4ed9c7afca4fbb052174582f2037943e</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_next_exist</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a6d761c9661ffe6edefe4445eee45d3c1</anchor>
      <arglist>(sc_thread_handle next_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_next_runnable</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a59babc0df8faa74445ab97fa5158ebb1</anchor>
      <arglist>(sc_thread_handle next_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_stack_size</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>adfa437ba4592dc072b572f8bbc1f9588</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>suspend_me</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a10b86857b0e76993ddb457eb4989db35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>suspend_process</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>ab95e22adb3b522ef054801e933443c55</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_reset</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>ac5d920abe75cf9539332b34bf10bb0a2</anchor>
      <arglist>(bool async)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_user</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a8e99cc1b1b7370afc4c24aa10cef6d48</anchor>
      <arglist>(const sc_throw_it_helper &amp;helper, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>trigger_dynamic</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aa9d15e265958a85539dc7f5c7b256578</anchor>
      <arglist>(sc_event *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trigger_static</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aaa7f043aaa69dea45a9b9ea9c50a07be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aaca4f4c89eb42060bf72ca27cfa62c7c</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a11f88c46380e6f27fcecbb105032bef1</anchor>
      <arglist>(const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>acfbb0b7dfc692ef62021f2d9092c499d</anchor>
      <arglist>(const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a6d4ef9579a242575fd2df5b9944b0e62</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>af871156c71b242bad4506734e54f0616</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a0944eb526febc9150c67f34081768521</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aa5b9d7e0b98de9e7d6ad9e038eb7ec5e</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait_cycles</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a6e0bb0e7ef8bc1d1611ee86ddd13fe31</anchor>
      <arglist>(int n=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_monitor</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>ab45e25b3c382c2ada51d662c9e6c2f92</anchor>
      <arglist>(sc_process_monitor *monitor_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_monitor</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aa3a157d0e34764f08fd43989276f2f20</anchor>
      <arglist>(sc_process_monitor *monitor_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>signal_monitors</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a0707da7baa42ff362864b731b873ba2f</anchor>
      <arglist>(int type=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_cor *</type>
      <name>m_cor_p</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a8b0a2830264cb5e118f4314d472c445e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_process_monitor * &gt;</type>
      <name>m_monitor_q</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a5ff8d91a3901428aedeaa9f7127ac616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_stack_size</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aea4f57aabf2f6853ca54737fd7f353a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_wait_cycle_n</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a7197061aa125a49db17292aa9a1ad27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_join</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aeb79ed0c7e8b054a1908e8e6346ef2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_table</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a12ba92f261d993145709693ea4466b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_runnable</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a7daf768cb0d25e9950151ec7079decbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a3b6d9393496e36a33c0a5232d0e25985</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a5e6372644bc6eabdf8eff8ff41e17fe4</anchor>
      <arglist>(sc_thread_handle, std::size_t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend sc_cor *</type>
      <name>get_cor_pointer</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a9f85df8ff275bed3f00a11fe793b849c</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a11a37f40625c4403fd3c209441b3bdbb</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a99103e0b757e7fbfbcafce73a6e6b42e</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a530db9aa529257ad6863201e367a6eac</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a9bfe814eaa6da15ff727cd186d622e3c</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a79b8efec0a3ea8962022d3b22706d11d</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a9f1f2a61dcdf62ef19aad5fe6e945bfd</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a9e266556e5463ab7b03a1ee142045bfc</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>wait</name>
      <anchorfile>a01936.html</anchorfile>
      <anchor>a691c80045ab9aaf5625c287a623a69c9</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_throw_it</name>
    <filename>a01868.html</filename>
    <templarg>EXCEPT</templarg>
    <base>sc_core::sc_throw_it_helper</base>
    <member kind="function">
      <type></type>
      <name>sc_throw_it</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a16de4786758777139130bab8f7d86fbf</anchor>
      <arglist>(const EXCEPT &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_throw_it</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>ae45daeebf005e7a55e17f2fe852ab6fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual this_type *</type>
      <name>clone</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a5fb39cfcbbdf6a5056b57c1346cecab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_it</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a6381e0b5453fb96e5c9a785973e71d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EXCEPT</type>
      <name>m_value</name>
      <anchorfile>a01868.html</anchorfile>
      <anchor>a878ba990cb918f778c71b50c020e137c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_throw_it_helper</name>
    <filename>a01864.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual sc_throw_it_helper *</type>
      <name>clone</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>a0ebe8b93648cdb7d7af5b1b8880682c3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>throw_it</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>ab8cdbe3d525d7f42f122319245233161</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_throw_it_helper</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>a252439c245847f0f98f71dcf229ee214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_throw_it_helper</name>
      <anchorfile>a01864.html</anchorfile>
      <anchor>ae44db7071822f211c112c868ac0ec234</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_time</name>
    <filename>a01940.html</filename>
    <member kind="typedef">
      <type>sc_dt::uint64</type>
      <name>value_type</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a83e697fa67cbd57bd182f273a966f4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a68bbb9b18599e7ca69a0581200427116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a66e444acded7682e8463b6e470ed3819</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>abbafb2935861eeb5333ff10ae1413e66</anchor>
      <arglist>(double, sc_time_unit, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a9f1923dd4cd8d922ca95840f818f5af4</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a333a3bdf908a41b1caeb2ad6460a67af</anchor>
      <arglist>(double, bool scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>abb5262095239bbc208b2893e26feccb0</anchor>
      <arglist>(value_type, bool scale)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>aa7903a06728a74504cdb1eaa1e38ec27</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>ab6a309c4d5e9413879dc1c070e2e362d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a705a38c02e4706da390a640dedd719a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_default_time_units</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>aa89b8193648b0b792cfdcf828b18e6bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_seconds</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a9f73e0937bcf6e9f345e1a0764f7763d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>aa31a79b1e42102172f230ab38dd1ee4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a23f988957962a39be0c109035e5fd2d5</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a039cca3266e40326896450c945d681f8</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>acf3d06b2d81bad927ecbfe768f03d820</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>ae8eb15da18541797b3278f8b94c99523</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a2d95b5898b8bd83ccf2977a8ea448416</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a210c4c8ebc865e7769465bd06ab8cde3</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a9cb1dc2657f5ee525c6b23b95b1109b7</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a1ffeb64e6c96b71fb588563ee7ed3855</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>af684b4513fc23c6bf78ea1f6ce64c27c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>ac09dfc9634d317cdc60f848bd1b1be9b</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a8aa8b67ffd1db7582f955251f32e4950</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a15b0245d0739b2a6ee0eb0dd6ee999b8</anchor>
      <arglist>(::std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_time</type>
      <name>from_value</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>ac8d948306c97dcbd38e8a2c36e7e750f</anchor>
      <arglist>(value_type)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator+</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a5fb795da68dbfd2675d5b612ffa00a48</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator-</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>ae37e80791f5b8911326e8836d43ecb4c</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator*</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a0f35346e1c99ef5ac1a5e62ed8df7a3b</anchor>
      <arglist>(const sc_time &amp;, double)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator*</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a3456e16502c2e28b1d4fc418e36b0863</anchor>
      <arglist>(double, const sc_time &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator/</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>aede3e474e1771366e93c43073282895b</anchor>
      <arglist>(const sc_time &amp;, double)</arglist>
    </member>
    <member kind="friend">
      <type>friend double</type>
      <name>operator/</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>a8627834f4573c11c60037fae88fd0770</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator%</name>
      <anchorfile>a01940.html</anchorfile>
      <anchor>ab37aa1242faa2dcf0353ae60c0419a6b</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_time_params</name>
    <filename>a01944.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_time_params</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>a73b4bac482e4d2744a24be4617440d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_time_params</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>a5f109827cf99bd3eae7bdc22830c8776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time_resolution</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>afa8d46678e3e40ac31abcd77d4ea704e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>time_resolution_specified</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>a33b857254dbaf4ba66b24b04b78e9c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>time_resolution_fixed</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>a5cc315c640a0989d3794cac9fff48500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_time::value_type</type>
      <name>default_time_unit</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>a9f429b6a7dd0362d1b3a381e2fe89ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>default_time_unit_specified</name>
      <anchorfile>a01944.html</anchorfile>
      <anchor>a82c20398d826df1a475ce61326601d8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_trace_file</name>
    <filename>a01952.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_trace_file</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>ac2e11c2f18c357603ce95368261f3220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a552d514e5894e03af615a27094f079fe</anchor>
      <arglist>(const unsigned int &amp;object, const std::string &amp;name, const char **enum_literals)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write_comment</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a5f2fef74534b7d6e92c4dc77dae77633</anchor>
      <arglist>(const std::string &amp;comment)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>space</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>aefb440b6478650929226a60cba075c7e</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delta_cycles</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a8c297be26e2bfe653991d2cdceec2f7a</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_time_unit</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>ae286858737132c85481a7ba666e8b21b</anchor>
      <arglist>(double v, sc_time_unit tu)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>cycle</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>aa764170956d5a956a3b34028780cbf9b</anchor>
      <arglist>(bool delta_cycle)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_trace_file</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a14b6f2cc01e4d7e6e5994e9a06b0af28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01952.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_trace_file_base</name>
    <filename>a01956.html</filename>
    <base>sc_core::sc_trace_file</base>
    <member kind="function">
      <type>const char *</type>
      <name>filename</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a7c0c3227bde1b58253c45607076b4cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>delta_cycles</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a743eb3eb40455411df1830454f9931e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delta_cycles</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>acb1e7ad96a8e09aef202ad03843dfa76</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_time_unit</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>ac9a65f967a8384a1cda985fd0f1f1b3d</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_trace_file_base</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a8a6aef13f76425684cc08befb5a99c0e</anchor>
      <arglist>(const char *name, const char *extension)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a91348e323ea49aac8f7114efa917b162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>open_fp</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a3fdb5b97623c439fe196c726f6606ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_initialize</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>aedbd58025e31611e211007863c7d419c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>add_trace_check</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>af95ab8679ec14edc8985ecadca2ac829</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_trace_file_base</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>ab35588b6ea329d79c69b31658fbd8778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>fp</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>aabe7a92009444f039a6fde72881c9ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timescale_unit</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a2cf88be17be6a42d40321f72907537d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>timescale_set_by_user</name>
      <anchorfile>a01956.html</anchorfile>
      <anchor>a4b362b10f37d233af3c7098e456a2481</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_trace_params</name>
    <filename>a01260.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_trace_params</name>
      <anchorfile>a01260.html</anchorfile>
      <anchor>a3a9b0b00bc98785e0b50a345f2451b45</anchor>
      <arglist>(sc_trace_file *tf_, const std::string &amp;name_)</arglist>
    </member>
    <member kind="variable">
      <type>sc_trace_file *</type>
      <name>tf</name>
      <anchorfile>a01260.html</anchorfile>
      <anchor>a0dbb073933d03f67265d0a8b4ca91b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01260.html</anchorfile>
      <anchor>aeedc66c77a8f0f7865dbecf1dc50588f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_ufix</name>
    <filename>a01548.html</filename>
    <base>sc_dt::sc_fxnum</base>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>adbe58e13603b0312d1245e96da8baa35</anchor>
      <arglist>(sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>aa1a7db56586c2760576fbe42c596f3f5</anchor>
      <arglist>(int, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a12f7d438edb4f33487e904425c862589</anchor>
      <arglist>(sc_q_mode, sc_o_mode, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>afe90f8a67763d9f0be6a16dbb6724400</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a0c695d659c6d74329545dc2a5c12e1d6</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a4b31791df2f4c4f667a51804bc9be65d</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a16ebbf6e07e23324cb172cd69334b082</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>ab0eba4f1a0540618a02fd2e31e55e1cc</anchor>
      <arglist>(int, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a7af7c54f54cb42cd5713a6b288009a61</anchor>
      <arglist>(sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a01acf24dac214f0a5267ea6a29c7910d</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a929d52866d7c531d3894361e337f5ad4</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a2bbe64360e55859461c248454d018343</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>acd97041b3a78ee50a69e5d7e9c68fb70</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a1a96047a9ed6534fbcaee631a3f22676</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a5487aff42a9861c6a5f1aaef567144c7</anchor>
      <arglist>(const sc_ufix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_ufix</type>
      <name>operator~</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a70f6aaa4ce38de21531d907d336152f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a9e47f9b52c57df02e82a17ff9b7b767b</anchor>
      <arglist>(const sc_ufix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a94be2f03f6893299c56ac2cb284cc417</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>af72fe8d75bc4512cae2866e863020afc</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix &amp;</type>
      <name>operator++</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>ae9cb345c584f0fb772a414d000ceb18d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix &amp;</type>
      <name>operator--</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a0edfd07fc0f214993d55ded9e59174f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_not</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>ad14e96a1e99f58df389f4f04d1e768cf</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator&amp;</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a80351f2d6ac7850db6280fe8980767fb</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator&amp;</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a7aebdf172093770e801b14d84760db30</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator&amp;</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>aa47849cd1207e8d2ce1ffaea624ec552</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator|</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a848e79b501a8342aa6b126352c0503b3</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator|</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a6eb71137aacd683fd6102edb6ccc4adf</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator|</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>acb51fa842e4c260731e77acbac188444</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator^</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a7625527a0e11fbee2c99e4969a6b83a8</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator^</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a8722d2bd071aff04a3a745b999e846b3</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix</type>
      <name>operator^</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>ad978200ff3c04b346038e7b571866ced</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a3b79ebee26bfae9745187d02325edf48</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a3ebe2deddedc814c23093820dcb8814e</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a6cca2a01f4a2818cd6b3362f31fcbd4c</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>aab7b70a1a20366c7e7336314edc6e09e</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>acfafcf258cefa189ecb88b0b7614c21b</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a852951c162816819f3ab2a8ca6f1dfa4</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a2db6b83084cf0fcce3d9ee3a5f3b3884</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>acf9c16117749ca0c309de81101ee5307</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01548.html</anchorfile>
      <anchor>a030fcbcaaa9f49ba11ec4147446750e4</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_ufix_fast</name>
    <filename>a01552.html</filename>
    <base>sc_dt::sc_fxnum_fast</base>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a3b3c9d73392b5349af8558895edb5e47</anchor>
      <arglist>(sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a3948678775a650af88ba22ae5832190c</anchor>
      <arglist>(int, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a19d2cd616b0904d697de8f616fe658b1</anchor>
      <arglist>(sc_q_mode, sc_o_mode, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a1f82488318965a5cccf76b4b5ba151ec</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a22b40e96c4b9ce155beecdd9a774fd7d</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a0330840b0ae5d27dced4613850001ba9</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>ab55869399b6359ecf104c73c484791b8</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>adee7fc3c9c6bec7024ef3236705b7de9</anchor>
      <arglist>(int, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a6475a301486a3d832785c535c726e86b</anchor>
      <arglist>(sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>af96f350e9eb46d3b6887f9d4b952e404</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>ab3df48963ed51b93ca2b6a7fce3c5bf7</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a4c5b3221c678d317d5beeacee6daa33a</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a53111d11372233dd817954b69348111f</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>ad6a4992113d2a18a4f92613ee59dcd5f</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a86a9bc289a5447e8d350c7c1b51fa7ff</anchor>
      <arglist>(const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_ufix_fast</type>
      <name>operator~</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>ada7ff1027813fceb18e896a9758e8663</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix_fast &amp;</type>
      <name>operator=</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a7ce4712516b53f6447c1dd51c37555ea</anchor>
      <arglist>(const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>ac891c94dcc72567c4593a1b0b4ea5001</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a7190ab30de91ebedda6971b3d91fe17d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>aa60e07873981e2ecf5c391e662db308f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a21117a58fb1973c6187b2c0dd7fc8659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_not</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>ac78882cab3ce43d8706c1e91d9d81717</anchor>
      <arglist>(sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix_fast</type>
      <name>operator&amp;</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a15dbfe738492992a716ae855e8eea113</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix_fast</type>
      <name>operator^</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>af0f078a61734a2385585adb254d90446</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_ufix_fast</type>
      <name>operator|</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a588c9f0dc78da0bd04a145dbfdcfe7ab</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a06dd1c626bba9cef813ae019a9c6a0be</anchor>
      <arglist>(sc_ufix_fast &amp;, const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a3e89bc7e1947d54103d2a4bc7dbd4a58</anchor>
      <arglist>(sc_ufix_fast &amp;, const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01552.html</anchorfile>
      <anchor>a34a0c7dc26a317875881aa5bdd2f0501</anchor>
      <arglist>(sc_ufix_fast &amp;, const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_ufixed</name>
    <filename>a01556.html</filename>
    <templarg>W</templarg>
    <templarg>I</templarg>
    <templarg>Q</templarg>
    <templarg>O</templarg>
    <templarg>N</templarg>
    <base>sc_dt::sc_ufix</base>
    <member kind="function">
      <type></type>
      <name>sc_ufixed</name>
      <anchorfile>a01556.html</anchorfile>
      <anchor>a0116467e657f7ec56915d92c6f788f82</anchor>
      <arglist>(sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufixed</name>
      <anchorfile>a01556.html</anchorfile>
      <anchor>a2c14667a96f863b93b749c99fe3b3ce2</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufixed</name>
      <anchorfile>a01556.html</anchorfile>
      <anchor>a08a4062899066649f451d20a989f1608</anchor>
      <arglist>(const sc_ufixed&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01556.html</anchorfile>
      <anchor>ae52f5c6557b9128a657ff17a1772f325</anchor>
      <arglist>(const sc_ufixed&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01556.html</anchorfile>
      <anchor>a129138031eb23a50e296139be8e15ee3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01556.html</anchorfile>
      <anchor>a12716f23c5d0a7d92a2681ff12ca6111</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed &amp;</type>
      <name>operator++</name>
      <anchorfile>a01556.html</anchorfile>
      <anchor>a421cc9e45d0fefbbce62d71add80ef12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed &amp;</type>
      <name>operator--</name>
      <anchorfile>a01556.html</anchorfile>
      <anchor>a896d28dda1b3b36c2de0515a30ba3b40</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_ufixed_fast</name>
    <filename>a01560.html</filename>
    <templarg>W</templarg>
    <templarg>I</templarg>
    <templarg>Q</templarg>
    <templarg>O</templarg>
    <templarg>N</templarg>
    <base>sc_dt::sc_ufix_fast</base>
    <member kind="function">
      <type></type>
      <name>sc_ufixed_fast</name>
      <anchorfile>a01560.html</anchorfile>
      <anchor>a14313e59578dc0db79f5dbcdfd1a1ba6</anchor>
      <arglist>(sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufixed_fast</name>
      <anchorfile>a01560.html</anchorfile>
      <anchor>a7bfef269dc53003e05ae2f1cfb510765</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufixed_fast</name>
      <anchorfile>a01560.html</anchorfile>
      <anchor>a7113283b24f1eea764cc243d7a8a56f2</anchor>
      <arglist>(const sc_ufixed_fast&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed_fast &amp;</type>
      <name>operator=</name>
      <anchorfile>a01560.html</anchorfile>
      <anchor>abe1a807f427f82110127511d6aabdf8f</anchor>
      <arglist>(const sc_ufixed_fast&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01560.html</anchorfile>
      <anchor>a82fb5ec25bf289e0475cc0eb9db559ed</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01560.html</anchorfile>
      <anchor>a0be57193d33da759d9595fa4399e6c24</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01560.html</anchorfile>
      <anchor>a509a766375318dbec14198645f3e05fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01560.html</anchorfile>
      <anchor>a61c1aacfbc19b3a04175cfa5e79dad96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint</name>
    <filename>a01672.html</filename>
    <templarg>W</templarg>
    <base>sc_dt::sc_uint_base</base>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>accb5c413833a8f8baa3396035f3f0bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a8045993f35a2734341844666b52209dd</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a52190222fbca241da4d9481833f11874</anchor>
      <arglist>(const sc_uint&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a43238627238f25fcf393817ce83ca0d4</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a0df6989f62e6a15963373b157bdd0ed6</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a37c2c342fd552c058ff9b7512570be39</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a155d4b132eeb143320bf6bf6a1baac81</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>ad9780e1f5f1f4b2413a64fa31a024d17</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a4159790961c17c5234d2f70027083241</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>aac676ad9d23c6951f42a63284b4726d8</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>aa058f09b0d0056f55c36704715b35003</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a36c904c7698e1c2d0f6257a734f9c9b3</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>aedcd8c9c1721dfd9053c594c753db4d2</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a8ea04c39bab762ac32c3e6117d343c8d</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>aa6497734166dac6f22ceafdcf3fe7478</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a0ecdb94e924f5ab24448075d6e72b196</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a15efaae5ee2812bd94fe39eded35d0c2</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a16bbe90abbcd6556934991a85a970792</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>aedda2fcc2b1f40e567243eefac0ea4fb</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>aeb9463df1140e6013dcc9fa3e03758aa</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a235330b899a380e6698937bdbc32aa6a</anchor>
      <arglist>(const sc_uint&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>aa53f77ab496d9b79b52375da9d6a649a</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a01fd4ed767c26591cb264a2506253cfd</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a9faf591ce76d323946be0099ae91598f</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>ae6fc98b246097dcb4f0c60428d68b58a</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a2ea9cc8e29724f2302ec5e6b20d44986</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a9274cb254939011faa21d5ebbd3e6e6f</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a875e96095f423f5eabb9ea85cac65475</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a33aee587f7d6bc29a1bbb769cdbab140</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a8b20f7665a141da10f101d451a951558</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a364272011f5bac0be2a5b4e1d3b37f17</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a5c12cd7683170b5e0d46d524499f86db</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a5a860315ae68aae0fd4493c0c0b3a8cc</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a0d47049e0193f38abe058be33b8bc2fc</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a7cb18338bab6d67666eba0dbcb90385a</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a3877da428e5de38e3a41e3e1418139a8</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a3a076818abb8275134a2b479cef6fbd7</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>ac4a1d81e405d97339e0e5033c01aad18</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a3d5ed4ae5862b99ca9f28a3342040b22</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a89a77018f70fb2f0f5fa337d6bcbbf21</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a7872640fbb82551fbf8d0790d8111ea7</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a720d380bce093ef1ab678fc99117c32c</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a49146b3c6118b02fd7f6ece2c43a42c0</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a7ae966468e0cb06e945a54448812b9aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint&lt; W &gt;</type>
      <name>operator++</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a5cc2e510bb6920ef0796bbe3b0f4d401</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>a76b41e0e2688a628d97307b477b0ff48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint&lt; W &gt;</type>
      <name>operator--</name>
      <anchorfile>a01672.html</anchorfile>
      <anchor>adde43861d15aa742d5e5ab09f41596a2</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_base</name>
    <filename>a01692.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a4526f1063ebb6c4f1e3f7000f7463717</anchor>
      <arglist>(int w=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a1e41c9e5e5bc6a60ee0cfa735aef0890</anchor>
      <arglist>(uint_type v, int w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>afea739280c0cd1cc981593ca6795a11f</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a149ea915ec38a3e3b35b82b4b66e6637</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a2517451edbb1c8fab98f0f086a932e61</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a5a7652d279fbb9351a8feee438e675bc</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a86a2c88dbfc18325f65e44c4092dd82c</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a7dad7441c7ede97a4b9b9f3711820d8c</anchor>
      <arglist>(const sc_int_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aef493b779069356bb10a9758fc451067</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a5d422c6b4c0af3ef6aaaa73b29e1d9b2</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a75cbb02300a8c75a8051b6ee84764509</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aa5239651f200c24944c84f8c093a5c9a</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_uint_base</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>abaf003d73d1ae93fb7c52c2717582e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a5776fb028f50f8b835e20a0788def549</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a9c13f4e0febd7b7a9e5860d77660b82b</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ae98434c49819b7c3cd8cd44e85bc7624</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a40594df08a70ecae13338c054921761d</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a03be0ed64e64f62cf738264bf25e17a1</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ad7c257fb7295137f7985a1c983923514</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a37babccf7d4e936062b1418848dc73c3</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a99aade3304e110f1bcc9a4e87aa52619</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a845ce68d774dee7b7cdf014f82ecf7df</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a780e4b7f2f78b7cfcd3d469b2a02d45b</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ae2f11ad3a7248039d74441797265a361</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a109d70d9b5f110d02a2ae9a0c60e8149</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a85178c4690dbce26f8fd05b734418521</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a6a161e1dd340d31094bc358126b23ce8</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aacae7f65458f47bf85190da622b24afa</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a910c325809e17cced8a48e88454d0fb7</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aaf494092a949b404d45313ac1ecc80e4</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a2ba5d25d43889492b5bc5eb62f2f8cd6</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a9a00330b9affe08a03b03349a2b9024a</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a6d28d69165fa7684ac8834148fc6fc70</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a146dc9832c9a57e6a4db958ea76eee06</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a91be5ae5700342000beca0ab392ea2ec</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a55b73586a3a179a894654cacff0550de</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a763ab2f907ab6f6b713839d4db29b5b4</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a44d93358df5bd3c5ac0ed42498623ba2</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator++</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>af773ee14685a3004f95d1104f43409fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_base</type>
      <name>operator++</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a876df5f7d3e8555ceffa40bfbd90b33e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator--</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a2b5696202c0518666279c06567f7ab38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_base</type>
      <name>operator--</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>af08ad6eaeeaa5659ea9aed8f17b6b36c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a32445edd50c003cfd19c300652df5641</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>abcdbc01626eda45cd63149862b2cbbe4</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ab51c65b19fc1820bb3423c804df3d14f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a6934b80cf00a7164df0f9349a3520c18</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a9e2a318d63f1dda23e82a5016ea14997</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aff3dfa4f1aa038953984d081e4cac0f5</anchor>
      <arglist>(int left, int right) const</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a4249bf60abea42877826554ea6f67384</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a7246a866a4a55d040f5205b38f83b53d</anchor>
      <arglist>(int left, int right) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ac79db1d12f15d7a41386d56d3d4976cc</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aecabfc41e27f6e906860eb4a0aa141f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a06734edd375869b5d2fea8c6e96686cc</anchor>
      <arglist>(int i, bool v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a8fa64b8ee6ffda810b89f1ea30539106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a7ccb52d42101e9d7adf3f27f81bc21bd</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a8f106a5114e5531e3ed1d15425895699</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>af7176d5b7b5b37ccb37daf558e238d52</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>afc05d254c59d8ecbede51f98e9bed5eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a0b890b794648f727636b486cf07a5a52</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>abfd4898e73cce86a0900e254f596fed8</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a5e2f88ad7cc96758a555e97e1f9e66c0</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aae294490f1f45fc769485ed59497941a</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a4b0f953a5aa8505ff9e16faeceb6cad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a4fdec50c0bce67fed0b1d9e627be126e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a875509778e4ec8b16921a1290ecbad2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a4783b49ce5a7bdcfb21d8186f61f6838</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a9805a495b81c0b3a1154cade7afc25cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a4459ca217ca293596b13706753807d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint_type</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a5633f14f193fd9890b7ed1184c1162dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>value</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a12b39db2525bb4e67850ec1af957dcce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a3b202b173073ff84363fec427c7cb38d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aae96764a31459ba2c1e8f25e8744fb80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a87bc7ce210cd522b8df04339bb1838da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a425ea0975c019c28fa2d708e2e91501d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>abbc3d6548290f245a3f87ea3c7bfefa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>adaf6dadf4d12586aadb5aa794b77350a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>abc956fc9ab19bd766f3afae0f0210fed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>long_low</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a8f3f27ea9e03f68721c4c6559726d6d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>long_high</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ada3d47171191729e6d035ee01b382507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ae095fda8bac8e19a83fb3245a4afb295</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a7cf62e82f7672d13ce122ad26835d32b</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a5f3b241cddf60ea2bc195e72c7a5f8f3</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a53af00ddacf132effafbd5d8acdc3ad5</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint_type</type>
      <name>m_val</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a8a998a822b49318dd7210288405ab6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>af64821c9c9355ee88dba670f83c424df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_ulen</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a513cfd3757ebd562f8bb244f50d7fd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_bitref_r</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>acf14483b27605502030674f346f5c44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_bitref</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>abfb283e830e57559627617bcf277b86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_subref_r</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a56ae3535236bdf202d3094bf43712d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_subref</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>afe4a60578b3eb9511d353f4c9eaceff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a96f74b0d54ca5fe1ab8a0e96100cbe76</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ac1c022d9f3df3abf65c4be3cb750bb42</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>ab652593b60d4ec29dd4ecaa899dd33ac</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a18a2f89c78e193037ab0865a144cf323</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>aa9beac199736442012aa4131b7bd93b9</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01692.html</anchorfile>
      <anchor>a6e1d881e3134f220bd357da8ad4351e6</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_bitref</name>
    <filename>a01680.html</filename>
    <base>sc_dt::sc_uint_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_bitref</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a316c929988f6f607d89d5b051a3449ba</anchor>
      <arglist>(const sc_uint_bitref &amp;init)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a3f19bfbe20eb2a2d5e31105d8f4afa27</anchor>
      <arglist>(const sc_uint_bitref_r &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>aba576abeaaa1ddea6a036dc3ce7d39c7</anchor>
      <arglist>(const sc_uint_bitref &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>afd17215d165f51abdac195d3cde7ce3e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a6c9da1dad41d4d8f965b950bf1261883</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a8909587bd09a52d03d497ce5f52a1a29</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>af62ec3e9f147c7f2cf54704c0388f458</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a724c720c0ab0a1d0328d9bdf17dee410</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>af9f813ea8b55a4b58b64809b6558f500</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a2af0793c7c8682963e65f312e78fc139</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a8c2a7237ca6e18145ad2fe251f4cda39</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a8f2de2c6368e6c6face3d051581b076d</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_uint_bitref</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>acef7c93f93e26871963aa484f6db131b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_uint_bitref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>ae8b35e064ef943dedb41d9fa23f6e521</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_base</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a452fa30c8164ea24676bb959bd9b063f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_uint_bitref &gt;</name>
      <anchorfile>a01680.html</anchorfile>
      <anchor>a48db0e37a0c85cfc9f3d52e0062c0a3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_bitref_r</name>
    <filename>a01676.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_bitref_r</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a9b38261805dfea998d5a84c44e91a96b</anchor>
      <arglist>(const sc_uint_bitref_r &amp;init)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_uint_bitref_r</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>afb23d476c296ed032f74595bc7993b99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a616746123c61447a233a7bd71403dc1e</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a93287c4f70f3413ddcd2da75971a7a51</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a975d1ad4def608fa1886da4aacfd21de</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a48b486821683036ef4c112e03bcb8d08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>af26fd7adae21bafeb4f14e2c4b9d8edc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a127f4a475f04c98ecc7f05d50895433b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>ad4e19b9b8494b944d35ef21ae198f297</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator~</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>acd24c806d697548bda3a4cd228d29fbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>value</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a6a73420f766d1382d503967a423c89c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a9d684902a462baafbcda05e95b2e95ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a15b122bd31ed5358bc677505051d2b69</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_uint_bitref_r</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a11ea77839b27ced5347dbabf74dedb4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a70ddee368b39602c1c03bf825ae2450b</anchor>
      <arglist>(const sc_uint_base *obj_p, int index_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a2576b55cfbba8bb201e0f19d05ec0d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_uint_base *</type>
      <name>m_obj_p</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>ad12b7aa1c1b94eed9704125f6ff69f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_base</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a452fa30c8164ea24676bb959bd9b063f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_signal</name>
      <anchorfile>a01676.html</anchorfile>
      <anchor>a9f6e5d1466167b345a71b469e6750ab8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_subref</name>
    <filename>a01688.html</filename>
    <base>sc_dt::sc_uint_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_subref</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a8eb4c87ea46fb82f939443a10340ad4d</anchor>
      <arglist>(const sc_uint_subref &amp;init)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a0d87616e4b67aca043b585a2535842b2</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a2266357b89945971d68548a165503c30</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>aca59915d5cd28f3973c439bea880c2db</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a10477cae1d1cce8f23c69565dffe865d</anchor>
      <arglist>(const sc_uint_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a531f864a643f2c402ddf21177e12c13e</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a1cad8768e125e17d74482f9cf4a9f313</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>aa59db9e630e48c19474a475d4f8f0367</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>aedb1a1f46a4f7cde59f5a2e9c9be1fb1</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a543617aaa3b0326359bf9ee1be6f3542</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>aeca206193dfd5612e611f72d9ba6f54d</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a2fa1f6981f5abd32385f4ffe9399f10f</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a09c25e83c482f646f380bdaa478d363b</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>ab12d0f974ebd136b949600cd3b714d99</anchor>
      <arglist>(const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a99303739eb3a390675d1eeb2b35990de</anchor>
      <arglist>(const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>aef31d3f10587b8b4f0b3e83262a46a1c</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>adecd244120b5ef56f8280716b2507b9d</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a8b46462ca5e925977a2089a51af2ef75</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a8a02190b6f5c4060a18b7369a13985fa</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a306808c1dfd32f1b422456ce1313f871</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a84d6da4a28cd96fe944df7e0343bcad4</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a3d013e723800181ad24d5770a9aeec35</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_uint_subref</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a077f74673cb2bb6e4f4fed6afde904ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_uint_subref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a9d877e9192e017f4f2a179f717dd4316</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_base</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a452fa30c8164ea24676bb959bd9b063f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_uint_subref &gt;</name>
      <anchorfile>a01688.html</anchorfile>
      <anchor>a7d2c5d276f2f199003f0dc6dc576cec8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_subref_r</name>
    <filename>a01684.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_subref_r</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a8779413c9623ff604a571aa8227d316c</anchor>
      <arglist>(const sc_uint_subref_r &amp;init)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_uint_subref_r</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>aeece41800209549c2947324c589deb7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a18f6ee0d55b807a8b22f7a3c2425fab7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a27b36f781ec1260f04d3da054e493449</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a24ed4f85500add4b92e6c0f02d3fbdc0</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a487d6cc4725b0439d18e901cb02b3413</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>abb20c46ed127ca0ddf0298313ff0fe54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a00d32c1a51a12ec2ca2897f48da18499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a2b9de1fd49979202d99780d9a6a52a2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a966817065375bdf491c709b3d2480eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>ab36b109e4b275ce52d3722cd92d59d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a64ccea0386bb1ae278454b52f23e42fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>accef096c281929632ce5625eb080c608</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint_type</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>acc17cb5edb1c341f42522183502f4c9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>value</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a94bb0853f6bb21e8ba49036658eef115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>ae0e8c8f650a1832bdf93ba0789ebd9ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>acbd41118bccc155c5569130145a232bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a84188929d103e9a944d39f258e886b8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>ac4e29a530a297e6b242a479b6eb76a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a5e90668d5ec15b04d7ae0d07b320277e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a0a78ce793ad0d1444270304bdc1d1e22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a45a0b4e7a89d46a6de90a4a3f95b4875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a943ba7d970beba223ad79a066b504024</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>af3511857f11ddd8feee173aa28968cef</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>ad6314ae2d5154b3c51e8105c70e02588</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_uint_subref_r</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>abac39866619fbaed88e14a091a728de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a28058c79e46992cdb64dbf47e3ab7e83</anchor>
      <arglist>(const sc_uint_base *obj_p, int left_i, int right_i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_left</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a753a5915315eaae62683a112d0ac4c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_uint_base *</type>
      <name>m_obj_p</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a7664891586e7a169be1d0fca2b418f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_right</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a3ca0b3bde1bf887f25dcee80884cfed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_base</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>a452fa30c8164ea24676bb959bd9b063f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_subref</name>
      <anchorfile>a01684.html</anchorfile>
      <anchor>afe4a60578b3eb9511d353f4c9eaceff6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned</name>
    <filename>a01712.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac1dc9bb8e74e87e02f59f117790f0faa</anchor>
      <arglist>(int nb=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a134f28bbd07d7391fb56d7a59e6839bb</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8c55f24a06ee618a56b8adef28b30731</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aada37373212204fcafe4a7eef07de29b</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae732ff8dc49e0deb1735470738f44a08</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afadec2ea7c4dc233de8d2f91538d99d3</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a63baf7e1dcc3f93d0f29c21d66653cde</anchor>
      <arglist>(const sc_int_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a98e969d4b7649fdea7efd54ab54a226f</anchor>
      <arglist>(const sc_uint_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac55bcd9344457d89d8f586e8c40f1106</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5f58046070dc426a92fc2b6c1a68d7fb</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae1c7787c3f8302f6db483fa2d1a0013b</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9c67ba023f2dafcf724be42f784d9eeb</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>adf731e606f614602ce843a0b0e623be1</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1b15cdeb0a204140f9226596941afff4</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9482cd486ee81b57e9ad2843e319c1f7</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5e77604f1c46684635cabb86ac008a84</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a476616c1a25ed11d690815c0e9ce952f</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2c9d7329d7adcef2d87e6e0d608e5556</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a072d0304ba5459b957451a25b8899e43</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a421c13b8bbd2c53a1c48b73ccad91cb8</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a863f0e2e784c7aa6808200b1ed2594a9</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa13662c921fc69be31111fecc40ad9ed</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aca4cc2b5a3fa0d0b34e00438e4651081</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab8771d5e2fba15d7774070d555e55d5d</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5186a02d19b64d78540bb1c8757387b6</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aea3ac007d7369e955c536ff7ba52940e</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab68c83bc766054fc72b2aa78b4f11457</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afa736e856ef50a24a7abd68e88369264</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_raw</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac4bbed96201aa0ba89ca8448ef8840cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a608b5d68c95c8c1ad4f6bb820d66e6d6</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3485a4898983701b1cf74fcefcb8018a</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab4ccf486d5d3e8464f271e75232b9927</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a4ffdcee9a02795924cbce8daae08a475</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a39a58d038c824019d75af5e62df0e854</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad8c40aba6db0ed7ce4c5f864ce1eb4cf</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a89aa999969ff2478d91d30edd9f548a3</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3b1c7c2b575e5f44f3fe6ee1bf0b705b</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator++</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af9cfb0850109d652d395746e05c85bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator++</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aec40c49c58a8946865565900bab32b99</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator--</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a619c1f03e52b018c332f813a2b9cf31c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator--</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a642bfb2ca6fd31329bc6ca06aa784bfa</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_index</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8245f1ad3c79cb08b81f15a4b6ebb726</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_index</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a70bceec7d3d0cfab365a088f6db60c96</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af6a3145e41e7c58a0a139115f0416fd0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a115645fa332d90f714c20333a1ebd36f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>adef1eea568da11ca212c4ab3c5f3a5b1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a14ee447fd375a6639f7bdb2786497c80</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_range</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a04e88dfd9b353c3a5a26a9527105f80c</anchor>
      <arglist>(int l, int r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_range</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a4f01685676acb8c49f8034d5c735c2d0</anchor>
      <arglist>(int l, int r) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af5458be6f05d264ee4c7dcd8131e11ef</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5cf6b5a942fec54a4d92fbec498179c7</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a770acf3cd0a8a67d686adb06ed6455a4</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1bf19b1d9a751df97c6c8d5173215972</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab984d1b8c7c4ed88873f4672bde84a37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a30ca5c93db993d90fd2d06c810d76978</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad6f016a59bb9a89b69b39a8418f2a5d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a29a4bf91274294657e7da23d88f8b557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5b589880510d89c5624d5a5c2b26b7c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac90138d3be2cb8bb76dc2f58e4dc88d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1254b0f78c83545a88412a425b8923bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9f24d3acac8168e47ebf4ceac8dffb59</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a03947386d1a9e8c0dcd0b740cef91873</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac795219fd33ffedc88c0261c30b71620</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa7a7cecfd849a64820344a65051b74c5</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9f30e64b4f19939504eab2ff387ccc9b</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aeb2208287569dd008092f227d58f3cd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iszero</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0fee0d22392a8f859fb394c132e5eb80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sign</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa0bcdd36e908183d072b05b4a2bd11ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa65a0336878bf7dd497fd5dab75288df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af515865c7c31088e3d2b521107b3755a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab98652850dfa6df2a7a60985af14a360</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a19ac9a03e07480d94debd70ec8746e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6d3ba77266a871f45a1f3a5ed25b045f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a29343f7aa5d27225939fe712a8b50d96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a120aa0e9f1ab6c9eb26a5dd8daf5e2b8</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aea69ce9ff4bbeba5b50792764f501033</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7d17a83a59b372442c27d4ca5221861b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7d41559ce6f199d3f9db4ef24e64df9b</anchor>
      <arglist>(int i, bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2d7ddb6a75d136fc009acba5e4e5a6c5</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2239d61c1a116f25d0c1419eb81d5c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_packed_rep</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa145df2ec2cb0d4846c272f9b2d9980a</anchor>
      <arglist>(sc_digit *buf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_packed_rep</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>adb3afc1c343bce04261de7901090e8cc</anchor>
      <arglist>(sc_digit *buf)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a95e424b7912fde291aae21bc5ddb57d6</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a499e93b85288f3d302d386b3f3606a36</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aafff6052ce551ae24568ee7b30efc85d</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae31fee8b238423c7180ea0155b85db35</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a23303bd6a9b6ab793e84a0482031c0bd</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0989fa4c09b67cb2ccc36d5a24500017</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a51a012a88d80ded7190d7d1d4a9a27cf</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ada1f22136084c5f6db6066784a214efa</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9718f6cdb181ca2195dbf3ed1fa4c929</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad400b53655af8d7a1ab86421502c278b</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0afc71caa159e027daf2a9682874ee93</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a51489a5a0db97e377d64003ea8ad66cc</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a14bb4ac6f5f1484388f260e6ce64bcc4</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aca4a4c57a72b01f4de978254f861d090</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a766cf59f55755b2dcda42176245c2c99</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a4fd95f8b40b9992818766ccbdb359e48</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af383cd1322d9fec9fca5280c990a3afd</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a852b0c4659e4cb2545810a67a576b36a</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad674afd1e318523606f96353a1079af2</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a54fe3ff75aef8e6006047cde5b556165</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a62de0fb92d09c527c0f66f25160e0efb</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a03cf976f00f1d8f252c1e6702a20cbd1</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a50f8a8a3dd307b09b7bcafd124bbe21c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a212a4f7999a62dbd247307eecece0e0a</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5b38edf0fbaf043129be222eec6e2b75</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abf2f873fb35332de8b69e2384012ecd3</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9d3f0dc52cffd1499c7452abdbeeaeb0</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a76e15777316ead27237a8495d6a08ab3</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a71cc8c87282ef18830a40a515412acf5</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ace088a4917ab4dafd15ebb54e05c949f</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a45027a8918efb87c608831050735bf29</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a24d0ce561e25934352212f723127405e</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a65e1af192f5a593ca1cd5d95aa1eef8f</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af7afec806ebaf8e0aa6dc89d86ae9efd</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7a0ed043457d4acb3c69c72e86246c12</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af2cac14abb1a67c5626d1591d9a2ab2b</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad723b0948bc46fc47ee793a188754579</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afc63edb697c96ac8107c858786363692</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0746338f6239a21d2c8a0a004304856e</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a22a0e70459f894ef7dba5a4ce5f207be</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a66899cd80f2ce1efa5c972d2d246f62c</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a4b7c96ce23b675fa33dc1b896ec5b4dc</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac4473e297258af08fe7f40933d222747</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af48bc4ca22b6d6b8e671fb702a9bac7a</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a99bb5950578ce0b819c5df22fbab9c35</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7c1edea118a441cc804d7eeee0ef8c23</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0acb625dc69034407ba7740f5bbc8fbd</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad3c743ab4be990608a7c51c33f25dfd5</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aaf3e663140c298fca76c349b7a46a7f3</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aade92ba8e89b439a141e15faa9e64a44</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af27262dfcaea80379f93932da374f290</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae96da5775b88b3d60042d4d3a4430ce9</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af73628efeb817b69b4a7671af028ea4f</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9ac8d811e560089369ebcb3b792c5efd</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7d05f5924358199b9bad7cbc6040baeb</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a4561ba96f360124ec2f1523ed4495c30</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8390f646fd2af8fa4d3946ffcaeb2a50</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>acfe49d7d2196b6acae4e91266064d427</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afccefb1ddafc68e0b68f86ee147d39f7</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6ebf45342b8f62b1ec70c99ee7fe7290</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aeb378f0bd2802e47feace8b1dbff07ea</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9a0ae2d7828c9dad015807c96e968b78</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa872a84c9be69f16da81cb09f543ff12</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a24a9c732d145cfb745982bac910822e5</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aeb60227ddc8b99e7bc63f12682ddca00</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a418b0c7a905558917c4cde7c56d997ec</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a67b99a719189bf99aab0598230e7faf3</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a4ab88038e92fff6f32e85150dcb34d89</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afb4ef74fb957df93a6c2d154fa1446e2</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abfc25cb8bbd6aeed4d623cbda3df114d</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a91b0fdcfcf4c738ad5cf04089a1921ba</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a248f7a45023818af33acb594e92c7115</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a146a977d6d239ce6a5d35b07fb7f9bc8</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1c7688d55355d5a964db576baa1fa9c2</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7c6b05070420a48faa5230192bc3a88e</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5d0501c3a9fb7567c8b01ad95eba7f41</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afacf68f6624263af70b6b38429268bf1</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5a52ca8154b4b35093298e5ebddfec92</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9dd203ad53cfbf4ec73832ed1b855988</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a708e8cd4c2bfac710486d7b7b5d949a4</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afd43607970727ab6a1bac8bcda3fa034</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a30071b1e476f5f42301dc91283a8ca7c</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa1e0d3247f529657d3748b29ac1205b2</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0181bf1ded9a7c92031080b6fcd21779</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7942b4f8ceb417614f82fa6c739bf7d5</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0ce5ac2198e7057193066da5fd69cadd</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab5c965817d052852c65434ef329155a3</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aee1a4ed72c6f6cead15fca1ff74e6e0a</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a474c1f641c105dfb219733f714861b4e</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a087f4c376328df8a50470a0c5b23a6c8</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a079cb9df089f6d63bac72812bae973d4</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a4089543e07d549eb9d9a5b4d37eae9ce</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0057262a45ed8f3c00981e0815b05c92</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7c752149b7b1aad569f363acb050b6ff</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2ee9e8732ffcad899022c38934f2d1b2</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a30537bc29ed8ba750855c336fad3d7bc</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a347e1509e8f2de5db81146cf846de7bb</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9fa869be7642e39fde8312e2066852a5</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abda41be01bd5f6219780fc5ea2acd984</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a32d80428cd46ee3ac52a6b99bf8534ca</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_unsigned &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac1c247e42fe996b0af042d49a5a8554f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_concatref</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a58586acadea2fc68be0fd227f1708d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_bitref_r</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6a0eea4881a0c62de292c4b4799d7e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_bitref</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac427bdd6476c9c3ee7b5b2d2726626aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_subref_r</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9e74c1b726f98535a147186bf84bd5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_subref</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a89c21a388a8a2e533390deee582c458e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_subref</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae83c9b2d4f5ed89484c4d7d7ff810aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_subref_r</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae49cdaa43aed9299ff33a85831d0321a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afd1636e2a89ecf598d4bdf0cde780b4e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>acb5f1517ffa885b9eab13dd920f4b74c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af7ce7802a9922ce7f20456d12babce25</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6a6d16433b20376458e150f2b896dea7</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac91245f3a1bc7e467d46e10e2a0bb70c</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8fde9c96cdd3ba3e1b3967574ee3cb80</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9535d6a2f6c1fa4507e2e1b8bee177ee</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>accca2fd56645671b28c4b79513ffec9b</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a048c6ad936405dd8bf405a336766d4bc</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae13c4ee6fd6b6b09d5c332dbf6c7897e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a25b4c82f62b89f4eb36fc409c0810ea3</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad036d7bdb0f485547fdae4136948ee10</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af2fb4db6a27abb0bf8435a135b6663e9</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0a2811f0efd02c2c26a1123cb6232017</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2bbc805e464331087e6464158eea3901</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a815b3e089c1260d75c18230d00ca4a3f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a819cddc1acd0f5ad2ed5f9427208d07a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a68f2aa877534eb88293be41e2db6c88b</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3cd2c591f21df4aa7f5ea2e504b59b24</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae19b6b9b506a0ee396e40937e1a520e0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab3d63e35df8a30b691a57e5f43cf9dba</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9381fceeb8a1c879e3b204c60a5c1b8a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afb301affedd13975666d1743da31d3f6</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>addb08f33a72c7428e2a7df88ac0418ed</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad3ea318a93c11dd176c068515ab7c651</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>adac9060c6153f643c6709e72dc7689db</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a572435c81a1812b469510a17e4b1aea7</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1d2ad204cafce59f9e2edb5f308cd8f4</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad79f326cb748ae603b4e95a793dc88e2</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a842ae04ee2798679373c46f811873eb4</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa4c83bfd905e09ec84aef7e56f6fd86a</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac6dde218f487183b37208bd48c1a3e25</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab5695769eb8d918ea683a98e56d17826</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a935c3de80642c8dbd8262575c7f96771</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a971a1101fda3ca4e644b6e5efd9fe977</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0b8cea0ae6ae3dde76042e940120515c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aaa4e5a9be0b43ab2a882ab249982b8ef</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aef6b7103893c5829d99de3d4d1234b33</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a851f55f6682cb90daccd3fd39be723fb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8485f667c2e660a3dec722038c0ce9fa</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae9416c013f3030de9470e3643a252c71</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3a24d8a89729f0abf91298357ab81325</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a08500f07756ed18ca191933e4cd0ed93</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a24a148654e83fac5282c400898b21046</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5576c41fea35fbd85ee287fb93c800e3</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abd084b947e6d5588d07850ea567b44d8</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7744395f0abc3d43c91a9d2971e18aa4</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae28d8a58c47a80244d0df8e44fc973ec</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a24e978dd59854a08d2750c9127b92ca5</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6fd7f839b9fdec0fe3f19ee316b43d0f</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1e625ca88a1d695b82594560ae9e735e</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8064cff1f49d11fedfba6f9d5c18d05a</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae833c4cba665779a0faae76d8b30edad</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a26ecab0924564a2049e04ee713cd309f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa7a0dfd8cc418b271969bbea9160d5d2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af004f965a2a6b73d575674bfda80a4cb</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ace4fb7cc85aa5d70f66433ee71d7402e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3585992fd95a14de35e1674551f44c0f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a125b6d46ea748aceb54aafee3a5a1a0f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a21ab390d95d1a4f807846cc651223f10</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a48cf850ff0d857cabb0adc3e6a7a77c8</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a023a34e5a7ee97ead5f879c3e5bdc1cb</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a86f8d483a13f020b9619873cfa94ef0d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a529f992d8644b42ae23cf50220e8ddab</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aeee08be7e69fee02bb83c26bfd4544a2</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6f63277836f04e2617edd5a4bb7efe69</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad7fb76e857dd93aa99b155d4fb3114de</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9651419f79b9e0384dfa9ca9920de06b</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a867c4e68edc77365e49c5adc62f34c21</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a04cd984ac5be71c2be02dc2826c89cc0</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a91de3869c84bde34f38f186166db363c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae9277c1e6499839221006e1a09a4a4ab</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5fcdb40a558febc61ab878976f7cc10b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aeca9de296b5a321630647833ec305c7a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a99a8df13408542c8e6b463512dba495d</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a56a646e980e6344901af45e4ff9fc9b8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0dbf897372ae99026acf912a6b6fca97</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab46bcdcdae2796e3e44ec32a279e6d8d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9d59108de2067d661aa465d4aa397be8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a922c0b1b8b48287dfc50f5d0a8b7db98</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab747623477937f178d975f1692bbb687</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9c718000e36582f28750634f935f5daf</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a492e73acc90511044294b9525fdf01fb</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1c54be9062d756f594096a161cd82dbc</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a89bfc3cadab62512eca378ad603f6f0e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad8b5de38fd578d2c7de1c00df358d83b</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab877dcf560b82071e97cfc33873f4909</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aec81a659d147ed11da41043dcc66d1af</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aebece8df61a90069116b3824b946d18c</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aec8b8e2fb65331eee206c969aef9b22d</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a830281ae9be53ee3b0d61b78c2eeab55</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad8e94a40dcbf577482170e2f5431ede7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a19b9bf9e65bc5a7e997fc3f80ff87bf7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6fc4533dc20d12f8c69a140e6644cfbe</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3f692251c020f685d37aae4c6f6c2ee3</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3a249e5cb9626589def54a405fee6040</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aab20d360df09a0a7fdf1c9d17cafced9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abe3aa9091cfae7ee002986104bd16d1d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a01a63585bb84c5449c9e267b7f3519e8</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0683720bd07d35d2d030741f9d57d803</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7190c6a9e79ec7068b1d010fb379ffc5</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af5f6a464a1eb698bad8c96a572d595e4</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0b5f58d69225d1a2e404b277b91a3379</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa6e4b2ac7842eaace28f2974600e0459</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab304a0a87b7b4dcf5c77068dbe4e4df0</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a47677350a574b45550bfd6e3233cd015</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a646f49a132a2f0d48f25dfcdade56f85</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aad0c51f64b476817e5ef8870c10938df</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a434be7ab1208f16b82487074ab8938d1</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>adb2d3d3a4d09cb22469ed7a4b0e1b962</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad89e217e8e81941273a741a392bdc096</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad14c96b41b7547cacc14645024a6fe62</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a87134a3f7c5049fa68f8e11816cc4460</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a875957fe5a4070d6ac6724267fafc9e3</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad0740193b041351e444916045da68190</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a399f342e0bc62cddc0763a901fa9a682</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a87c222493aca2e4f1221293e44a7d912</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af5135c23fade7b3769c702dedeafa623</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad1e06c65918102cfb7b825efb0f9488d</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a83679f745dac6da032e9cd7fadcfbb68</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a671c0f369fed245c02337ed580483469</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa1ffaed81b984e177b3383276b57c11c</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac4007c54726dc2950feec2c82b112fc1</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7fa3a7dc9988bb8e07ce8ca1dfa42a5a</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3d820e659ac24f01a328b3bca85e48f0</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae999195f16777ad5668611993857b0f6</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5aca33012dfeb67b3edef4ef3cfd692c</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad09f4727b6d7062da559e6990dbc0238</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9d2f8d412f5a9cf3229dfe64fb72799d</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab0d9c3d5888db63393b124bea9ed0342</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abfeb627079874f585840941c88acbc39</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5e0200e0db3b58b250124447c7488e2e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a36430f251e825989d83e2fada31a8ce1</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aacbb546718541b21ed63e07f47336bc4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ace80b13a48086aa47057f3685a8fd46c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1bbf965c9cbae8ba3b647af87ed05c18</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>adc79ad3cf4ca24c20bacb8212aaf0b25</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2765b01eb9749cbcad458fb124475fc2</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8bee1240e2d38f373bd617aa9fea6584</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab6c8ea6e96cbc11b285ef8bb14c4195a</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a538b421c2006faa93cb06e668bc57c24</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aedad57bf903a1f8e23d0024900741174</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a25f9a9ab41e723912d627b1024a007d9</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a03bee27160dfc1df6cd9bbea0f75143a</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aeecef4ac9a7b68f115e12e32e8c9511f</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2857d3dcd7c4ff355b38119017b59ee2</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1eb619db34f52c230bbda821ffe93003</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a14b69db65b7c35cf41da5144ff039565</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abfc93cd5a11e65460cb902fd1270a20e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a21e1e18add527d606ada2cc338bc3cf0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad31c1b257d2ba8b69ba0665464030e5d</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a12a915f638b03f53001179d9ac1e7455</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab7b852acf4b6fc514281436d06be5bb6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa6274bc46b66e8dab364576a8417a0ee</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a87bb69550892e4c9dfdd655863f02689</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8a3a03ac09029d1175fcacbea4cb8ec0</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aff63840801afa11efac4574ecbd9884e</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8ac5de9034735bdce8dc6dd419309e58</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5eef1985bf51b54bf473d6a525d4fa61</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a10c5a36503b287d0c82b386526d167ca</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a11e762c6a2bd031abe5c7f3622187d62</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1dbe4967e0c6fe385db0f7d7d501aa8d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a08a5681510bc289524fab13c2c8a5b9a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab7cbbd17c3d79b4e0325a8d97e901229</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3d8249f3d0119f42718cf7749562fc47</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a03f989b62ce72c4c7e0d05e7fd6b8274</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>adf853d21824e82fd7e428c43bfa82db0</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae2066a986f81917995080550d0e81fbb</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac2e72c7f911755ec31bbef8c8685347d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af39f12239cf67124be671eaf337370a1</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af61326df9ee2fb63d6925c6f493e5500</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afa88f09bd30d63801e101c1aa64f60a1</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8e3df5c40bff4baa5d5a53d4db25c5a3</anchor>
      <arglist>(const sc_unsigned &amp;, const sc_uint_base &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af1085f0cbb383e5f08bd524650af8074</anchor>
      <arglist>(const sc_unsigned &amp;, const sc_int_base &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a346335f6a2fd79d1df84637bd5a0c77b</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abe5936d968656e384d79382bf36d4353</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a80f7d9dbc0e9822db08cbd2582e96bb0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a54dc427600375f289fd0977f0aa82997</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a37191ebb74c5e1864e17de2f180a52e7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aecec15e848a8a01d27447d132564ca3c</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab26f8e4d24404114c506d15b409915d7</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae39d9249008c3ae1eabc9022156ddc68</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a720335e4db5f7caca53cb9b103cf4511</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a33c47c5599f463c6da990cc040ceb492</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a55f8d51446d146f6cf1e41ff2b532a27</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5f66f1e96ae4f0ac938319baf3853f3d</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9592eb82d9f42a17947edd47e4b24187</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a294823ca9fc8b3913161556417ad931a</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ace21679877ddee703d4bb48058a48a9f</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1fe14492ebffed3db2c3938654730417</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad3a4e149eb075a7d1cb51e6f7986b41a</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9097066f15be69e10f8af697cf0ebe5a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2935203d9461ebd5907e20deb99c7fc8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2e27b7b6c399f0f23316dfff75498dd5</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ada98258131f1e75fd3fa2b75b5825e0f</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a74164f69a91c04b15299db73bb6a5f61</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa569e46ea828422a9cf1b79fa92a2a39</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a872cf7c15de841fe97974bce1e46eb0b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a70d17a2a1f8ab08b0a7f38559bfaffd1</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a58291ed00f3ac2bdc4cc5fc22f597240</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afeb47c9ded689314521be08b4ad8600d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aedb051079b5f633ca1bd626720b33830</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8034a67f98a8b6fde4ad729afc120900</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a50adc1b4403de062b273dc93547db7ef</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a19f19957c5e42003398805d8483e80c3</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3a6dfd03c3e9ee1b402db488b3cea213</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab1c799af0ad7f22c34a2c046ac592596</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af00b5717536fbb6eff99a5fd0de1a642</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3cd561a8430178963da410d60a80244c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a82a6b11680cf7cb69dd7d9725c3b712e</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0274a81af816d759287fc06f5bc4c9c8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a600d93deb4079fca58812a3ddf55bda5</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6142881e8a5bbe714fa14cbf26250ca8</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aba1c2cda928faf920edb8a72d4763e53</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a19248491aeeff650300acfe5efe0fede</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2e468fb3cf80bd04a7bd1ecc70267576</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9eb1dab58cd55ebfee15d78c4862ca4f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>addcb45cb8a04fc57f4e5b120771aa8d7</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a786780c2a2f1f332778c4e85c0ac752d</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8271117a9f36d8554cb10f2b2a7468e4</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a9977488aca124e910c807210d0dbead7</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a8e08ff6ef986ec0c5708317d43a7a798</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa4d470b093abff56c320a282aad26780</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0d9215e83405cbdccb48fc6930e02f73</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad7c890369fca417fb34542cf21745877</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a05f98758efe5999ce1dc6277e09b2af9</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a308fb72f4b0d547130175cc81a695b71</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6b68dde1c4c011e9fd2de89e938221b4</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6036f537566dbd2f78447554cd79d084</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab47d78d92d3f33e85a97e3e498dc014a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3863dda8d3302ace552f262d7fe07b9b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad4d7d556acb26bc2b31b803ae4b0e5e6</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a4eabe9f9a2acdacbd4c3551e9275c85f</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a12dcaaba9957a05c8b69d32bce2a28d2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa46c46f792e2afc6d0fded14dcbb1e80</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>afc6569c781259061ce012302267482f2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2faa16ab077edd88616a66c432c11ad5</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a14d38bc629fc50135aee2fb63dbdd765</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a0475135722f6a95b0e592e1adfd060fc</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6932265e1f468619db7143c8a0543e4b</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae562ea4cac59c27c8f65dfecb00b1c35</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae87002311dd8ed8e6c66c7c7837cfbf0</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a16c8a16aa995acf1dc279101bc7d2dae</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a77a353e1db66d2b0181add05978140af</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a494fb58735cb964e01560a7e8ba256e2</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aec911c55ec1827364c365f623b71a3bb</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5c955703b810ccf8fc40d9b700a0c4c6</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a974dca00879ae34a2f0ab746fe3046a2</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a90e6694a8adf0803e3bf469ea00e1893</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7a7d8a8d76cbc707a6def5052e392459</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aca6d43c6814ac02ee847dbd3cdc3a9be</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af6972c79316676283e9b7feb641fee32</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a50d1d20e919503f042a8a26ebdbe7fc0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a58109355972e5853345fb0e6afad2b7d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2045f1259d4a253490485c9d434bd8d7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a258881ac67bdabb38989ab435d5c5836</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>add9dfa4f56580eadc20d32d6a14267b1</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae361046bced397b379a42e2e4f296ff9</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae09b6b0723774f30bff68b5fa0c522fa</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a83ace78ef56f08f373b0d0b3762ef15a</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aec88eacbbc27a5dfe3e1c0f8580cd2ae</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>af21cea5b18f60a8025a179d854acdae2</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aac63be8668f2373daa44800f61c1ba82</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a715af059428e5cba3a19f4cd6345ef44</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5a753b3fe27866c64a7fedb6bb5715b0</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a28cdd7a92a87835da44fffb8d5a7ec3f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab43534364244f6809534b8ca484a40ac</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a13ffe110600e0143eaffc82398906835</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad20adae00599bcc578a9efa1ce54ee61</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad534f929df4e5a25e87ca7ec8c645c22</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abaa44e474d34ed4c7eaefd5a1b3d18d2</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aef3cff9ff0693c5511bd25b0ae196ab2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2b7cf3a0f50639037e92d4014b8b229d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab10090a8e1300b2c51b18d62c1308806</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa0724058343cd36b7a93f2e9e9c19077</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa4cd70817776247f824ded9b3ad7e0d5</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a1d032717f2f8971dfb41f4913c2acac4</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a313fd4ed06340178799c33dd1dde480f</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a67bd6d940d827da049a7a9810baf3756</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a79817b458a9df5c67eef8f57cd9e1c74</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a6814e45969ce19600acad86f7cd0d188</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aa99f309c5fb7044ddb29de50b7bb6c14</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a644087dda5d4b5e21c2a2d2727b3b1d5</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae6b3ed2762431b7f81c6f506d1a3b620</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ab32b8ef257d4eb07f705770c1ada374a</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>abaf13c119e398ced6e7c194fc8cff465</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a7a6a249aa35e7b84e140aa5177070739</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a84165614efc728bf2c0fd7855546e6af</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a5e92c1de3aec8ab26ab7f43a7a39be2e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ae6f0d45a2f5187b888e4a96efee0c1b9</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>operator~</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a2163a7b7b2320a06f6f758076bba23d9</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>compare_unsigned</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac489e5edd0df9294d2d10cc2f07cc188</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd, small_type if_u_signed, small_type if_v_signed)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>add_unsigned_friend</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a3c1c75b55759a001116c5289626c47a3</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>sub_unsigned_friend</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ada7df512b5be97ff3d609587cf40ae04</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>mul_unsigned_friend</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>aacf2015b808250d4140e1cfec7375c0c</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>div_unsigned_friend</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>a19d60b5dd2b73ab7ffa02316f9e0130a</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>mod_unsigned_friend</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac98e74949e1eb9369ccd15dd2c8ac00e</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>and_unsigned_friend</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ac5131cf538a10c24eb91cceca10ffdb7</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>or_unsigned_friend</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad470b8199ec3ae098539603727c1459b</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_unsigned</type>
      <name>xor_unsigned_friend</name>
      <anchorfile>a01712.html</anchorfile>
      <anchor>ad7033d8cd4aa4456e85cd906ec05102f</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned_bitref</name>
    <filename>a01700.html</filename>
    <base>sc_dt::sc_unsigned_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_unsigned_bitref</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a73ecce7a269973db1b7dfd3a2b663b44</anchor>
      <arglist>(const sc_unsigned_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>ab9f008f8fceffc651830b74a6897bf93</anchor>
      <arglist>(const sc_unsigned_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a87cf7cb45180312add7565e408956079</anchor>
      <arglist>(const sc_unsigned_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>abd28996c8dba893293c1247fb433fccb</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a7b7acc8bd0926c45850de33ca889cc58</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>ab3dbfdf5a92fa742dc6041e457dcdac4</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a6347e0f580755ca6030100ad428560b6</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>aa6c9166523c87f09b991918ddc2f81a4</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a965166b87c8568f47dc99da415a40f78</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a0eaa84bf2b3fcd6557655b92d5781bba</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>af17519fb4f9c2508a927a1a031d6be0a</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>ae00d312672c2db8b2deb2be993607bfd</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unsigned_bitref</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>ac923c36aeaf6b996dea84fc336296e9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_unsigned_bitref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a6206857f5a12b1984ccbc498bbadd7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_unsigned_bitref &gt;</name>
      <anchorfile>a01700.html</anchorfile>
      <anchor>a2be4c31a1664772e9516ce27db0af6cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned_bitref_r</name>
    <filename>a01696.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_unsigned_bitref_r</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>ad104a0be4a0f1224362982a419ce67a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned_bitref_r</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>aaea6196f0e114546c50a7b4be48dbb2a</anchor>
      <arglist>(const sc_unsigned_bitref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>ae13ae3870af2aba5968d849879d2d554</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>a94112722df467083da07ee23faee8bf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>ad1355c3bba699e961501abb2703e859c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator~</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>ae1a6bbd9220aff19186d21a9eaaa73d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>value</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>adfe8c40050298aac8e6f63ca20743589</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>a7c13b098ead4d429045af6f3a3c9f99b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>a757ca0197f6d24714e52e707ffd555ff</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>afcd0df2c6107563f98de35dda8aa3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>ab1e943c9855a2e4c9570e39c8a506400</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>a49a4556b28e6b0387e959268f7f425ea</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>ab21cd0f1cd1bac449a3f1bedb44f6a12</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unsigned_bitref_r</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>ad840a1ba7e51352362dbc66564a5360a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>a7479b222cb2bc480b6b5b112133418e1</anchor>
      <arglist>(const sc_unsigned *obj_p, int index_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>a60fdf8304f9137dbd2936cadfa320d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_unsigned *</type>
      <name>m_obj_p</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>a946e26d1485173428c95a007193a5aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01696.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned_subref</name>
    <filename>a01708.html</filename>
    <base>sc_dt::sc_unsigned_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_unsigned_subref</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a620112ae83cf053219ef387bbabdf196</anchor>
      <arglist>(const sc_unsigned_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a7ba042dc229b96257c3f8f2c143daf00</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a4e4a65ffa7372fcdf1c3c8a1c2f90dfa</anchor>
      <arglist>(const sc_unsigned_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a119c06355aa4309bcb0c57d8fff1611d</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>adfcfd473f67123ded9903711d139ba9c</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>aa1e5b110ea06fe58d0f2f085c3c9e9f2</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a4cb7ad488e10068191f46375e31819e7</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a248e18ae2b3021797093909ab18c5d29</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a3d66e738856afb23cd051eb3cc4ef0df</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a44b0edcb7e8c48daa5a56a1d8162080c</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>ab87ac0ae36b63bbf5dcdebe9acb100f3</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a7afac0a90dd61ac4894b3128b86bb240</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a4f06e6723a8241fe8fd222e56a6cd803</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a28cddfef94f35f94338020c6b64c6d76</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>ad9b6ef71b5dfcb78f27141d0037cf764</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>ab2264a01cf059ed2994aac6d3b0d09dd</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a3b4bf0af1ccf0b0e6e2f5d91ec08d967</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>ad2e0555021c89b42b3ca49f230de9aa0</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a8e4c5e58b7cc14560231aa7af4cabf53</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>ae795c8124d4707db0aa1f1156c793ceb</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a3843124b3e7960101fdf89b1011104b8</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>ab17d5577e6b3a8adf7c94b97e0442c64</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unsigned_subref</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a09fa22ba518ee61876d84d0013fdff23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_core::sc_vpool&lt; sc_unsigned_subref &gt;</type>
      <name>m_pool</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a307bcf5d06060be6c1a3a1752629a8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_unsigned_subref &gt;</name>
      <anchorfile>a01708.html</anchorfile>
      <anchor>af1dfc620cb2ec1783b837afb62c1623f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned_subref_r</name>
    <filename>a01704.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_unsigned_subref_r</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a9d34e25e0757b18de383c86cb717d0da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned_subref_r</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>aab9883fc300d5500675a53b4e3301a1e</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>afa4586ae7c60c14c98991cd5adcafcae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_unsigned</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>ae832b4ae136591351a78f151ac3a49ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a1a200975754c6aeb2c149a662295ce17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>aea2dc80946c4a30474a876ec211c7baa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a96875f7743fcf3d50f33de548fa1b214</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a2d0c6ddfe563e630d4aa570e083e8473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a1c590deca732b8610d553ab5c3f3c045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>ae732c3166c3701c5cc85de85c68acf43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>af8ed0fb19f5927aa999c76a9aac7cac7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a37ba5587739a2c0658bb2d229567d789</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a392246e2bb0930e88e1278b36f4c9f33</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a72b2a875c93bf484bd905bdc50b5d0f2</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>ad2ea36e497658d966d519589926306a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a7a4140d00df8931bc87786652dafd7d1</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>afffdba924d6d8e3daafb385a158730ae</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a651585d8b20601b863a209abc529c3ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a7e56e4af87a6d4094dcc6ed9e8f9e34e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a8813570aad4f41a3331c70a1edfac7c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a0acd1650d04735fd130f45011d1605f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a4fed03d59e301b7f405b0dd859432791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>aad8892b814606a218d20861c42dd59c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>afb33e5c82fda0f3d519c5394b99a22cd</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unsigned_subref_r</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a8e99060ac1c9ff66ed191609718bc68b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>aed900b3c54988639c053a11e339a0bd5</anchor>
      <arglist>(const sc_unsigned *obj_p, int left_, int right_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_left</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a287c31e86add14420306b8df51297045</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_unsigned *</type>
      <name>m_obj_p</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a822fb63370b2babab0c8cbc04eaff803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_right</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>ab755baf740db0afbff7964467c5292fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_signal</name>
      <anchorfile>a01704.html</anchorfile>
      <anchor>a4b0efbf1717a2056ecf075726c62032b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_unwind_exception</name>
    <filename>a01800.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_reset</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>a9cae9cfea0743b241bd783ecee9316ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>aec29ef1d169b9ce66b130b0e5f9e5bc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unwind_exception</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>a895057e79db1f04093e7481d8551bcfe</anchor>
      <arglist>(const sc_unwind_exception &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_unwind_exception</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>a3da78b9d58164de357f5bcc4b56c6e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unwind_exception</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>a67b7c9d25b6a3f8bcc3ef510181a1b1e</anchor>
      <arglist>(sc_process_b *target_p, bool is_reset=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>a57ecbeaecf44aa3b9152834686b1a228</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>af9a425d8aa23a4beaed3974043e0ada3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a01800.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_user</name>
    <filename>a01788.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_user</name>
      <anchorfile>a01788.html</anchorfile>
      <anchor>a09322334de4dd920aa0f9915a1d085c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_user</name>
      <anchorfile>a01788.html</anchorfile>
      <anchor>ad6ca67bbfeea977570361a4376683f73</anchor>
      <arglist>(const sc_user &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_value_base</name>
    <filename>a01724.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_value_base</name>
      <anchorfile>a01724.html</anchorfile>
      <anchor>ae52adc2622a181df5e50f30006f8cc60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_concatref</name>
      <anchorfile>a01724.html</anchorfile>
      <anchor>a58586acadea2fc68be0fd227f1708d77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vector</name>
    <filename>a02108.html</filename>
    <templarg>T</templarg>
    <base>sc_core::sc_vector_base</base>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ab9b53ef427d96d0cb2d1635e0bb5e637</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_vector_iter&lt; element_type &gt;</type>
      <name>iterator</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ad0572f79a1bda7c4ad9d8d39b70faada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_vector_iter&lt; const element_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a5ded05ff7f7bf497cba20fbee3626c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a7545a7e9494c6a010ebabeec359a0172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a7f247716baf4d82a82f28a1b94354cc6</anchor>
      <arglist>(const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ae389bb4e3709ee6385b80cb87ffb64f8</anchor>
      <arglist>(const char *prefix, size_type n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a014ef9fda17d20b9bdacf49a5473ebf0</anchor>
      <arglist>(const char *prefix, size_type n, Creator creator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_vector</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>aad58f97be57128328e8387f2448c7b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>element_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a0aba7a151a876a53e5e608ed4b1944af</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>element_type &amp;</type>
      <name>at</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>aedda069a2a411a1ef168c8e502454261</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const element_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a686b35e7379120e39073f34659e216f8</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>const element_type &amp;</type>
      <name>at</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>aa036c76a427c9e822f37955e0164c3b8</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a00fcdcd4130d01bc7017c0a7ff3f652e</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a93c3664a632ed1421fd6e49b81f697d9</anchor>
      <arglist>(size_type n, Creator c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a9753c6809f208a5f7453bfe910220c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a9d450df405ca005fc474d99b44422c64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ade850dd38e83600aa7f6b7a891e9da3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ad32efc2c6de98ea7c40c62d90b231584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a53bba4315d077191687302fcca971b74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ae1c2507b1525ef17f408c293d460dd21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a37af86f158df00c8b823b37b54a60739</anchor>
      <arglist>(sc_vector_assembly&lt; ContainerType, ArgumentType &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a8ca5d54e821be3005fc0bd722c2e764b</anchor>
      <arglist>(BindableContainer &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ac4af4c09bb5c0c827a331424448418c1</anchor>
      <arglist>(BindableIterator first, BindableIterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a30b7414e2c044a2dee25d2888914aa22</anchor>
      <arglist>(BindableIterator first, BindableIterator last, iterator from)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>af081e8784ab8dd89d454fc1205f7ca23</anchor>
      <arglist>(sc_vector_assembly&lt; ContainerType, ArgumentType &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a5fedeca555e235be3da312de3e330271</anchor>
      <arglist>(ArgumentContainer &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a3925416cc3563d31f07af801193d5df7</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a8f22637c36161f1e3838cb25432df295</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last, iterator from)</arglist>
    </member>
    <member kind="function">
      <type>sc_vector_assembly&lt; T, MT &gt;</type>
      <name>assemble</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ac6952a0d1be363973776c28f4677c974</anchor>
      <arglist>(MT(T::*member_ptr))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static element_type *</type>
      <name>create_element</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>aa687080a5e72c06ed1cf6c0a045a2533</anchor>
      <arglist>(const char *prefix, size_type index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>ad73f125084bd1071df96255f9437eef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual sc_object *</type>
      <name>object_cast</name>
      <anchorfile>a02108.html</anchorfile>
      <anchor>a39be898a3aeced820b185fc7bb018b26</anchor>
      <arglist>(void *p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vector_assembly</name>
    <filename>a02112.html</filename>
    <templarg>T</templarg>
    <templarg>MT</templarg>
    <member kind="typedef">
      <type>sc_vector&lt; T &gt;</type>
      <name>base_type</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>acb5a379376ced3f7856eef4c88aaaf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_vector_iter&lt; T, sc_member_access&lt; T, MT &gt; &gt;</type>
      <name>iterator</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>aed682e941ec1f42b1762f30723d6efe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_vector_iter&lt; const T, sc_member_access&lt; const T, const MT &gt; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a64c3347c088d1ae8b0d78d9585110c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>adca4ef5d9b3d5714ee27866dcd8b1048</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MT</type>
      <name>access_type</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a91a52c3b7dd9c2030cac581c9fba3b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a05d6889a1674e88f7648f50b43a90d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ac75dc800d49611c6999f3024505a642e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator::reference</type>
      <name>reference</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a725b79cb552532afcd601fa14ee868a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator::pointer</type>
      <name>pointer</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a18e489876aa21e0ddb3de9dde70533fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_iterator::reference</type>
      <name>const_reference</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a1bdd8ae25606204340f9e44ce45117fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_iterator::pointer</type>
      <name>const_pointer</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>adf2472e01faf00432b1ff16978e06ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>access_typeT::*</type>
      <name>member_type</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a0ddd56b591b45750b829fbeb30b745c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ad8087ca4362c28aecf291e6c2920c21b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>kind</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a816d5e247eedd7743600d2def3feee3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a6e65df52a338f9d6918ae5af6a3aeac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>add08eafdc8629b1fe0975446d83e86c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a172b08546efaf8a26c324dd34a8e569a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a254745eee901612f484575651194aed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>acdeb907150e24a9300f6bdf990fb182a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a55808ea4aeddc12992c15412818866be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a891d10041ca1d040f85150013de51af0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_object *&gt; &amp;</type>
      <name>get_elements</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a97dc4923a1a8be900565592b5707a253</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a21fbab0516154a58954b053669354215</anchor>
      <arglist>(size_type idx)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a3d6e962e696af0375b1784b77806e431</anchor>
      <arglist>(size_type idx)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a8108c5d45b831468a7895bf5d2224b61</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a149b74a2950436eb6a3bffef7c56a11d</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a02eb039cbce09e65b7a6356b70852e4a</anchor>
      <arglist>(sc_vector_assembly&lt; ContainerType, ArgumentType &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a1761acdbba74c571b54a0072937b2817</anchor>
      <arglist>(BindableContainer &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ab5c4ff16f89a7804a0bc6b7e57bc5cbb</anchor>
      <arglist>(BindableIterator first, BindableIterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a1f0d1ae4677dec78d5792bf3b0a8f845</anchor>
      <arglist>(BindableIterator first, BindableIterator last, iterator from)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ae6eda3d12a08ada3b0a35553ab18a3ac</anchor>
      <arglist>(BindableIterator first, BindableIterator last, typename base_type::iterator from)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a1dacdb9ddea1d532ad0a3e6f97974297</anchor>
      <arglist>(sc_vector_assembly&lt; ContainerType, ArgumentType &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a1504903b383391d2e481e7b668dc6798</anchor>
      <arglist>(ArgumentContainer &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a753c776a848777b276fc7d9e05fc05c4</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a55a42c2d0a2ec6400de969642e5fa959</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last, iterator from)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a289fa1d20835b60439280d415ac5f392</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last, typename base_type::iterator from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector_assembly</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ae33ea84494c92064f83f17155b6c6846</anchor>
      <arglist>(const sc_vector_assembly &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sc_vector_assembly &amp;</type>
      <name>operator=</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>ae2ac35dbdd9ad0ed65ea97e14122d590</anchor>
      <arglist>(sc_vector_assembly other_copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a14cf85bca954dbea5000447f0d102fd6</anchor>
      <arglist>(sc_vector_assembly &amp;that)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report_empty_bind</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a8b93ff7d4a16759327515d1d6cb45db1</anchor>
      <arglist>(const char *kind_, bool dst_empty_) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vector_assembly</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a93754228df22e3bf05f58f6a905f80f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector</name>
      <anchorfile>a02112.html</anchorfile>
      <anchor>a362c26642a0fb20f77af7d7147cda97a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vector_base</name>
    <filename>a02120.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="typedef">
      <type>std::vector&lt; void *&gt;</type>
      <name>storage_type</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a02972326f2b381c9da3711ac07ff1045</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>af1c6d9302011a7d6cba9485a393892a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>ae0abc06355d85c6b03a3ec059771d696</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>kind</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>afd10e630d2d44f737555e8673bd866d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sc_object * &gt; const  &amp;</type>
      <name>get_elements</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>abdd02f39a16d34895d423680015b9682</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a6f7fcdabdbc97346bb92416dd4450473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report_empty_bind</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>aefa9bf3c0ba1f855d635b014c34e1e7f</anchor>
      <arglist>(const char *kind_, bool dst_range_) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>storage_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a16875fd8278c53ee5fd13ed8480509f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>storage_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a51785a1d72d7706c79f2479365b16956</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_vector_base</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>ac355296129f899a00b88a3d4d2fc028d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_vector_base</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a92ec88874c6c6f3cedc2e51acd9476d9</anchor>
      <arglist>(const char *prefix)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~sc_vector_base</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a29e4935652ef50e89a1c37998af3801c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *&amp;</type>
      <name>at</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a621291d39ff99a300d7eddccdb5fe166</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void const  *</type>
      <name>at</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a787d91a9b9837f9913799a98a18ccb41</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a05042e2f2417062b1d38556bfc569cdf</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>af3154fbe07d853b69614962182f7af97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a845243c41cf3c07ac67b8926acfadde3</anchor>
      <arglist>(void *item)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_index</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a5d12b332177a791de097530523b4b10f</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_init</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>aa0780b97e7e89ab5ca86f1cec8150235</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>af04157655f0f4684f1b00df3ca96708c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a60abafc74adea01fafa97f60d714f51e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a33148bbb9db6ca94263e2f1764502496</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>ac24b993db9dd56523294f505233c0704</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual sc_object *</type>
      <name>object_cast</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>ad855e8c4ccb8ffc4be82ec6ae79327ea</anchor>
      <arglist>(void *) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_object *</type>
      <name>implicit_cast</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a127b34f4b6e4a881aeba45ba5cadde61</anchor>
      <arglist>(sc_object *p) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_object *</type>
      <name>implicit_cast</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a3a63059e5b7fa26b0e0c2a6178cfb127</anchor>
      <arglist>(...) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>make_name</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a870b6882d000990e8eb20b43325d9b6b</anchor>
      <arglist>(const char *prefix, size_type index)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector_assembly</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a7b4a574f4ffc4cec84a1310135c0cbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector_iter</name>
      <anchorfile>a02120.html</anchorfile>
      <anchor>a0d9c8be36465870b3172bd54558764d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vector_iter</name>
    <filename>a02116.html</filename>
    <templarg>ElementType</templarg>
    <templarg>AccessPolicy</templarg>
    <member kind="typedef">
      <type>base_type::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>ad00fc5fbfac09bb07ca75b5197ff99ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::reference</type>
      <name>reference</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>ab33f7be69e5b3ef95928e4ce4f1ec46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::pointer</type>
      <name>pointer</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>af693e7e687edf99e65245d63ac471a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector_iter</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a089a9d007d60e5184c93da4549694b32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector_iter</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a9653fc75b0abf6e586515de3aac0b738</anchor>
      <arglist>(const sc_vector_iter&lt; OtherElement, OtherPolicy &gt; &amp;it, SC_ENABLE_IF_((sc_meta::is_more_const&lt; element_type, typename OtherPolicy::element_type &gt;)))</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator++</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a2a22a71f16b5178cd8d66b6ae285a9ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator--</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>adb353d71940b349e14879ee6f5d04f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type</type>
      <name>operator++</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>af6b80a116baa18f43a6e3b3c983fe447</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>this_type</type>
      <name>operator--</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a8275a2a79e3d4e7a8b3a870d55e2a6b3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>this_type</type>
      <name>operator+</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a6ed3fcbb05f7abd39f7df78bc707d6f2</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="function">
      <type>this_type</type>
      <name>operator-</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a045f791fa5f1893491cb42862be5441e</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a15c13996b9d2dd907ae9ec91023f240f</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>abd26490af4bd72e56d3401f7b74d7737</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>ab75d37b6d41ea7c98a5fcf25ed8540de</anchor>
      <arglist>(const this_type &amp;that) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a0a60e1ac452e1219f81ed32d310d6dba</anchor>
      <arglist>(const this_type &amp;that) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a5afae60921a1010fcaac8e737fd8d172</anchor>
      <arglist>(const this_type &amp;that) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a6cca9a8a599e97d284f8c62fc8bad1b0</anchor>
      <arglist>(const this_type &amp;that) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a0d24d8291a183fc0f1fdf863f555e105</anchor>
      <arglist>(const this_type &amp;that) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a285ae18c98907c149b485feb6e4bd549</anchor>
      <arglist>(const this_type &amp;that) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>ad834224894110c21090cc400b2749b87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>ae49cd8b5d31ccf9ae1f1a00568d48813</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>ac331d6f4b547a5bffc869f456094e9cb</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a6071c01d5cf7776b5fa539f7e235b5cd</anchor>
      <arglist>(this_type const &amp;that) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector&lt; plain_type &gt;</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a0c209cfd9595daeddda67aab9da150bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector_assembly</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a7b4a574f4ffc4cec84a1310135c0cbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector_iter</name>
      <anchorfile>a02116.html</anchorfile>
      <anchor>a0d9c8be36465870b3172bd54558764d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vpool</name>
    <filename>a02064.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, T *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_concat_bool &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_concat_bool *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_concat_bool *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_concat_bool *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_concatref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_concatref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_concatref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_concatref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_int_bitref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_int_bitref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_int_bitref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_int_bitref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_int_subref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_int_subref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_int_subref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_int_subref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_signed_bitref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_signed_bitref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_signed_bitref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_signed_bitref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_signed_subref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_signed_subref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_signed_subref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_signed_subref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_uint_bitref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_uint_bitref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_uint_bitref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_uint_bitref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_uint_subref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_uint_subref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_uint_subref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_uint_subref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_unsigned &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_unsigned *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_unsigned *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_unsigned *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_unsigned_bitref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_unsigned_bitref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_unsigned_bitref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_unsigned_bitref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_vpool&lt; sc_dt::sc_unsigned_subref &gt;</name>
    <filename>a02064.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, sc_dt::sc_unsigned_subref *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_unsigned_subref *</type>
      <name>allocate</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::sc_unsigned_subref *</type>
      <name>m_pool_p</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02064.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_without_context</name>
    <filename>a01472.html</filename>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check</name>
    <filename>a01328.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>sc_writer_policy_check&lt; POL &gt;</name>
    <filename>a01328.html</filename>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check&lt; SC_MANY_WRITERS &gt;</name>
    <filename>a01356.html</filename>
    <base>sc_core::sc_writer_policy_nocheck_port</base>
    <base>sc_core::sc_writer_policy_check_delta</base>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check&lt; SC_ONE_WRITER &gt;</name>
    <filename>a01352.html</filename>
    <base>sc_core::sc_writer_policy_check_port</base>
    <base>sc_core::sc_writer_policy_check_write</base>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check&lt; SC_UNCHECKED_WRITERS &gt;</name>
    <filename>a01360.html</filename>
    <base>sc_core::sc_writer_policy_nocheck_port</base>
    <base>sc_core::sc_writer_policy_nocheck_write</base>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check_delta</name>
    <filename>a01340.html</filename>
    <base>sc_core::sc_writer_policy_check_write</base>
    <member kind="function">
      <type></type>
      <name>sc_writer_policy_check_delta</name>
      <anchorfile>a01340.html</anchorfile>
      <anchor>a1f6804cc64c547f6c3fc2556541cab55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_write</name>
      <anchorfile>a01340.html</anchorfile>
      <anchor>a0f4a74430ecddc798c5ec8ac2f702308</anchor>
      <arglist>(sc_object *target, bool value_changed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01340.html</anchorfile>
      <anchor>a80bf656d80983600030831a4ab98a64b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check_port</name>
    <filename>a01348.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>check_port</name>
      <anchorfile>a01348.html</anchorfile>
      <anchor>adf685dceeef16b4453bd5d7bfe2e075b</anchor>
      <arglist>(sc_object *target, sc_port_base *port, bool is_output)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_writer_policy_check_port</name>
      <anchorfile>a01348.html</anchorfile>
      <anchor>aadd7ce93eae842bedce17b7db700e255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_port_base *</type>
      <name>m_output</name>
      <anchorfile>a01348.html</anchorfile>
      <anchor>a70c873db9370ce44bd0adacae43c88ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check_write</name>
    <filename>a01336.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>check_write</name>
      <anchorfile>a01336.html</anchorfile>
      <anchor>a270e4162081657be3f632cd7d6418717</anchor>
      <arglist>(sc_object *target, bool value_changed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01336.html</anchorfile>
      <anchor>a99d3a149aacf17e453905616a7693d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_writer_policy_check_write</name>
      <anchorfile>a01336.html</anchorfile>
      <anchor>ad58b092177dafd4ffe8a9f6e9ae2d1e5</anchor>
      <arglist>(bool check_delta=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>m_check_delta</name>
      <anchorfile>a01336.html</anchorfile>
      <anchor>a615c52ba5c7fcba585efeb4a3bc8c531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_object *</type>
      <name>m_writer_p</name>
      <anchorfile>a01336.html</anchorfile>
      <anchor>a4c6a17aa3d39bab264a56ff32af700ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_nocheck_port</name>
    <filename>a01344.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>check_port</name>
      <anchorfile>a01344.html</anchorfile>
      <anchor>a98b439f58119befec7159ab20ffd1150</anchor>
      <arglist>(sc_object *, sc_port_base *, bool)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_nocheck_write</name>
    <filename>a01332.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>check_write</name>
      <anchorfile>a01332.html</anchorfile>
      <anchor>ad24d654acb3a926b761ad2ddd8f4e9d1</anchor>
      <arglist>(sc_object *, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01332.html</anchorfile>
      <anchor>a7e11d84a41e9b54d41e71d198e916f98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_ieee_double</name>
    <filename>a01572.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_double</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a5a7d68abdd56c51ef7e2b05a2eac8378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_double</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a534df86488fb95122ddeea49a43f5d42</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_double</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a02df9fc60364529ab713eb73ad5d8920</anchor>
      <arglist>(const scfx_ieee_double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_ieee_double &amp;</type>
      <name>operator=</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a9ae29b1eeb58677843e6aac2974a23f5</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>scfx_ieee_double &amp;</type>
      <name>operator=</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>abd2254c8ecc21503fee6f41fa988eb12</anchor>
      <arglist>(const scfx_ieee_double &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a57f00addebd0d50b3491166f306d13a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>negative</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>ac9c3a68ae4e29cd86ad84de1ae4010fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negative</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a81c699d6d228518e5035309cd319cdc0</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exponent</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>aeb377d63b97097ef0e4bf3642e3daad8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exponent</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>aab8608b977c52cf02c58de9f0b145e77</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>mantissa0</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a944b8c7a64358daf88479550de0c0eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mantissa0</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>abf26b070fa8ab564393f1e1d854cc16a</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>mantissa1</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a3948455ea71d4de49de8ef802fcdb1b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mantissa1</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a9ff95f8631ac8116afabcddc6ddb71cd</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>af1d4bd164da352a6ede40f083eade976</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_subnormal</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>ac78da65f48eaecb101d89f205f9935d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>ad657814227cdb7140c88e5028c5ac116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a0b0b791c39145f25c9108fbdd22f3344</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>abda7158a1627add049f232e1c00b2da2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inf</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a32e2b16fd19bca1427d817a813cb54b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nan</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a883335df4d7d21d319e0a520ac73290a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>msb</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a46557bb2d99183811a80f336b1358db6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lsb</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>ac4e098d9b3f732f47fbf66da27f6f5d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scfx_ieee_double</type>
      <name>nan</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a08db862a296e41fa16c67f04f2a7a8c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scfx_ieee_double</type>
      <name>inf</name>
      <anchorfile>a01572.html</anchorfile>
      <anchor>a8b5d0366505e21b93e1aca4e21a9c389</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_ieee_float</name>
    <filename>a01584.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_float</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a1bd0d5ca12b24fe247ad55321960981a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_float</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a4b71e3923eefe8e229c1bef42e6fd9d9</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_float</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>ac8a3d1338a0a9c639080ec7670e7dd3b</anchor>
      <arglist>(const scfx_ieee_float &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_ieee_float &amp;</type>
      <name>operator=</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a5624f6cf655955a59542f1bcb5a69461</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type>scfx_ieee_float &amp;</type>
      <name>operator=</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>ac77d92f0943b5611b3008be07474b946</anchor>
      <arglist>(const scfx_ieee_float &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a3bbd9a0fe532ff3ffa2f60469fbe7885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>negative</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a833c5584f6200951cf6c152994387b07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negative</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>af40880b852a1f625bde070ecf53b378e</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exponent</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a93d4e8bfccedc22c440b2fcd2e425fcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exponent</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a3583668263f747a40fff548888046983</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>mantissa</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a2f9418246ab08637cb1164d41b524407</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mantissa</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a02065ce8f3e1304fd362049b48a144ac</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a4148317d490bc40131c1b4668b576cbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_subnormal</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>afbcb06fde1d72e5b3e896befcf5fc04a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>af29f2ac8b3eb447d04c8aff2247c68d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>af01dd5913026c4c13b6beca3063cb69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a28098127e07bfea23cac4e26f84faee4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inf</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a4aedea5e6ea9359fa625372aa650dcfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nan</name>
      <anchorfile>a01584.html</anchorfile>
      <anchor>a0a89b46b8706ebd54f82474292687ee9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_index</name>
    <filename>a01604.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_index</name>
      <anchorfile>a01604.html</anchorfile>
      <anchor>a280eec8639362c73a73d7c93463ddd4b</anchor>
      <arglist>(int wi_, int bi_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wi</name>
      <anchorfile>a01604.html</anchorfile>
      <anchor>acc2d660305cced99a1d5ccd5fd211051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bi</name>
      <anchorfile>a01604.html</anchorfile>
      <anchor>a08543a389f7883520232e59facb6c7b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wi</name>
      <anchorfile>a01604.html</anchorfile>
      <anchor>ae68390ca9c091f5e24fe6949c4d48adc</anchor>
      <arglist>(int wi_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_mant</name>
    <filename>a01588.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_mant</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>afbb2bf2111c085ed7baff36757b5f842</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_mant</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>a1155a06bcaa0b94fb136c42c4f221383</anchor>
      <arglist>(const scfx_mant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_mant &amp;</type>
      <name>operator=</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>a3f76754d3384f5438ae83f24bfe0ec90</anchor>
      <arglist>(const scfx_mant &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_mant</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>a37e287488b84dca54ef9ff496b75fcb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>a5b10230d6497049cedc28fc9c5a0975a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize_to</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>afb89294cb62e8a7ff930e36b9558aa41</anchor>
      <arglist>(int, int=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>ac6d08fe602ed02cf3bbb1ed221861619</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>operator[]</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>a456393698e26cbe194601ae301d07524</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>word &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>a71da6ce7c5f47d193d4d264b012bf26b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>half_word</type>
      <name>half_at</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>a83980eb5bb33540c6d2994a555a1629a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>half_word &amp;</type>
      <name>half_at</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>a528b7ac290b72bd758ee66778501bafe</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>half_word *</type>
      <name>half_addr</name>
      <anchorfile>a01588.html</anchorfile>
      <anchor>aa7162f591c470abdc023e15e7b6f4a20</anchor>
      <arglist>(int=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_mant_ref</name>
    <filename>a01592.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_mant_ref</name>
      <anchorfile>a01592.html</anchorfile>
      <anchor>aec2b8849105137b7c050d267b9379e5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_mant_ref</name>
      <anchorfile>a01592.html</anchorfile>
      <anchor>a5cc97ba70a0c96c4001bee358a66422b</anchor>
      <arglist>(const scfx_mant &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_mant_ref</name>
      <anchorfile>a01592.html</anchorfile>
      <anchor>a34daf97711cd44175f94b83f9c31ede8</anchor>
      <arglist>(scfx_mant *)</arglist>
    </member>
    <member kind="function">
      <type>scfx_mant_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01592.html</anchorfile>
      <anchor>a439cca0c19d4cfde9a01e35ab95a846e</anchor>
      <arglist>(const scfx_mant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_mant_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01592.html</anchorfile>
      <anchor>ad8d2d2f335d56f7d4e03f8607070c110</anchor>
      <arglist>(scfx_mant *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_mant_ref</name>
      <anchorfile>a01592.html</anchorfile>
      <anchor>a04a53a47b1813ffd0a3a26eb7c3efb4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator scfx_mant &amp;</name>
      <anchorfile>a01592.html</anchorfile>
      <anchor>ab3c2bf707da1c04382c7f5837dae002c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>operator[]</name>
      <anchorfile>a01592.html</anchorfile>
      <anchor>a07f54b1c1b7fa3d43732e94df05146dc</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_params</name>
    <filename>a01596.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_params</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aebb5d21454bf7be9aab663eb16eaf1aa</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_enc, const sc_fxcast_switch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxtype_params &amp;</type>
      <name>type_params</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac1e0dbca16494fa7988df33064ab5661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_enc</type>
      <name>enc</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1fda3cb5b36a6e4fd558c30cf05bcb7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxcast_switch &amp;</type>
      <name>cast_switch</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1d418a0dd0e09848d7716303c18f084d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wl</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afc0454ec68f6abcfbe5d81284598f033</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iwl</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0dc02f29b7303460bb6087bdb1927d05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fwl</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a311e478bb9a13191a4c034aebedd106b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_q_mode</type>
      <name>q_mode</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a51087baa4449e9cef14915c41f9aa6d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_o_mode</type>
      <name>o_mode</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4e53f2a1beb806d7d8f450da4ee52fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n_bits</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad58284df6f3d7326e3d98b87e51e6d89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5d2903b750e05d43de7289ef8ef7816d</anchor>
      <arglist>(::std::ostream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_pow10</name>
    <filename>a01600.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_pow10</name>
      <anchorfile>a01600.html</anchorfile>
      <anchor>a98d88623d050c675bae0553f18708524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_pow10</name>
      <anchorfile>a01600.html</anchorfile>
      <anchor>adff6b28835c93c93e8e50a64c50204c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scfx_rep</type>
      <name>operator()</name>
      <anchorfile>a01600.html</anchorfile>
      <anchor>aaea39d79fc5354071bc5ee80972b65a5</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_rep</name>
    <filename>a01608.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a9609ae2e0f0afb34de7a559d3197b194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a7b8bbfffa98ba148e1765055e4024adf</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a89c913e8c803b278bad8af74fe035c61</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ae487e7aaa601ddb82d8fd2289717c545</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a1e3ed5526eda0b1fcf607688fab29678</anchor>
      <arglist>(unsigned long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a8385d01d4b7d19c2b2aada135e204ca8</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a0ba3552dd124a05554b225798195027a</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a4ea4feffe156635d4d325444df6a856b</anchor>
      <arglist>(int64)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a1141482cc6758bb32ed479ae1d8b5e7b</anchor>
      <arglist>(uint64)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ab4b3a2137d47c98b812f3300767f3b34</anchor>
      <arglist>(const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a3063e8d89f4f1a94a0a196cb45531a1e</anchor>
      <arglist>(const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a8083be117bcc89653716d0e918751ff6</anchor>
      <arglist>(const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a65a2e8fdf493f238d8a07a3e501a45ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a086a10d5299dc133e94f17b39b4ba4af</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a878825b3e1d4540719ac463f86be143c</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from_string</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a5cec9de6c2c128c015bc90e926e1b84e</anchor>
      <arglist>(const char *, int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ad9560b91773c784721fe9f9d28c50484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>to_string</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>abff0a1dbc3697c0dc7d6a5a679ba237f</anchor>
      <arglist>(sc_numrep, int, sc_fmt, const scfx_params *=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a49d3fd2dd0a8c068d3d0645ed901c5c0</anchor>
      <arglist>(const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a745c87c9ae37f207d39af6a0d5cb6b3e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>aa9113ebe1c1c5080c15d370b8e2f86e3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cast</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a1247dc3f5ac13185316006116a4518a9</anchor>
      <arglist>(const scfx_params &amp;, bool &amp;, bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ae48a73261173b08a2124bbe68c6b2264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>af85ea614c87809e7f29ff8db0f3dcf30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ac9455cec3d3976d186df038e299f7596</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a6b31bf9e673a0603641ed093990a21fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>adfeae2a78eb147615357758853d3e28e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_zero</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ac94774fef4bdd5a320ea96441427db7d</anchor>
      <arglist>(int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nan</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>aaf9d6903892a1d53cd5f8b725713982d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inf</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a3d19a84ce0686980ab9b5dc5a274ce50</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a90b1dbb74fe1e5899d09c86b29b821e7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>aa3861bce90ab92abc6dd4b571655c9d7</anchor>
      <arglist>(int, const scfx_params &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>aecb4b5587f75371f35c0501d908b7002</anchor>
      <arglist>(int, const scfx_params &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_slice</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>aec08f791643692f041e955f18366e7c4</anchor>
      <arglist>(int, int, const scfx_params &amp;, sc_bv_base &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_slice</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ab7edb27aa57dd1806666400fb6e44736</anchor>
      <arglist>(int, int, const scfx_params &amp;, const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a0d55b278005c08509689bf1b3219860f</anchor>
      <arglist>(::std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a0e2f127e6a5f600c5faf81349a604815</anchor>
      <arglist>(::std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_type</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a9931e2927a12605183739e068444d024</anchor>
      <arglist>(int &amp;, int &amp;, sc_enc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rounding_flag</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a6d1c62c49184156bc70f7acef3c2dfd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>multiply</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a92d2662f34d22aa10d6f5e836516cdac</anchor>
      <arglist>(scfx_rep &amp;, const scfx_rep &amp;, const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>neg_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ab2689e0af1375466e4ff5bdd3c61467d</anchor>
      <arglist>(const scfx_rep &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>mult_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a902f15a2afc9f73515469e2f7ec9d3c3</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>div_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a0e89f404515db088596db55b898634a7</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>add_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ae627dbd0faa4db79e9dc3e68f986f461</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>sub_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a439e8aae84867353b11963360a2e9ba5</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>lsh_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>acee2e8e0fa96acd4a0cdce0467c74374</anchor>
      <arglist>(const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>rsh_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a1fefe7c92b82f7324e065604cb2f0607</anchor>
      <arglist>(const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="friend">
      <type>friend int</type>
      <name>cmp_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a19b790ef5e2bc0e5b233476d1ae94bd5</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>quantization_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>aaa135e6d5c4ea12e2a7c6c8e9e3d08dd</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_params &amp;, bool &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>overflow_scfx_rep</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>adfd4eea8a4c81e7654bd5e3c0cebe3c9</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_params &amp;, bool &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>align</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ad40520c333d37d5f608210c4b648d6ad</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int &amp;, int &amp;, scfx_mant_ref &amp;, scfx_mant_ref &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int</type>
      <name>compare_msw</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a96edd534e8a8b2b49a81c970f7e69d1a</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int</type>
      <name>compare_msw_ff</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a359c2f8560aae9367f34e3678a9ced4b</anchor>
      <arglist>(const scfx_rep &amp;lhs, const scfx_rep &amp;rhs)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>print_dec</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a5cb8fdfa027314639a8251c346ca057a</anchor>
      <arglist>(scfx_string &amp;, const scfx_rep &amp;, int, sc_fmt)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>print_other</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>ae1b88d3e51d87776db78712c0f444f48</anchor>
      <arglist>(scfx_string &amp;, const scfx_rep &amp;, sc_numrep, int, sc_fmt, const scfx_params *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int</type>
      <name>compare_abs</name>
      <anchorfile>a01608.html</anchorfile>
      <anchor>a30b9f2062a3feeb99fa1f3ab629bad48</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_string</name>
    <filename>a01612.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_string</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>a3509e61d5fe9589aff6daa9933dfac71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_string</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>ad15213866673062361d35990e420f655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>ab6887d4f42d198be6ce12ad79a29818b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>a32719a54dea61e6df45803a42dfb72f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>a3675700ff35ae09f99677f3492844aa2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>a6afd83d36add16f0b9f54efeee2bba80</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discard</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>a72e01a6369e5a37881583e8777b056e5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>ab91ac065163423f62b17a01d385ae59e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>a3bcb49f3604242d6827d981fea185fea</anchor>
      <arglist>(char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>a8e94ef54d3151f5a1334a264a9b9a22d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>a01612.html</anchorfile>
      <anchor>aaf14f031bc7ec1c95b93797e08576bab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::scoped_flag</name>
    <filename>a01876.html</filename>
    <member kind="function">
      <type></type>
      <name>scoped_flag</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a59abbd7bb29081aa55635e5489b0209b</anchor>
      <arglist>(bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scoped_flag</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>a119776df26a46a3a139b5adc47ab86c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool &amp;</type>
      <name>ref</name>
      <anchorfile>a01876.html</anchorfile>
      <anchor>ab43829487cd20678b771d37968d49181</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_meta::special_result</name>
    <filename>a02096.html</filename>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_object_manager::table_entry</name>
    <filename>a01844.html</filename>
    <member kind="function">
      <type></type>
      <name>table_entry</name>
      <anchorfile>a01844.html</anchorfile>
      <anchor>a36777caa86b3cf8f156884a7ce1791fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>sc_event *</type>
      <name>m_event_p</name>
      <anchorfile>a01844.html</anchorfile>
      <anchor>a99b05a47f816f78b8d0f633156515a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_object *</type>
      <name>m_object_p</name>
      <anchorfile>a01844.html</anchorfile>
      <anchor>a4207f915c065a2fa779423a80dfa969f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::vcd_T_trace</name>
    <filename>a01960.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>sc_core::vcd_trace_file</name>
    <filename>a01964.html</filename>
    <base>sc_core::sc_trace_file_base</base>
    <member kind="enumeration">
      <type></type>
      <name>vcd_enum</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_WIRE</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a0aed8d877bed34ad18d35753ab68e025</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_REAL</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a9c05f840276a693859fd2fc82cdb46c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_LAST</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322aef7b4a199c0e1dec68ca017f91920864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_WIRE</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a0aed8d877bed34ad18d35753ab68e025</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_REAL</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a9c05f840276a693859fd2fc82cdb46c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_LAST</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322aef7b4a199c0e1dec68ca017f91920864</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vcd_trace_file</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ae50cb419d087da5a276308fd4ee6baf6</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~vcd_trace_file</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a265d91be64ddd1c3d152d9ae13931d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>obtain_name</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a98b2e62237c1a7fe84a3aab92603cf60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vcd_trace * &gt;</type>
      <name>traces</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ab05d6f51bed475ade04956f9dd971a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>afdc34ede8ab6c4b1b2c5563cd9f5ee19</anchor>
      <arglist>(const bool &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a49dafdfc6273c5f8de969228331e0e7a</anchor>
      <arglist>(const sc_dt::sc_bit &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ad31b199b9b5cf391be38f477e0dd4e9f</anchor>
      <arglist>(const sc_dt::sc_logic &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a4fa0c74689c7240b59cbb1b5a0d78aa3</anchor>
      <arglist>(const unsigned char &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a4d616c80d3813fa1173dde6fa952539c</anchor>
      <arglist>(const unsigned short &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ab6a9aba159fb149558b8ee04a86850ce</anchor>
      <arglist>(const unsigned int &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a2bb432c371cc80e5df6ee374af2ddeaf</anchor>
      <arglist>(const unsigned long &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ad03fc1865da88d7a18307a4f378b7dd4</anchor>
      <arglist>(const char &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ad417c20f3c08fb44fac5d2d9bc081c8e</anchor>
      <arglist>(const short &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a0df55089461404b11d0e35f4cf0fb331</anchor>
      <arglist>(const int &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ae5a7297793fceb52f8bfc5d2a8f7171b</anchor>
      <arglist>(const long &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ad714ab4a2aeffda4aeb5336b8cf58619</anchor>
      <arglist>(const sc_dt::int64 &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a60a0ada9ccb855ff25beaf14e80061af</anchor>
      <arglist>(const sc_dt::uint64 &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a1e6b94cbc29c0f84d1b2903ff099aac2</anchor>
      <arglist>(const float &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a0f0525aedb6590f803e95404026718b2</anchor>
      <arglist>(const double &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>af748fe55d45d3a277001f3ca9f76c886</anchor>
      <arglist>(const sc_dt::sc_uint_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>abc02948408ea08265d071efca02b964d</anchor>
      <arglist>(const sc_dt::sc_int_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>aee42cf99deb964d2c6e6ee9933b049d2</anchor>
      <arglist>(const sc_dt::sc_unsigned &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a515ea33ff9a3479912ac6366a6ae2f6d</anchor>
      <arglist>(const sc_dt::sc_signed &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a5def276667c0a29664f5b7f03611f5fd</anchor>
      <arglist>(const sc_dt::sc_fxval &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a9cb2205c1e2bba211c50ab1bfbf37cfc</anchor>
      <arglist>(const sc_dt::sc_fxval_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a7ed980ad4bc8570e9c3b411c90734384</anchor>
      <arglist>(const sc_dt::sc_fxnum &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a3fe770905f01ecb5cf8d59560161aa30</anchor>
      <arglist>(const sc_dt::sc_fxnum_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>traceT</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>af8d9b1755eb07a76d66a4a5149d142f9</anchor>
      <arglist>(const T &amp;object, const std::string &amp;name, vcd_enum type=VCD_WIRE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a86a1e5243a32acc70ac81c14e6e91d4e</anchor>
      <arglist>(const sc_dt::sc_bv_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ac9fda2b2aa77987d9f1bc70a016a2425</anchor>
      <arglist>(const sc_dt::sc_lv_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a715785076600d7b70c06a93dca04bf4a</anchor>
      <arglist>(const unsigned &amp;object, const std::string &amp;name, const char **enum_literals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_comment</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>ac426232e89fbb1bb3b93431ad0f6483b</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cycle</name>
      <anchorfile>a01964.html</anchorfile>
      <anchor>a6208d54a4a576c6e74c25cb0c01a885e</anchor>
      <arglist>(bool delta_cycle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::wif_T_trace</name>
    <filename>a01968.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>sc_core::wif_trace_file</name>
    <filename>a01972.html</filename>
    <base>sc_core::sc_trace_file_base</base>
    <member kind="enumeration">
      <type></type>
      <name>wif_enum</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_BIT</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a7aa6f1e1483d2d65ab98190ff7bfdff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_MVL</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a526b64e25e7aece844de5e77a1ea609c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_REAL</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a824a6bbaa6acd4669448fc40860a38ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_LAST</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a60297c00265f9d3c5d3f6d8afa932fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_BIT</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a7aa6f1e1483d2d65ab98190ff7bfdff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_MVL</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a526b64e25e7aece844de5e77a1ea609c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_REAL</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a824a6bbaa6acd4669448fc40860a38ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_LAST</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a60297c00265f9d3c5d3f6d8afa932fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wif_trace_file</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a22d86c28b0ee08b871af70bb88152af5</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~wif_trace_file</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a800560b0ce5a245b511a4b3bcdc147ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>obtain_name</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a34de4a1e54e73d1f8ce1a4b9dfa27aa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; wif_trace * &gt;</type>
      <name>traces</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a480d0708db6dada1e574a67abf88e9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a591ccbaff2e7af84fcfb78e40943e5f9</anchor>
      <arglist>(const bool &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aee9a799b9d31eb2711eb2192b0633733</anchor>
      <arglist>(const sc_dt::sc_bit &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>ac9f78f28babfb88b33a099fa9017ab25</anchor>
      <arglist>(const sc_dt::sc_logic &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aac42ec0b2dc8019d4f690306df85ef92</anchor>
      <arglist>(const unsigned char &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aeeaa3da29759b908ddd13babad4a685a</anchor>
      <arglist>(const unsigned short &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a1d523690a6e486c588aaa19eb1274791</anchor>
      <arglist>(const unsigned int &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a9cf1191ab2f1db0902e902ccc3548183</anchor>
      <arglist>(const unsigned long &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aa9b8c7806f668d0d20bd47e3cad62456</anchor>
      <arglist>(const char &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>ac3deca780cbcadbe27291127163ff0e0</anchor>
      <arglist>(const short &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a9de394f97c579a021b2e6c24ff42cf55</anchor>
      <arglist>(const int &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a42d23b76a427ccb89eee87104d59c8be</anchor>
      <arglist>(const long &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a2d91d136de8dcf9a721646fec5072a88</anchor>
      <arglist>(const sc_dt::int64 &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a268e669356052197fd1f9d8a543eb14e</anchor>
      <arglist>(const sc_dt::uint64 &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a58607ed29af19935eecbb9838784c69e</anchor>
      <arglist>(const float &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a32100f972cc7ef7ab8eb19f44f6470a7</anchor>
      <arglist>(const double &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>abb76a43eb38aeb2ce5070f6ad75dffcf</anchor>
      <arglist>(const sc_dt::sc_unsigned &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a84dc83b5680a0b1372fb6de23f1ce389</anchor>
      <arglist>(const sc_dt::sc_signed &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a673a6e98f241ca5ecc4e1c3ddc3c3145</anchor>
      <arglist>(const sc_dt::sc_uint_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>afea34a2920d8a13d82e978eb5a29c02b</anchor>
      <arglist>(const sc_dt::sc_int_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a60f60de67370e4fd71eeb2099ae3e12b</anchor>
      <arglist>(const sc_dt::sc_fxval &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a745a3bdb468de8a1850d65dd30840e4b</anchor>
      <arglist>(const sc_dt::sc_fxval_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a1173fa03c6c0bcd69209f6f49e393701</anchor>
      <arglist>(const sc_dt::sc_fxnum &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a3d32d0d55a22917b628c26161b085722</anchor>
      <arglist>(const sc_dt::sc_fxnum_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>traceT</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a5a709a62dab461d45e66fcf3bfbebc8d</anchor>
      <arglist>(const T &amp;object, const std::string &amp;name, wif_enum type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a98a29bb8720330d1affc2c139c225d61</anchor>
      <arglist>(const sc_dt::sc_bv_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>ade648c5a3a7b6aa3dce9d0f2a563001a</anchor>
      <arglist>(const sc_dt::sc_lv_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>aef48292fd62d2e5a7e1ed87d2d13a006</anchor>
      <arglist>(const unsigned &amp;object, const std::string &amp;name, const char **enum_literals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_comment</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>a21ff21603f65146e080f7bbb7e34616a</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cycle</name>
      <anchorfile>a01972.html</anchorfile>
      <anchor>ab65d8ae745dc1ed3a5865636d4a87a49</anchor>
      <arglist>(bool delta_cycle)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sc_core</name>
    <filename>a00546.html</filename>
    <namespace>sc_core::sc_meta</namespace>
    <class kind="struct">sc_core::SC_API_VERSION_STRING</class>
    <class kind="class">sc_core::sc_attr_base</class>
    <class kind="class">sc_core::sc_attr_cltn</class>
    <class kind="class">sc_core::sc_attribute</class>
    <class kind="struct">sc_core::sc_bind_proxy</class>
    <class kind="class">sc_core::sc_buffer</class>
    <class kind="class">sc_core::sc_byte_heap</class>
    <class kind="class">sc_core::sc_clock</class>
    <class kind="class">sc_core::sc_clock_negedge_callback</class>
    <class kind="class">sc_core::sc_clock_posedge_callback</class>
    <class kind="class">sc_core::sc_cor</class>
    <class kind="class">sc_core::sc_cor_pkg</class>
    <class kind="class">sc_core::sc_cor_pkg_qt</class>
    <class kind="class">sc_core::sc_cor_qt</class>
    <class kind="class">sc_core::sc_cthread_process</class>
    <class kind="struct">sc_core::sc_curr_proc_info</class>
    <class kind="struct">sc_core::sc_direct_access</class>
    <class kind="class">sc_core::sc_event</class>
    <class kind="class">sc_core::sc_event_and_list</class>
    <class kind="class">sc_core::sc_event_expr</class>
    <class kind="class">sc_core::sc_event_finder</class>
    <class kind="class">sc_core::sc_event_finder_t</class>
    <class kind="class">sc_core::sc_event_list</class>
    <class kind="class">sc_core::sc_event_or_list</class>
    <class kind="class">sc_core::sc_event_queue</class>
    <class kind="class">sc_core::sc_event_queue_if</class>
    <class kind="class">sc_core::sc_event_timed</class>
    <class kind="class">sc_core::sc_export</class>
    <class kind="class">sc_core::sc_export_base</class>
    <class kind="class">sc_core::sc_export_registry</class>
    <class kind="class">sc_core::sc_fifo</class>
    <class kind="class">sc_core::sc_fifo_blocking_in_if</class>
    <class kind="class">sc_core::sc_fifo_blocking_out_if</class>
    <class kind="class">sc_core::sc_fifo_in</class>
    <class kind="class">sc_core::sc_fifo_in_if</class>
    <class kind="class">sc_core::sc_fifo_nonblocking_in_if</class>
    <class kind="class">sc_core::sc_fifo_nonblocking_out_if</class>
    <class kind="class">sc_core::sc_fifo_out</class>
    <class kind="class">sc_core::sc_fifo_out_if</class>
    <class kind="class">sc_core::sc_halt</class>
    <class kind="class">sc_core::sc_host_mutex</class>
    <class kind="class">sc_core::sc_in</class>
    <class kind="class">sc_core::sc_in&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_in&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_in_resolved</class>
    <class kind="class">sc_core::sc_in_rv</class>
    <class kind="class">sc_core::sc_inout</class>
    <class kind="class">sc_core::sc_inout&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_inout&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_inout_resolved</class>
    <class kind="class">sc_core::sc_inout_rv</class>
    <class kind="class">sc_core::sc_interface</class>
    <class kind="class">sc_core::sc_join</class>
    <class kind="class">sc_core::sc_kill</class>
    <class kind="class">sc_core::sc_lv_resolve</class>
    <class kind="class">sc_core::sc_member_access</class>
    <class kind="class">sc_core::sc_mempool</class>
    <class kind="class">sc_core::sc_method_process</class>
    <class kind="class">sc_core::sc_module</class>
    <class kind="class">sc_core::sc_module_name</class>
    <class kind="class">sc_core::sc_module_registry</class>
    <class kind="class">sc_core::sc_mpobject</class>
    <class kind="struct">sc_core::sc_msg_def</class>
    <class kind="class">sc_core::sc_mutex</class>
    <class kind="class">sc_core::sc_mutex_if</class>
    <class kind="class">sc_core::sc_name_gen</class>
    <class kind="class">sc_core::sc_object</class>
    <class kind="class">sc_core::sc_object_manager</class>
    <class kind="class">sc_core::sc_out</class>
    <class kind="class">sc_core::sc_out_resolved</class>
    <class kind="class">sc_core::sc_out_rv</class>
    <class kind="class">sc_core::sc_pdhash</class>
    <class kind="class">sc_core::sc_pdhash_iter</class>
    <class kind="class">sc_core::sc_phase_callback_registry</class>
    <class kind="class">sc_core::sc_phash</class>
    <class kind="class">sc_core::sc_phash_base</class>
    <class kind="class">sc_core::sc_phash_base_iter</class>
    <class kind="class">sc_core::sc_phash_iter</class>
    <class kind="class">sc_core::sc_plist</class>
    <class kind="class">sc_core::sc_plist_base</class>
    <class kind="class">sc_core::sc_plist_base_iter</class>
    <class kind="class">sc_core::sc_plist_iter</class>
    <class kind="class">sc_core::sc_port</class>
    <class kind="class">sc_core::sc_port_b</class>
    <class kind="class">sc_core::sc_port_base</class>
    <class kind="class">sc_core::sc_port_registry</class>
    <class kind="class">sc_core::sc_ppq</class>
    <class kind="class">sc_core::sc_ppq_base</class>
    <class kind="class">sc_core::sc_prim_channel</class>
    <class kind="class">sc_core::sc_prim_channel_registry</class>
    <class kind="class">sc_core::sc_process_b</class>
    <class kind="class">sc_core::sc_process_handle</class>
    <class kind="class">sc_core::sc_process_host</class>
    <class kind="class">sc_core::sc_process_monitor</class>
    <class kind="class">sc_core::sc_pvector</class>
    <class kind="class">sc_core::sc_report</class>
    <class kind="class">sc_core::sc_report_handler</class>
    <class kind="class">sc_core::sc_reset</class>
    <class kind="class">sc_core::sc_reset_target</class>
    <class kind="class">sc_core::sc_runnable</class>
    <class kind="class">sc_core::sc_scoped_lock</class>
    <class kind="class">sc_core::sc_semaphore</class>
    <class kind="class">sc_core::sc_semaphore_if</class>
    <class kind="class">sc_core::sc_sensitive</class>
    <class kind="class">sc_core::sc_sensitive_neg</class>
    <class kind="class">sc_core::sc_sensitive_pos</class>
    <class kind="class">sc_core::sc_signal</class>
    <class kind="class">sc_core::sc_signal&lt; bool, POL &gt;</class>
    <class kind="class">sc_core::sc_signal&lt; sc_dt::sc_logic, POL &gt;</class>
    <class kind="class">sc_core::sc_signal_in_if</class>
    <class kind="class">sc_core::sc_signal_in_if&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_signal_in_if&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_signal_inout_if</class>
    <class kind="class">sc_core::sc_signal_resolved</class>
    <class kind="class">sc_core::sc_signal_rv</class>
    <class kind="class">sc_core::sc_signal_write_if</class>
    <class kind="class">sc_core::sc_simcontext</class>
    <class kind="class">sc_core::sc_spawn_object</class>
    <class kind="class">sc_core::sc_spawn_object_v</class>
    <class kind="class">sc_core::sc_spawn_options</class>
    <class kind="class">sc_core::sc_spawn_reset</class>
    <class kind="class">sc_core::sc_strhash</class>
    <class kind="class">sc_core::sc_strhash_iter</class>
    <class kind="class">sc_core::sc_thread_process</class>
    <class kind="class">sc_core::sc_throw_it</class>
    <class kind="class">sc_core::sc_throw_it_helper</class>
    <class kind="class">sc_core::sc_time</class>
    <class kind="struct">sc_core::sc_time_params</class>
    <class kind="class">sc_core::sc_trace_file</class>
    <class kind="class">sc_core::sc_trace_file_base</class>
    <class kind="struct">sc_core::sc_trace_params</class>
    <class kind="class">sc_core::sc_unwind_exception</class>
    <class kind="class">sc_core::sc_user</class>
    <class kind="class">sc_core::sc_vector</class>
    <class kind="class">sc_core::sc_vector_assembly</class>
    <class kind="class">sc_core::sc_vector_base</class>
    <class kind="class">sc_core::sc_vector_iter</class>
    <class kind="class">sc_core::sc_vpool</class>
    <class kind="struct">sc_core::sc_writer_policy_check</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_MANY_WRITERS &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_ONE_WRITER &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_UNCHECKED_WRITERS &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check_delta</class>
    <class kind="struct">sc_core::sc_writer_policy_check_port</class>
    <class kind="struct">sc_core::sc_writer_policy_check_write</class>
    <class kind="struct">sc_core::sc_writer_policy_nocheck_port</class>
    <class kind="struct">sc_core::sc_writer_policy_nocheck_write</class>
    <class kind="struct">sc_core::scoped_flag</class>
    <class kind="class">sc_core::vcd_T_trace</class>
    <class kind="class">sc_core::vcd_trace_file</class>
    <class kind="class">sc_core::wif_T_trace</class>
    <class kind="class">sc_core::wif_trace_file</class>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>sc_in_clk</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af5208f532b3924703b4e2dd0bd2a42c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>sc_inout_clk</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a54aa71ddcb9b5c69dc49805ffd16f432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_out&lt; bool &gt;</type>
      <name>sc_out_clk</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5c45cffaf8b2cf0d5bbb2c0f7def6991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; sc_event_queue_if, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>sc_event_queue_port</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ace3b678568fd0551232ea189d8bad734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; sc_trace_params * &gt;</type>
      <name>sc_trace_params_vec</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a067812813796ef57cedc7d4639837f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void()</type>
      <name>sc_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aef08e4f9c2a6544330f1ae8edcc03578</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>sc_cor_pkg_qt</type>
      <name>sc_cor_pkg_t</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57ab3d3104d7157c2c6f43e6ffa53e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_event_expr&lt; sc_event_and_list &gt;</type>
      <name>sc_event_and_expr</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>adf9ec2914d09ed71a42fe16b0ef2bc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_event_expr&lt; sc_event_or_list &gt;</type>
      <name>sc_event_or_expr</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>adec71d2c2ad4f26ae5492d164fb6c04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_module</type>
      <name>sc_channel</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af303b578693eec7ce3af9499416f6857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_module</type>
      <name>sc_behavior</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a21a2932d7b876e0312e0616bc16455cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>class sc_cthread_process *</type>
      <name>sc_cthread_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a12cf2d7e3f6fa06b86b6a787eecdeb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>class sc_method_process *</type>
      <name>sc_method_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a241f0ad0f913c222aa11123bdc0ec330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>class sc_thread_process *</type>
      <name>sc_thread_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a624b4003393c71616779c6342b40c076</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(sc_process_host::*</type>
      <name>SC_ENTRY_FUNC</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3c3c6a60b0462a2cb00c7c294417c02e</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>sc_process_b</type>
      <name>sc_process_b</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a85f3e5fe082e73bd7888c38a70072779</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_plist&lt; sc_process_b *&gt;</type>
      <name>sc_process_list</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae81cf49b79d92ac54244c55cf6f89716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const sc_curr_proc_info *</type>
      <name>sc_curr_proc_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7c1a29da0f39e50b4a5921b92584de49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>sc_plist_map_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af9c90b2747ac7f87ccb924c19644ed21</anchor>
      <arglist>)(void *data, void *arg)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CFT</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aafa116a3fc5bfb5e04997dc15762b3a1</anchor>
      <arglist>)(const void *, const void *)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned</type>
      <name>sc_actions</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7ddb1a732ada16a5c04854b19a8e3442</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::exception</type>
      <name>sc_exception</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7f25767d6c84206b61ee6c80477e3b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>sc_report_handler_proc</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acc0d7597d9312ec973a88912cd1f6781</anchor>
      <arglist>)(const sc_report &amp;, const sc_actions &amp;)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_port_policy</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ONE_OR_MORE_BOUND</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9ebae5eac58d624fbaafa84db6b644cdea0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ZERO_OR_MORE_BOUND</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9ebaa88a02b59f165cc6c7526bd7322a68fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ALL_BOUND</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9eba50b2c6de5b4b9d719beb54cf213ff205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_writer_policy</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ONE_WRITER</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607a3e4e04e6ed61133348c6f4a8d0131d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MANY_WRITERS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607abfdd1eba847a6183ab527d3f51c543f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNCHECKED_WRITERS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607a9bd426068dd960793db998491616aa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_curr_proc_kind</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NO_PROC_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a3da47e1b40676e185c64e09ca47f2b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_METHOD_PROC_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045ac8e76cc55a0ad8061121cd1e78f947c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_THREAD_PROC_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a65c7898e756af3c6eb086fe2a2d14abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CTHREAD_PROC_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a8a9b185b1d0a071b20355f9593e86ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_descendant_inclusion_info</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NO_DESCENDANTS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298aaf9243a80d08aa59c1ee5689a99747af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INCLUDE_DESCENDANTS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298af29b3ba60742a626758f93eaabb1d895</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INVALID_DESCENDANTS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298afc70e35380bb92b642ccb41a406d9d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_stop_mode</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP_FINISH_DELTA</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38a40acc4c550f4e877e25384256ae0be97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP_IMMEDIATE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38ad6c67dddbb72436a264adc5c77049b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_starvation_policy</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_EXIT_ON_STARVATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0a5720eaef89e899fdd4dafc6a724bf993</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RUN_TO_TIME</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0a1812ba80b3bc5df8a28e6c4f11518aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_status</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNITIALIZED</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a30e52f9c3f6f99e642c809def0009b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ELABORATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ab3bf1ea23134285c41c66dbfd2c1e11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BEFORE_END_OF_ELABORATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3acf77174ce41f4178f3c7cb06f56aa930</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_ELABORATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a2f2a69ac781207a71385a11a2296fbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_START_OF_SIMULATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3afae4c033c34efff45159278010c1cb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RUNNING</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ac842e49e579b5219ef5e665a9b5ce0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PAUSED</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ada46de21f2252ddd4c666a8d8a4b509b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOPPED</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ac64b65b3429b2399634aed07c855a45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_SIMULATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a4e8683788dcc245aada3e65011b2991f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_INITIALIZATION</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3af14cda6865356591c5b6cba4668a5dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_UPDATE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a8a1143202208f041a4088a576f419a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BEFORE_TIMESTEP</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a237f8c759d3fbe8eac7848b84d0d8000</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STATUS_LAST</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a1e74ceeda601128c3bfc5fdad9a60561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STATUS_ANY</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a7218b1d4f9ea285269cbda69edfd42c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_time_unit</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a82936f1ffacbf4a6d0619b2287692909</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a28dbfded11d1736805d78b0d0601d636</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4afa9bd86f75f123e8c021a200fd6eb491</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_US</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4aab388fe69d39f9f2f6a68f83077eac06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MS</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a01245e9a28c1e547decd676b85523d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SEC</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a7ad0c5cbf9ee837e939f01be229cab1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_severity</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INFO</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ead2bd3c618cb02608fcdbdf26e0a63675</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WARNING</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ead51483b845b42e87825f2c71f12c67d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ERROR</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ea5ba5d6acf68a05a0122ca2da147d2b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FATAL</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0eacf1a7aa6c4aa03be39ee308908ff616e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MAX_SEVERITY</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ea1ea1bacdd4addc7ec80fc2caf747ad6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_verbosity</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NONE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a34c3f85e038acaba65da0eed4126cd36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LOW</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a46dcccc49ff8b0f4faf102a307456253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MEDIUM</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a1a3fe57ec4b6e8032d7288ee33be8ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HIGH</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a3b051130461aff5cb676bc4021f3d859</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FULL</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378ad1ec5d4169b769a4f3aa426cb9881206</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEBUG</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378ac3d8a770ce994c79971af0e3498e5457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNSPECIFIED</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba0a482c78cbe2d8c84d0b34021d156f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DO_NOTHING</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba43247b6fdd82197acb4fe74f0edd96d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_THROW</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba3ff96e0395a08f00834b49a2e5532658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LOG</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba105c183473970696920dd006207f7973</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DISPLAY</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dbaf28c4eba216be43a0772a075e24e7878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CACHE_REPORT</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba7b2ca6fedcfd0c3506ec549d224b83c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INTERRUPT</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dbab3eb6c04af237fe0d7b4bf9b2e009164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba3d8a6502175008e463fa4232e5f4cfc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ABORT</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ded5583c5ab309dbe72dafc729674dba200a23eb4070364a2de403438930226a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a239555553fc6f94ec58b1bd383819dee</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fifo&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_warn_port_constructor</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa5b6b7aa881c30abca8d17124b4ed9be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_get_data_ref</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a96e642e5b93b3c418c0adac8c6f3b8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_get_new_value</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aba9c2f686011cc135876ed6c64a6bd37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0ef5212d161928f6dfdd771e8c69a13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event *</type>
      <name>sc_lazy_kernel_event</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6509313db69d4e3fd2e0413f5a9102f3</anchor>
      <arglist>(sc_event **, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac164e408532f417d670050a11648e331</anchor>
      <arglist>(::std::ostream &amp;os, const sc_signal&lt; T, POL &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_add_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa0981e00af068f7cdd869436eaecbcb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa921826a294bfcc3bbec6b1b8c9a9b54</anchor>
      <arglist>(::std::ostream &amp;os, const sc_in&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae4bc619e16ffd3575e02ac9ab7dd8457</anchor>
      <arglist>(::std::ostream &amp;os, const sc_inout&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a63e743f63156d59271decb26ae3d4475</anchor>
      <arglist>(sc_trace_file *tf, const sc_in&lt; T &gt; &amp;port, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae6d69fa45bef996464ff890f5ce29b78</anchor>
      <arglist>(sc_trace_file *tf, const sc_inout&lt; T &gt; &amp;port, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_signal_invalid_writer</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a90e74ffa9777099a68f0fcc6c20230bc</anchor>
      <arglist>(sc_object *target, sc_object *first_writer, sc_object *second_writer, bool check_delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>halt</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa2bff719f3e3d3cddf849609835e6a33</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2b347007e37cc19ff3bf85ad6ac7cc05</anchor>
      <arglist>(int, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_notify_time_compare</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae7c7c83444a1845f3e6770a119a78302</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a762b620af35370b37c72768033149954</anchor>
      <arglist>(sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6a0b7eb2185b932dd25cb7501e09a53a</anchor>
      <arglist>(const sc_time &amp;t, sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a91906d71afc4d3c5db0eff773a441beb</anchor>
      <arglist>(double v, sc_time_unit tu, sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0a701f4df07d5830536f30d8448a37ac</anchor>
      <arglist>(sc_event_or_expr expr, sc_event const &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abb30e458bee873a3c34a8ad76626c2a8</anchor>
      <arglist>(sc_event_or_expr expr, sc_event_or_list const &amp;el)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af00461ffb0e10200b7ef965c1772074f</anchor>
      <arglist>(sc_event_and_expr expr, sc_event const &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a017de5c3cc45f92449aa72bfc0055fde</anchor>
      <arglist>(sc_event_and_expr expr, sc_event_and_list const &amp;el)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aabd066bb337994094ef03529230382f5</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function">
      <type>sc_report *</type>
      <name>sc_handle_exception</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af1287566ec137f1171e9b3ef519f5649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_elab_and_sim</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>afb25c96e28f6b8d89eb65ffd8f78420c</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_argc</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1c4aefc79b57cb5228247dce6920b929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *const  *</type>
      <name>sc_argv</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a93910b8a9898df3050a66454d46dbf53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_method_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa27d4cc22d2deb63c6c43560dfd1b09d</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_cmethod_cor_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3eb1b48e1c3d642e474067e0a4f30ed6</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aef4a18cdb772e370b81562b77b79d09b</anchor>
      <arglist>(sc_method_handle, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a527f764a707fee96e78709ce773b63b5</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0b1b4af9c1331d084902c50243b5bd2d</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a977da790be235a4570df32d91bb65efd</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7bbad4fa37276cb1920a4775d0cbe046</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a99c04fca269df4ec0dbc3ce88245a1b4</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>abb03bcce9b0663645a91ab36cb83a424</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a121dda9aa51107b94569845cb9607144</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a103650be1249b0a56f310023cbf44328</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>sc_module *</type>
      <name>sc_module_dynalloc</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a64af8d26ef0ea3c9c859bc07988ffa0e</anchor>
      <arglist>(sc_module *)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>sc_get_parent</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acf69826489ad31814605c99418ffef08</anchor>
      <arglist>(const sc_object *obj_p)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_gen_unique_name</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acfe7915935d5f15045d5d3b3c11c3819</anchor>
      <arglist>(const char *, bool preserve_first)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_get_current_process_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6ca888c2e4285ec4e03a3018ba2100c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a196d815508abe91dd05e3885490872e3</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad36cce03f17ea25819292d3124b0ddb3</anchor>
      <arglist>(sc_thread_handle, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a427c55e6f664fa62ad98d4bf31c190ec</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2fae36ee9e3dedac84dcedba1b46fb6a</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aac3300068b2dca5cacbd758056bd2248</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_get_last_created_process_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a39bcb1ae848a339870b1836c57cbcad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4059f598479ff4d935378db16d65fdbd</anchor>
      <arglist>(std::ostream &amp;os, const sc_reset_target &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_stop_mode</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae2f496f075f6b529167ae3cc01c8c4ce</anchor>
      <arglist>(sc_stop_mode mode)</arglist>
    </member>
    <member kind="function">
      <type>sc_stop_mode</type>
      <name>sc_get_stop_mode</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aee38854f1cb968e5bde827c8b5cdb8b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a936188d8e1f8a8c32441a0ae23f8c2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2b6b88d4ec7805cc7b2655d2cafc37f1</anchor>
      <arglist>(const sc_time &amp;duration, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae92d723099406df12a7b68146e94bf3f</anchor>
      <arglist>(int duration, sc_time_unit unit, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ade235733e6612dc6b2f6ebb7fc9a4b7b</anchor>
      <arglist>(double duration, sc_time_unit unit, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_stop</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0e04db2bace88f9fc5b303fef63c2b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::uint64</type>
      <name>sc_delta_count</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a10a9d634e05cdf1b4bce4da664791c93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>sc_get_top_level_events</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aaff5fb0604167d69b663a980440b6112</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>sc_get_top_level_objects</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a9e2db9ba4c5fe75d4e15f5a548deef64</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_is_running</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac58f07d42225f2a52b21d0836c0354f5</anchor>
      <arglist>(const sc_simcontext *simc_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_pause</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad0798c182606189eac02afc1ad10a133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_end_of_simulation_invoked</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3967acdfb038df2b85c0691fcfe90000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_start_of_simulation_invoked</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a01adc2d0e5e2256882dae9cbf8c34454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_time_resolution</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a062fc9289ececea69292879f0d7082dd</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>sc_get_time_resolution</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad4f53ba4501a95d071003d17a82c8dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_default_time_unit</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8981054f1ab75524c02222f2440f89e7</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>sc_get_default_time_unit</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>acdc2a9970e6f3adbbc4cf98dabf60ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_pending_activity_at_current_time</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad70697ef21427fd69faa4184bd6749ce</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_pending_activity_at_future_time</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3dc9dc634d932155942254cbf47ac345</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>sc_time_to_pending_activity</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0d410a1cf12f8485827f7361f97ee162</anchor>
      <arglist>(const sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>sc_get_curr_simcontext</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a84d407a02a02ab5bc1ce70aacfca86c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_status</type>
      <name>sc_get_status</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2676f7bf4be873cb57ef2605d7b634a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>sc_get_current_object</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa40987e3a3da0a7a1141262d8da48318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_b *</type>
      <name>sc_get_current_process_b</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a167a87a89330c182bae092147195f18f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_b *</type>
      <name>sc_get_curr_process_handle</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aea759233a4c8cf2fe61a287193f77400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_kind</type>
      <name>sc_get_curr_process_kind</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8299a644726c996dc11fed98ed262e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_get_simulator_status</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a036350c291eda58610eda6538430b331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_random_seed</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae0af7405a9fd5281c56adeafe3e395b3</anchor>
      <arglist>(unsigned int seed_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_initialize</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a60ff96ee3879fd6897129034171d4114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>sc_max_time</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5e2882df2255b6161790d0b4b9e744a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>sc_time_stamp</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa548ef3d6a2b67db9556f636a2272eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sc_simulation_time</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8edc015355f4220ae0a90a3b4413a78c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event *</type>
      <name>sc_find_event</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6ca06edf4b05d9e43d33ad36f6556f92</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>sc_find_object</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>affc1ae62cab5f010d9339adade444ab4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_is_unwinding</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>add54ac2dff4785ec01c826320c25185a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_pending_activity</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac6db6f271e38b140921cda6313724ee1</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_hierarchical_name_exists</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab033fdacc5758a6fdbf78e4df1d7667b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_get_current_process_name</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a89f8efd882968ca4aeb935c550dbf1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_defunct_process_function</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ade1906e695e044cfc069e7c535ead2e6</anchor>
      <arglist>(sc_module *)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_spawn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab979b26b209b5464e7c025fea8e4625b</anchor>
      <arglist>(T object, const char *name_p=0, const sc_spawn_options *opt_p=0)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_spawn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af3beab799c1bd0cd058697eef6ebb935</anchor>
      <arglist>(typename T::result_type *r_p, T object, const char *name_p=0, const sc_spawn_options *opt_p=0)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a24fd06c1ba1ea96eeb15a844beb80b82</anchor>
      <arglist>(std::ostream &amp;, sc_status)</arglist>
    </member>
    <member kind="function">
      <type>sc_cor *</type>
      <name>get_cor_pointer</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a740d0cdd700fe0c837cfd607d762fc17</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a026172c18ec176a6277785d0b8f26cc5</anchor>
      <arglist>(sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1b081771b9d1aa29b009fb2a63db3433</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af116e07497028a8d8ca25d65ff81d92d</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5a7d5deac8326b0bb9911d6182276a91</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad8246aa634bb2dca008e1367415a9c08</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aff808cdea2dac477c072855bca9653ff</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a30331b4626ed52aec9428dd928a5e08b</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac7c40d73354d3d1152c0643c0d8377e6</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator+</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a19207d492eb2a49a0b61446a8ad44c67</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator-</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aa8b52f7f80825c11259e3c32cba2a060</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator*</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac2baaa11ab74dbf5dad625c7f55b06d2</anchor>
      <arglist>(const sc_time &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator*</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae1783e45a079ecaf4baf9dc723027473</anchor>
      <arglist>(double, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator/</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad126bd957eaa0d9acddea1f492a93c96</anchor>
      <arglist>(const sc_time &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator/</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a78cd7c9688e6e33d887ebc6eba99911e</anchor>
      <arglist>(const sc_time &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab566bfaf41e1dfb3c6e2b7808cc1e3ac</anchor>
      <arglist>(::std::ostream &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator%</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a46f6240650d61529db6c80c69bd5c4d1</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_copyright</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a16dc8178b7cc30bde52c1e3c2ed3f80e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_release</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8944b7ed28ccf7cf4a8a43b92f1af6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_version</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a50f6283a34599949ac367bdbf1f1b439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SC_API_VERSION_STRING&lt; &amp;SC_DISABLE_VIRTUAL_BIND_CHECK_ &gt;</type>
      <name>api_version_check</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad38cf4e81e9c13e25a13d1aceb99a5f7</anchor>
      <arglist>(SC_DEFAULT_WRITER_POLICY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a60285bf4ce248d5905f608e7d5e02e27</anchor>
      <arglist>(double v, sc_time_unit tu, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab21ea1eac4608ebe607c6afcd206cb6c</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a3c4909d90637feefcade33e815f35ea2</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab5cb1e5de8a3046c264da945a26e72e9</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a536e98fcc1a53dd2f8559477a8f14ae8</anchor>
      <arglist>(double v, sc_time_unit tu, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac11fee1464bb9585d3eb155b9e5f7af2</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab5f15a19127f86a11ec8ce53b5b6f746</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2c716b39c2938d18f794381d90e4e321</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_set_location</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a74ae08b71f3a8c5892bef174d3313788</anchor>
      <arglist>(const char *, int, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8eb2eab2fbd53ff7629dda17ad21d6a3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a420a157c85c53e70074276159eb2ad8c</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aea926b0a2179ad40a69f40554adfd9c3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2120409e9ee4dfa88052f3fda02540af</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6513c96214f62eb568bff8ace2433ab2</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; T &gt; &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a17607e52b3489cd247bd9920b829f0d4</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; T &gt; &amp;object, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5da00fcea4c0dd3cb85da7770d6db005</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; char &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aaf0ca5878a0acc084f079fed32f117e5</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; short &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a625a687fe68d83ccc1d9996aa15cbeeb</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; int &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1c1dd0c5d37b879380ebb6d57aacc967</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; long &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab4d3ada24284ac33a240f8b7e2d211b8</anchor>
      <arglist>(sc_trace_file *tf, const unsigned int &amp;object, const std::string &amp;name, const char **enum_literals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a9401a94c6e261e80ec7b002ed9f93e82</anchor>
      <arglist>(sc_trace_file *tf, const void *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace_delta_cycles</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a30e07407566de421c23e600814922a05</anchor>
      <arglist>(sc_trace_file *tf, bool on=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_write_comment</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad0be7fff8be5c0371451455554e4de7a</anchor>
      <arglist>(sc_trace_file *tf, const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tprintf</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad83e17759626f47a41e0f4af5c319ed4</anchor>
      <arglist>(sc_trace_file *tf, const char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>sc_trace_file *</type>
      <name>sc_create_vcd_trace_file</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a810d9f37a4dbcad823b55f3499cef254</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_close_vcd_trace_file</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab0f0a1f720877b9133c1a6ec7bb33d07</anchor>
      <arglist>(sc_trace_file *tf)</arglist>
    </member>
    <member kind="function">
      <type>sc_trace_file *</type>
      <name>sc_create_wif_trace_file</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a2a95a065235c80ae4a613c6e7eee92d2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_close_wif_trace_file</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a61d706519e01f274ce696dfae9e96cba</anchor>
      <arglist>(sc_trace_file *tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>double_to_special_int64</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a25639887ed1be3542f67df225f24f854</anchor>
      <arglist>(double in, unsigned *high, unsigned *low)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>localtime_string</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7da4fe780322ecaba5ee4ec9e8e6caa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>default_int_hash_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7d424dca828ee6f1346eeae501953f44</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>default_ptr_hash_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a94873712b5d6ebc811c5eb4e6b2a9447</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>default_str_hash_fn</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae85012e2048890912d1b6412add44846</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_strhash_cmp</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a10640abf5b740e538fbdc686865d28e9</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_strhash_kfree</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab4b92a252d1dba030c4c7b14c4a3d514</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>sc_strhash_kdup</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a4c889ac7b1301b4175eabe1ce896d101</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>sc_report_compose_message</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8dbf2ad39cac59cc29d8c7b2e4aedcda</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_report_close_default_log</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a54f4db91eb8da5423ded27b0268a0c5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_interrupt_here</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a6b42bd460037adb6926f4f62782162fe</anchor>
      <arglist>(const char *id, sc_severity severity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_stop_here</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8014b9e89fec310722f26bb3cb098dcd</anchor>
      <arglist>(const char *id, sc_severity severity)</arglist>
    </member>
    <member kind="function">
      <type>Container::iterator</type>
      <name>sc_vector_do_bind</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1c4ee3c22957c64e76ce3349ee28d300</anchor>
      <arglist>(Container &amp;cont, ArgumentIterator first, ArgumentIterator last, typename Container::iterator from)</arglist>
    </member>
    <member kind="function">
      <type>Container::iterator</type>
      <name>sc_vector_do_operator_paren</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5ed596c989c1ed678c36ebdb978f8c5d</anchor>
      <arglist>(Container &amp;cont, ArgumentIterator first, ArgumentIterator last, typename Container::iterator from)</arglist>
    </member>
    <member kind="function">
      <type>sc_vector_assembly&lt; T, MT &gt;</type>
      <name>sc_assemble_vector</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a24150599b83f189ede71b50e33a438b4</anchor>
      <arglist>(sc_vector&lt; T &gt; &amp;vec, MT(T::*ptr))</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_REGISTER_ID_FAILED_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab183a60857b8bd816e9d26cad6403498</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const sc_dt::sc_logic_value_t</type>
      <name>sc_logic_resolution_tbl</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aca97e9d0f8adab9fd13a73c6a5f4cfac</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable">
      <type>sc_byte_heap</type>
      <name>sc_temp_heap</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad3584a081bd53fca85a4bfaa07ca0665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_STACK_SIZE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a175996e4e020a8e63bde319c66da2d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_event</type>
      <name>sc_non_event</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a214447cbe6b7db86833ef2bba63fd7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_bind_proxy</type>
      <name>SC_BIND_PROXY_NIL</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a1a8a27f587d014965b7b767736abeae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_HIERARCHY_CHAR</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ab7f69e2a7adbc571158670cf88bcd11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sc_enable_name_checking</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ada1ba7c0f47b3fc2958d9b104600f861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sc_allow_process_control_corners</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>adfebaf9e7dbe988e172e607fc6ce17df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_simcontext *</type>
      <name>sc_curr_simcontext</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aac60a9b1d65dc46b984fee0bbdd22bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_simcontext *</type>
      <name>sc_default_global_context</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a5fd38fb44941b0b022d1372ff0030757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_OK</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a00a38e60f2d1fa6e159ca47a2fa89566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_ERROR</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a270935f762cca1d68a62bec14131ee43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_USER_STOP</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a223357780185a4cef86c12e316537713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_time</type>
      <name>SC_ZERO_TIME</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a17504cd45f4f8e89da1c29257d8ead47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>sc_version_major</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a388d8a839e86f876bea040a3fcf5aba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>sc_version_minor</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ac1a3cf6b37320141a15c68817a7ef86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>sc_version_patch</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ad73dbeb9be85c530f2f7de66db20248c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_version_originator</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a9898bf29619c77aca48ce292819bda77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_version_release_date</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a7b789a415fa662f7fca1ed48fe1c4401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_version_prerelease</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a8d88927661febec9589c464ca7132095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>sc_is_prerelease</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a94552db2169d7d23179900158b4af07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_version_string</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae52a4e76d9f056e18b2a63e0e2544c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>sc_copyright_string</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af555ff2f3023c534c9372bc2b82593e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DISABLE_VIRTUAL_BIND_CHECK_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>aee57fdd780a81b8f362a20f8cd7dbf1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHASH_DEFAULT_MAX_DENSITY</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a04dc5eeb372ac5295a594d6bc09fcb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHASH_DEFAULT_INIT_TABLE_SIZE</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a585c1cd718b9ed095cf31af650982dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>PHASH_DEFAULT_GROW_FACTOR</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a764fb7f2a1814c7ca02a8ed6101dc470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>PHASH_DEFAULT_REORDER_FLAG</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>ae47549bba2ac4b7f9bd73c198718deee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_UNKNOWN_ERROR_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a382ee4ee3dfa6fe3aabb6bd136264c8b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_WITHOUT_MESSAGE_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>af6b3c3ec5fde4421e6415c7bb8716f80</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_NOT_IMPLEMENTED_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a017093c56818abb80a3c03560407d57e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_INTERNAL_ERROR_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a779ddeac12e1c0a3df541b194c448b5c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_ASSERTION_FAILED_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>afc6703a3c47d21f672cb4fab5a5031e5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_ID_OUT_OF_BOUNDS_</name>
      <anchorfile>a00546.html</anchorfile>
      <anchor>a0de6ce1fac96e97db4bdd2fb24468fc2</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sc_core::sc_meta</name>
    <filename>a00548.html</filename>
    <class kind="struct">sc_core::sc_meta::is_const</class>
    <class kind="struct">sc_core::sc_meta::is_const&lt; const T &gt;</class>
    <class kind="struct">sc_core::sc_meta::is_more_const</class>
    <class kind="struct">sc_core::sc_meta::is_same</class>
    <class kind="struct">sc_core::sc_meta::is_same&lt; T, T &gt;</class>
    <class kind="struct">sc_core::sc_meta::remove_const</class>
    <class kind="struct">sc_core::sc_meta::remove_const&lt; const T &gt;</class>
    <class kind="struct">sc_core::sc_meta::remove_special_fptr</class>
    <class kind="struct">sc_core::sc_meta::remove_special_fptr&lt; special_result &amp;(*)(T) &gt;</class>
    <class kind="struct">sc_core::sc_meta::special_result</class>
  </compound>
  <compound kind="namespace">
    <name>sc_dt</name>
    <filename>a00547.html</filename>
    <class kind="union">sc_dt::ieee_double</class>
    <class kind="union">sc_dt::ieee_float</class>
    <class kind="class">sc_dt::sc_bigint</class>
    <class kind="class">sc_dt::sc_biguint</class>
    <class kind="class">sc_dt::sc_bit</class>
    <class kind="class">sc_dt::sc_bitref</class>
    <class kind="class">sc_dt::sc_bitref_r</class>
    <class kind="class">sc_dt::sc_bv</class>
    <class kind="class">sc_dt::sc_bv_base</class>
    <class kind="class">sc_dt::sc_concat_bool</class>
    <class kind="class">sc_dt::sc_concatref</class>
    <class kind="class">sc_dt::sc_concref</class>
    <class kind="class">sc_dt::sc_concref_r</class>
    <class kind="class">sc_dt::sc_context</class>
    <class kind="class">sc_dt::sc_fix</class>
    <class kind="class">sc_dt::sc_fix_fast</class>
    <class kind="class">sc_dt::sc_fixed</class>
    <class kind="class">sc_dt::sc_fixed_fast</class>
    <class kind="class">sc_dt::sc_fxcast_switch</class>
    <class kind="class">sc_dt::sc_fxnum</class>
    <class kind="class">sc_dt::sc_fxnum_bitref</class>
    <class kind="class">sc_dt::sc_fxnum_fast</class>
    <class kind="class">sc_dt::sc_fxnum_fast_bitref</class>
    <class kind="class">sc_dt::sc_fxnum_fast_observer</class>
    <class kind="class">sc_dt::sc_fxnum_fast_subref</class>
    <class kind="class">sc_dt::sc_fxnum_observer</class>
    <class kind="class">sc_dt::sc_fxnum_subref</class>
    <class kind="class">sc_dt::sc_fxtype_params</class>
    <class kind="class">sc_dt::sc_fxval</class>
    <class kind="class">sc_dt::sc_fxval_fast</class>
    <class kind="class">sc_dt::sc_fxval_fast_observer</class>
    <class kind="class">sc_dt::sc_fxval_observer</class>
    <class kind="class">sc_dt::sc_generic_base</class>
    <class kind="class">sc_dt::sc_global</class>
    <class kind="class">sc_dt::sc_int</class>
    <class kind="class">sc_dt::sc_int_base</class>
    <class kind="class">sc_dt::sc_int_bitref</class>
    <class kind="class">sc_dt::sc_int_bitref_r</class>
    <class kind="class">sc_dt::sc_int_subref</class>
    <class kind="class">sc_dt::sc_int_subref_r</class>
    <class kind="class">sc_dt::sc_length_param</class>
    <class kind="class">sc_dt::sc_logic</class>
    <class kind="class">sc_dt::sc_lv</class>
    <class kind="class">sc_dt::sc_lv_base</class>
    <class kind="struct">sc_dt::sc_mixed_proxy_traits_helper</class>
    <class kind="struct">sc_dt::sc_mixed_proxy_traits_helper&lt; X, X &gt;</class>
    <class kind="class">sc_dt::sc_proxy</class>
    <class kind="struct">sc_dt::sc_proxy_traits</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bitref&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bitref_r&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bv_base &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_concref&lt; X, Y &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_concref_r&lt; X, Y &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_proxy&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_subref&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_subref_r&lt; X &gt; &gt;</class>
    <class kind="class">sc_dt::sc_signed</class>
    <class kind="class">sc_dt::sc_signed_bitref</class>
    <class kind="class">sc_dt::sc_signed_bitref_r</class>
    <class kind="class">sc_dt::sc_signed_subref</class>
    <class kind="class">sc_dt::sc_signed_subref_r</class>
    <class kind="class">sc_dt::sc_string_old</class>
    <class kind="class">sc_dt::sc_subref</class>
    <class kind="class">sc_dt::sc_subref_r</class>
    <class kind="class">sc_dt::sc_ufix</class>
    <class kind="class">sc_dt::sc_ufix_fast</class>
    <class kind="class">sc_dt::sc_ufixed</class>
    <class kind="class">sc_dt::sc_ufixed_fast</class>
    <class kind="class">sc_dt::sc_uint</class>
    <class kind="class">sc_dt::sc_uint_base</class>
    <class kind="class">sc_dt::sc_uint_bitref</class>
    <class kind="class">sc_dt::sc_uint_bitref_r</class>
    <class kind="class">sc_dt::sc_uint_subref</class>
    <class kind="class">sc_dt::sc_uint_subref_r</class>
    <class kind="class">sc_dt::sc_unsigned</class>
    <class kind="class">sc_dt::sc_unsigned_bitref</class>
    <class kind="class">sc_dt::sc_unsigned_bitref_r</class>
    <class kind="class">sc_dt::sc_unsigned_subref</class>
    <class kind="class">sc_dt::sc_unsigned_subref_r</class>
    <class kind="class">sc_dt::sc_value_base</class>
    <class kind="class">sc_dt::sc_without_context</class>
    <class kind="class">sc_dt::scfx_ieee_double</class>
    <class kind="class">sc_dt::scfx_ieee_float</class>
    <class kind="class">sc_dt::scfx_index</class>
    <class kind="class">sc_dt::scfx_mant</class>
    <class kind="class">sc_dt::scfx_mant_ref</class>
    <class kind="class">sc_dt::scfx_params</class>
    <class kind="class">sc_dt::scfx_pow10</class>
    <class kind="class">sc_dt::scfx_rep</class>
    <class kind="class">sc_dt::scfx_string</class>
    <member kind="typedef">
      <type>sc_context&lt; sc_fxcast_switch &gt;</type>
      <name>sc_fxcast_context</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2bddc50e14b45cb480572d0b3991ab6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_context&lt; sc_fxtype_params &gt;</type>
      <name>sc_fxtype_context</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8b108248872f9934c328c5ca24729360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>word</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adef2a0396a836853f3db5ff1bff13543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>half_word</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0c8d5569edd76b5d46714bc543d80075</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_context&lt; sc_length_param &gt;</type>
      <name>sc_length_context</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6e98a92a91036ae4af6adde14ccdc33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad7f9b4978963cba9d617a37c385b228a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>small_type</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a24b5ab9d89d2201797c64885ed4a1495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>sc_digit</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac387c29028ace5ebdafd46a173a8146a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>int64</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7241d680b54f08c83418b8743a42b667</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>uint64</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0e509e6e05abf63a5c3f08a342e4cd91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::ios::fmtflags</type>
      <name>fmtflags</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2789e869da81040d303d767eca87589</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64</type>
      <name>int_type</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a91ee067e28f43380d62cc8656effe11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64</type>
      <name>uint_type</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa4830f7c702212e2450d5cda8603a21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::istream</type>
      <name>systemc_istream</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa41f37c54128db73b2bd0271d9653f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::ostream</type>
      <name>systemc_ostream</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a01d2d93f36664a8b8396e268cdfe0109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_logic_value_t</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_0</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1facf684ee264000f979e683d589578cb76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_1</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa3d94e65043b731e0c9d787b50e197caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_Z</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa312c0fda75290bb3115f0a6838a54e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_X</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa4a796d0647b5a2c459b8806f2df1c677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_context_begin</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NOW</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707ba1a2efdcd4a33cdc683c11659bb8388f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LATER</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707ba8c6efc38edcc0bb78fff64747e4ca724</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_enc</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TC_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021da7d25472237e7abeee4b1dfea810a6dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_US_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021da17061f9e684d33d50a972d1406500d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_q_mode</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a36e005cfebfe572beead8ac908a98a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721ab8065af719aa3b64fcb7e8b762777d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_MIN_INF</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a5a6dc4fabb906810d07b4988a3556306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_INF</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721ae54536bffed693c870ca369ec8105232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_CONV</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a3208a876fbd9d52d1d6831e597701fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TRN</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721aaceb6b9a67ca6b69bda017d5b85ad59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TRN_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a916ed5dda67312b52f23dc5e5b688ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_o_mode</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5ae2ac4621bb524bf811267c20a93cf663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a9770e01c1e895c56da0da5ae03b223f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT_SYM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a77ced946513ae051d4b02772a5266a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WRAP</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a1cb308125ec9f13dd2d00062d9821333</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WRAP_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a26ccb388310d8f37081295aa5c5c1273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_switch</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OFF</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9a4c634ecb88fc0afc63cc4a614c091c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ON</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9a9134bc2b049e2b99d40c2aa3ccbac6e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_fmt</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_F</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327ba279868695677057493ec01c302caf0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_E</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327baa4d9bb83f1d3f84d59edf29e5e20da30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_numrep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NOBASE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a57b0fc7080c8e8823dd373416e61e38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a307c54bef660788d5be06b7db68b7942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ab5bd29df600aa251432d9cf565e3969c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEC</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ae9985e111b26103887bc8cb856062d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a3bba378d8c598eaebcbfd61a3341413b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN_US</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a3f0b0a2200db8c111e7275278bac962c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a6b148eae66cb447584899b7b0b25e23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT_US</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a27b98a3dc7d893f39c987f846cd26ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a7422976e4f533f6c8989d33301ffbdb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX_US</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ac20afd6fc8d81e8c690b939a00319713</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a2269b5783b048c0d2c13abc7977c2e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CSD</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a1cec3b96584130b8fce5557f58cda822</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_sc_bit</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a555bb14795b3f339176ec331d1fc77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a670409225d70df53b3b5e5156a061ba6</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac521149d132e9c77a5d9029aa86344db</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a999b6968ffdbf89e68bbc87a952abe0d</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>not_equal</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab15929c97a4ca6b79389507b1451956c</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>operator~</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a169ed5ff8c337ad2edc51c89f1aa9760</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e1cba88964b069aefdb6ebb8835ebd9</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a867ee07d6d7728bc8596a45b51201f42</anchor>
      <arglist>(sc_bit &amp;r, const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6ce9f3734edb08795cb218253a697e32</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0469931a39446c07c588a8a421be57de</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3ec321516525f001bf7252e81552c8ab</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>b_and</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a317a689be435008162622e6800e313e6</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>b_or</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af803e94a717c2fb04bde9239894bac72</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bit</type>
      <name>b_xor</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2c9a301a7045bae3ddda330c288feb18</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1b4c0577a5a4a7da3932e0f2f1ac9236</anchor>
      <arglist>(::std::ostream &amp;os, const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae56a8d9181e7feac351b066c0935b69e</anchor>
      <arglist>(::std::istream &amp;is, sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e3f7242eecad15a60a526b1d882f278</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a87f1717a010b82dd120d0a86ec5f6acb</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6f41c8ef504546df2b46b612aa0c32be</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a71caac3c438813220653c56fa570c536</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac5ec8c247ab8dbd8f82be5e7bdaf6cd4</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a81419df3a1065a1170353258b1362946</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92d3d1f0771d4917f75f6b6d08971938</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e1ed21a3e562a385b10e27541a4f2ff</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41d8a0d4ca38da9c857a585a42857536</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af1d7f73744b5ed181a0cda52617a182a</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a622ac6b70d9b15affe6ec1ace4ca4d11</anchor>
      <arglist>(const char *, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a806af68b4a880703e0a1f31d0c5964cf</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad21a033bc55235fd111da0e3e7ff3089</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>accd4888776b108a28e148751f80c6016</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37b1006a00759b78587c8d40ea82ba39</anchor>
      <arglist>(bool, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7dfa6b058e6b1a337569e75474de10b3</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab237e358a7a2c8d7cf1e956da9987045</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4dfb2c146246c05c723d03c6ab55e924</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8091cf1dbf3bcc79cecadca66cdaf50</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad944deffdcce2f496fef7dc225c2290e</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab5a33b4fc1575ad7a1d3cc626e7d2463</anchor>
      <arglist>(const char *, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a188e57d8db8c17ba6966ca2ad6448d43</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6061aa9f64645617da66705d49b8b950</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab125fcbfbade15d7e648bb82cf7f3241</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9fbedd668353bb25b9caea6b21880f35</anchor>
      <arglist>(bool, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2ce6f30cd6cdf7f4c38735acfe59bc28</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a59f461d35dff3d7da3f8648edcce73d4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a21a209c08e0ebc711d71c56575733d81</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afa119536b99823db5fb6a1183a3ce844</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a717e2603f1dd59545fd1b7b0f1aaa8b6</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad4df1090c50ee5b904b05c09dbab6ef1</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af08909aeff30a5661212494681440693</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a586bd54dcb491a57486912417014a19e</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad6cf471335ec7d6ba7ae651baa801270</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a047a3bb2af3626b076ad1c27ba2ef238</anchor>
      <arglist>(const char *, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae3af376b87d812b3f269b5ea86fcbbe9</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99cb25216742e2c864cd4fc293527b40</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a80f1f1d0fb81d6901fe407e70cf0c53c</anchor>
      <arglist>(sc_bitref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa563106be42a11773739e0f21a2ccd2c</anchor>
      <arglist>(bool, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8d468d33c702dc2e4c10caed3d3bc979</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af757f4e100f6aa74341eba2141539c1e</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac2c496d6b7006850d61dc2f30924e65d</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6e34f9a9d83a96fed73178c440acfe40</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a02f728ecfbd50cedf37b4741baf3162d</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1abe4d79fded432cf6b57fa8698a5984</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abfd243168b956371f6885066f15c122b</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0fb49a14347e7a6ff894a0f0f1a979e9</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afb449abe5bd21cb19f251d3c1545a642</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8ad565a3a5135f40ddf4dcac2fc8ddc</anchor>
      <arglist>(const char *, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a384793e89dac342212b8f0e615dbe89f</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae68a8c9995924ab9b57a2e39330151fa</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4c2d9d2bf968fbb2d0ca4801ef23275c</anchor>
      <arglist>(sc_bitref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a049a019ee93fb316397ec930836b3056</anchor>
      <arglist>(bool, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5266b239d8e2c42a4c605ec903dde2f4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a087e36a8af762e470a69bceb2c92a0f5</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ef2fb54ca95e440ce61194b8da29e71</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56e1e9ef573549d9f661fbbc6f83b813</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a97f4042e2bfad31fbf01b6ee07a34e94</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a89cc2621afd6301d343848c00f1238f4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d07b7b210a7c22123a61a597a3203ed</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea2386292f7358617418de4954fd15d1</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06841ab562465bc0ef50937083b54c24</anchor>
      <arglist>(::std::istream &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab5a55f08f62f53ecd3030ac442f83799</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7762f6d94c5fc0e5d3ee70100ba48835</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1a17a497bbe7a7e47cae999637cb958d</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66f2f9773a2b549bd96316736fe77930</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a08081f739cf5286904aa703f34368076</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab9b022e3917c47a8794637d869da921f</anchor>
      <arglist>(const char *, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3cf85728b4a5fbca2432fce59f9a2fb</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d4a952f36b3da0854e68eb5306fc891</anchor>
      <arglist>(const sc_logic &amp;, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1f1eef971a95114816e10d9866762cf7</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afaa63a7bbabf6e35455b2a690236f086</anchor>
      <arglist>(bool, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a302d08f7807e43083b03f42327439d99</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7eb5a5ba70bf61752d80ef89f493abf2</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5116ef6772a191df1ce90339cf4cbd50</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a02ad8f45bdd3236a0c542c54e7f83dbb</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a00a69d1b94f6b303d586b758953024d7</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9b5d60e7345363d7623b2246f67256c</anchor>
      <arglist>(const char *, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8592cb9f249e9043697d4f9b3c467b73</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7158f591a5c538f13c747e11b21bb778</anchor>
      <arglist>(const sc_logic &amp;, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a534dcb835a4720bdd91eeaeb5cacf0e6</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a40365c424c1584678e218a29a785a5ce</anchor>
      <arglist>(bool, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0fc7962993db3d0e8b6f58aee2d1d14c</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a72473e2d13301e00a004d1f5db4e210e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9e8c763b1a48a1850696b0eff80f8112</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9cdaf405ff20a5dfbf2eb50423f967e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6620dd89349c47dd7f7cf82fd6b111bd</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9e87fcecd1e398ce33d732e2badc45cf</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc45c87d25c869670f0329fb5bb371f8</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a14fd6df1ba7bd561a7480145f19ce281</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe406dae5c319ea585830e4a1cfa936e</anchor>
      <arglist>(sc_subref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad4bc0d9f123e16cedd29a3e17e374e64</anchor>
      <arglist>(const char *, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a81d48a40f19d9dd18cd5eafa7073f83b</anchor>
      <arglist>(sc_subref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a558fa8c2eff0d9ebc1f9c8e6d6472c58</anchor>
      <arglist>(const sc_logic &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0b96272597c30fffbe060de69addf540</anchor>
      <arglist>(sc_subref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae1ec021063938b6c286593c2a3372f19</anchor>
      <arglist>(bool, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af64856ff14f5de2caf30a2e995c35831</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6810d3344f01425a832b22c77272ffc7</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a43206b4b80dcd311c3b5bcf1d311178a</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a811283a8ae707179b127c0da7b1f0775</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa365e53e5ec7237004d7d15a6fcb4c94</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6637834b50f88a16dd20b491aa13e029</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1212d11cd9c207329aa698c5b8d2a330</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac31f939147de43ee9d63dcb993d4c5c0</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a528c262ee46e1e1e4ba42c59848a21f3</anchor>
      <arglist>(sc_subref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad1a3f319b3e1bd169ff886c3e0cbc7d8</anchor>
      <arglist>(const char *, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a411f15827676bb160b9d04359a13e17e</anchor>
      <arglist>(sc_subref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5bee9e7b5cc2b9364d7433b2c6cb8737</anchor>
      <arglist>(const sc_logic &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a57659569d6ab1c7f5033116c142f3c08</anchor>
      <arglist>(sc_subref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a678e9a6a8c193a81a6143efb44608208</anchor>
      <arglist>(bool, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4a2c7126d0a4d686a071ce3a31ebc02f</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae9d19a7d0bcb151f9b400673ec7cdc05</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaad9649d241271db46fe10491c47d1a9</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88f9faad8c6e27fe2aa9e8928c187f92</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7fce1575881c89babc6022e720cc479e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad443b0bd7cf77e94269e3de7aee35ab5</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a69c9965b1d8767101762dcb6042216</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9be7ee0081f383e696a5e6392cf9396e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8238cdee498d604584a9b53dbf648e33</anchor>
      <arglist>(::std::istream &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9706834b530dd042d5ea750e769a57e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acabae9f6caca445a1990aba801a6231e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a10c08618f10cd89f9eec9270131593ad</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aee7e2c3b1eb664dac0a44ec6d09ae16a</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a400c70f73c82bb65c0b93473c6c6d5d0</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d284514176c13fa9b314d1186de90d1</anchor>
      <arglist>(const char *, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8e78ec7da94c5e58d58eeb6d3672cbd9</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3be49867a56f1f06b4525dad34a00855</anchor>
      <arglist>(const sc_logic &amp;, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a08c5462a7a0d1543ea08baad6f61a5c0</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2acbabfadfe10290256868d33ee0c24c</anchor>
      <arglist>(bool, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac4d617c8e9a9074ec2c456e1b3c92669</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3a541920fa37fbc8879a0027fba6626c</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab2f60b6abc2a67b6a29bc05b9971d9f7</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acae846ebbb35cafb437a20a0f30c5213</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad20d165ec30a6c85cdeb9af4ff182d19</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff3b50394ebc21692b65cec619599859</anchor>
      <arglist>(const char *, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae41f08b67af456094ade7f8e7bbd191d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5541b2f65c8f05deb8d41ac7c9bcbb49</anchor>
      <arglist>(const sc_logic &amp;, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d53307c625d3727944862a613770d8e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7596ccc6f508e56489a570ee3ee8b734</anchor>
      <arglist>(bool, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeaa4e7662edfbd3ae91c474e95a58382</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9520a280d48a0d4ee8287fbe4cd338b2</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af4026ad59c859fd0c389dafab0448560</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b7f491aec1f02765665d43024d29f35</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88965d7b9b2e9e96363d5d251e53a36d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa11cdd8b4824d62f9ac7b30585f48235</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7bab858ac27bda49bffc4e33fcbfd872</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67d3aa4c9f1721c094442ee864241a73</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a763c84ab67f2e9c65f1b7311ff8f9195</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3fd1efd1074fabf4b71f140b716e0a22</anchor>
      <arglist>(const char *, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf3c2ec104c6d7f54327d7a265926975</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8886cab28a21b7822951260da641abc</anchor>
      <arglist>(const sc_logic &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a64b5d6025508b41e2ae793b38c3c2528</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae60687edaca633da56393f5c466ec3de</anchor>
      <arglist>(bool, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37213a3b84647cb8f21242701fa6326d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8f5fb909db95eabb429c23783a344bce</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a21256602b22279850cd4a74333f73a25</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1bf94b308ac36794df41d3631a71ab66</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae70190d912d0ced7b8971adf63e00a11</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a073aa2b8b1b82bec42a2450260171952</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1235c8e0e0c323f26572612252255454</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adff391de87eb9b631cd77e770b4cbd34</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac4269641953c2ac9d8e85133f6c04ca2</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3d71ac5db88c59b7247fb9801347efd4</anchor>
      <arglist>(const char *, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeb45615effb16db3e1f333e63881ff9b</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c5b4e946e3547e415a1f5ed7da46a13</anchor>
      <arglist>(const sc_logic &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae709314167cfc7291475de5b7f8bdfc7</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab09e3dd5465e10bad7c6e155d35f8598</anchor>
      <arglist>(bool, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc1d62ff4990e9020f8228479239d50c</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac421f1b8303521e6e0b39744ec9fe840</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0c72151aa5ed9b4453fa3faad7f1470</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88cd16cf36f26b1250cd116c4a2f032f</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8d2c6b4cc478cb8a9394dad92cbeb701</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8f7915f4c0e3fe4d19446d796be3bf28</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af3c962512719144042afc26a018d5c8c</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acf2d1769ddcfddbdf44a35721a4feabd</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ace850df9217c0c1f70e86daac969f9db</anchor>
      <arglist>(::std::istream &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3f4ac6c2019b09892ef39a8361d92937</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a606053819c20bc655544e80ee21268f4</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae1b905aa7ca267e83118a38597dd8a4e</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a70d934f75442a579f512c3a6f66d1153</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a543a131e89dffdefa7285dd8144ac1dc</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a672c1005e61816ccc65c00f7a3fdce50</anchor>
      <arglist>(const char *, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a574450a7553b2e0083ebcecf58d907f8</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79e9609977cfc2e03ab39d181c0dc58c</anchor>
      <arglist>(const sc_logic &amp;, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a88d2d98f5e66f4dcb5291061d621f50f</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9048f5e66588f65c60e03db0ce42674d</anchor>
      <arglist>(bool, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae35c449a5094b9c31fd9c498ea094fe9</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac89e5d0df7a32dd6e8e0d7a73a47b6a1</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa0076b0ab9a5455bcf8ff44fe9a56971</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7469a7a18ec5a4f0434c2611f0e2e210</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf0cbad6b2d05f6a010af0bfc5cd75e8</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a75171853c5ffed35a5405158619a06c0</anchor>
      <arglist>(const char *, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f85cf25c9da5f0873809362fc628707</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8da755bd8659876bbd7f6f0a4fe83b38</anchor>
      <arglist>(const sc_logic &amp;, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d97866544c2ff4d568f6a231d208178</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99998f94c0ce6c32ad437dcede5726dd</anchor>
      <arglist>(bool, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6a45e924aa2dc4fe1c3cd075c53bce64</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9565ff98c386c059b8df66dc7837eb92</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4977209d2853d012169e7e34e58d1d25</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adc0e3e2d82a56b5e5117c704ecb29c7b</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7be267b5b8e5fb44342c5deb84efbc2f</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af38e0e17f61aaa7ce6f792657a5c361f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a821fd3959dd2b3b4a59dfca7a8bef0d7</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab0d9ba5ff6fe44e67ff911bbfea9a18e</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0440604d54a5ad4a078f8f65c63bc65</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a01052f8967da6e35cbf5bec2063b3c2b</anchor>
      <arglist>(const char *, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3fd795249e3789a74dd62b9ba53cd204</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c5fc5a94137adc1953d51fa053b3652</anchor>
      <arglist>(const sc_logic &amp;, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9f18e340a373e451fd5660361dbb6d81</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a731935abd59222ba54d861b8600e3a0e</anchor>
      <arglist>(bool, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d98d02b56cdf1df9f1e82941b30d122</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af35dbda5506312596382e165a40f5993</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad3659dc31eb662c4c9b930a9d1c7eee2</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a49b9e679d38f48d1ce66398b6c238a8a</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a075e5c65ddbe18ba7ad0cc41766b1784</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a340def548a6538874aec07155ddf9e11</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad1d043888f4221072b3c33a67d4aba09</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acbc563182ad467a798557e7faf46591e</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7c8b3ddbc663f7205b9e7990a1a6c975</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9f81ab2a6c15d712f2e3c1404e037e3</anchor>
      <arglist>(const char *, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a1ad4c519e64a24f8ae760c71bf3efa</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a65083b0124075a2dd18d3fdd6127bb16</anchor>
      <arglist>(const sc_logic &amp;, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac98cdbddd0554bdc00de2d621b64b9d5</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea14782f31e90f6197121d2645ade3d2</anchor>
      <arglist>(bool, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afc921e3ac11fbf364a8b998cc3cb352f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a887117f11ae0050cbaae26a49ea4893f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af63f0946c46b9f955f3143821385d1de</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2f4982bc8d7c70412e0bd78a575f6a35</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a635ec0670993cad06d12e8851711a5fd</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa9004b0f4e4021cbe0b083d212843661</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4b1dc414e18dacf4c16a7edbc70ad67c</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a64028e5ea6310e2072e7212b32859b06</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e3f7242eecad15a60a526b1d882f278</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af01bdea32ed59762b0035322051d3b65</anchor>
      <arglist>(::std::istream &amp;is, sc_bitref&lt; X &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad7bca50b1e7b33fc32df1ceb58306b2</anchor>
      <arglist>(::std::istream &amp;is, sc_subref&lt; X &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8c1782d9f545aaf3ff93b370941ac274</anchor>
      <arglist>(::std::istream &amp;is, sc_concref&lt; X, Y &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a650a32e9591a15abbdacef0b415d0478</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afa4f11c07555ffcc0fc97e15c772c236</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a712fb799189610ca33f8542faa614091</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a682e704d226b970e4996557c3a7e64d0</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f44cb6c8d3c779db140c9f8e06f4b5c</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a32c99e6f4d73fbfa37f6881b3f0c8517</anchor>
      <arglist>(::std::ostream &amp;os, const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef1349ce364097fa382a86aef84edc9d</anchor>
      <arglist>(::std::istream &amp;is, sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a328357f6ed6c69b9df838beb721e8b70</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0fdf35ec7113962ab4b99755ae1981bd</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1faecf0db01159662c449f77ae038d63</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a334a95743b558823d365a91050326f84</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a513cb0b408e84ec87a9d9366a1be7d3c</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a403e0c695511794b0b64ff5eecf9cfb8</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>lrotate</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41723883670db833547392e5a1514869</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x, int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>rrotate</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae1528e0cdec3a9db1c3ef36a73e1da9a</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x, int n)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>reverse</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c9da926c002a145b38e6bac95f63c3e</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a14eca5ca6f6376cc71a6355ca5238a5d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf09535dffc10983c68b5cb59bf1760b</anchor>
      <arglist>(sc_bitref_r&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a11fa9dddc593ff7ed9f03f50e4abdc42</anchor>
      <arglist>(bool a, sc_bitref_r&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a44518f4c93b4bf7703d9873abe8107e0</anchor>
      <arglist>(sc_bitref_r&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f4e7349ebbab37135843f74084eebea</anchor>
      <arglist>(bool a, sc_bitref_r&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af202c1ced642065c56dab53b41c3e541</anchor>
      <arglist>(sc_bitref&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29e7af700e296de16d00ea09280dcaf4</anchor>
      <arglist>(bool a, sc_bitref&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5737b71a8928e0d0c5b53ebd301ca886</anchor>
      <arglist>(sc_bitref&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a872da5a536bda7d6b16d188445573b6f</anchor>
      <arglist>(bool a, sc_bitref&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_p_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab19c521447708135e53f3061392c368e</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d9bb67bf2d6103a56c634852dfb3674</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>convert_to_bin</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae2220f3755bf2b22d5fdb1f9fc7858d9</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>convert_to_fmt</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad211529e1f12582aa0217e9bf79061dc</anchor>
      <arglist>(const std::string &amp;s, sc_numrep numrep, bool)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a328357f6ed6c69b9df838beb721e8b70</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>const sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0fdf35ec7113962ab4b99755ae1981bd</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a45816c9590a94aca06c1f189c855b89d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_words_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a43dc0c3f82468be76295de7ffe67ff95</anchor>
      <arglist>(const X &amp;x, int wi, sc_digit &amp;x_dw, sc_digit &amp;x_cw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_words_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a464ca38a9d1338847b903ecdde3b6807</anchor>
      <arglist>(X &amp;x, int wi, sc_digit x_dw, sc_digit x_cw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_sign_w_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae38b1e6b91be552ded23cd661edfaa9b</anchor>
      <arglist>(X &amp;x, int wi, bool sign)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6a505dc35902d6296779a490d1495e5f</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a323315704ce928228719f4fa443313a5</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1fef86621e00ed4c2efb80b832b3438b</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad41f86308be3469097df4e959c88db5e</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_and_assign_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7a1848b43803d267abf3fcf25c5276fd</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_or_assign_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6ff6016abc5954a0426aa4171eaceb00</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_xor_assign_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a024ac007cc8895844eebd4a97cac7c39</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;a, const sc_proxy&lt; Y &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29091736361c33fd24d66d89c34c37ed</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5b519be68a6f71cd8ab9321c85426f8e</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9731e9f21049b061185aff5e48192c79</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a45f040b0068cacbd094a477334552478</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5e01097aa17f902c751987943fb8f156</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0dfa9cf95ef33f69b94f2341c1b42124</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0e077b56de2cab737ae93c64a96daa2b</anchor>
      <arglist>(::std::ostream &amp;os, const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acd548edcba8a9cb179baa48968492e99</anchor>
      <arglist>(::std::istream &amp;is, sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a955bc53408f7a3b67e0e7e96f599ac</anchor>
      <arglist>(sc_fix &amp;c, const sc_fix &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a105427a5d4f4e3bd62c2aeef146b2033</anchor>
      <arglist>(sc_fix_fast &amp;c, const sc_fix_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9f28f612a1193481340c21eadae8a76b</anchor>
      <arglist>(const sc_fxcast_switch &amp;a, const sc_fxcast_switch &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac178878fbad4e4ea748f2d29ac88176f</anchor>
      <arglist>(const sc_fxcast_switch &amp;a, const sc_fxcast_switch &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea6f78010aa833b7e353cf262d934670</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxcast_switch &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0b524f782cc4c4b38931b83087f78bb6</anchor>
      <arglist>(sc_enc)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac5f195e1e3ab263db5b82afdeb6832cb</anchor>
      <arglist>(::std::ostream &amp;os, sc_enc enc)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a50dbb1c75ce3f96dfd8848dc1b17a480</anchor>
      <arglist>(sc_q_mode)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a004fc647440a6b9874ac7e59ce628263</anchor>
      <arglist>(::std::ostream &amp;os, sc_q_mode q_mode)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab1831b8229fe1a182af69b7e41ac033e</anchor>
      <arglist>(sc_o_mode)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a34eedbc39bb5a45d6e0a3558b10c7a85</anchor>
      <arglist>(::std::ostream &amp;os, sc_o_mode o_mode)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af381016a4f56faf8e83b3e7b2e8e18d7</anchor>
      <arglist>(sc_switch)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf4c2c6684262493a8563f7e1716c672</anchor>
      <arglist>(::std::ostream &amp;os, sc_switch sw)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a84487ff21bbcf6be93758530f09056f9</anchor>
      <arglist>(sc_fmt)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a484288fea6bd473f9878224977a5ca7c</anchor>
      <arglist>(::std::ostream &amp;os, sc_fmt fmt)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0c8514de9dc84334b797fee9442d90a3</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9ec9d7bbbd2a5223b1e1530c473f72eb</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a53d05b51687e1a35abd74c28b603044c</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af22803f6c03db7267c1172c8926b1375</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af8318d41bf64fbc386a5a3396af5bf42</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a113f187c0775da905de64d5f28510961</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8bdf9ce4c7ee3a4cbbe88cbc27935601</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3873c16f9d4e1475a13306fea2d88464</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a11bf5965abed66b3e761ae72eeb94cd0</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2c48d5493cb4af546a93f1d8e78658e9</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a20e66f83968238b3d1ef0c5fbf91f35c</anchor>
      <arglist>(const sc_fxnum &amp;a, const sc_fxnum &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3a9b7dbf09938a4c340b7eb6074fd20b</anchor>
      <arglist>(const sc_fxnum &amp;a, const sc_fxval &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e74e52150c5d31ba6f96246367c5849</anchor>
      <arglist>(const sc_fxval &amp;a, const sc_fxnum &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a677b680b89421b48a0469e193deadaf4</anchor>
      <arglist>(const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5cad6b11c65f652e42fb702fb0f02147</anchor>
      <arglist>(const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8e9a274cadb18414dcbada92a383cca8</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a783c5d3a7d9130b280aade86b1a3a13b</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a05e4628de672ebbf569727d275a39e09</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a949dd60e2b454c7ee30915c96834880d</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acdda03bcd491399b512de122463cf6bc</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a563f279d110fc8d00d26f1d580357806</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a091952271ce53c1642f87cc5df61f491</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc439cdbfe603a211914e1f7e442475b</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abdc22fc290d305a9c59e51672808b68f</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, const sc_fxnum_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1232d8854986f916c9c1dd4e5044f6ce</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, const sc_fxval_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac09fafb6800f5149e0941f49607bd086</anchor>
      <arglist>(const sc_fxval_fast &amp;a, const sc_fxnum_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a858ea170c7e3a4ef1861bc2c4a3d2b41</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9c818fed65ba40a986d70988ac9dec64</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac739e4382ff824deb61e47505a2b7250</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa701ad8002f0787931a72b712e03836a</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac1bc8f0c659c5c410d265faf207bf694</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67004778acc4b3bef9d4e7478925b7ca</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a368651ad8de773726fe200084ef78670</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7ce69e2e14b076ef6aec072cbd8effa8</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab78be5087d037d1a7e56cbaecd89f9a2</anchor>
      <arglist>(const sc_fxtype_params &amp;a, const sc_fxtype_params &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0561b8a64aeb14ae141b087e10f620b8</anchor>
      <arglist>(const sc_fxtype_params &amp;a, const sc_fxtype_params &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa1f6615c06683ab1a12c4593102f4579</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxtype_params &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af432f76dc658be1bfdb48fa5381bd1f0</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a800919e0bbaa4f1c5916ea4b2de31d28</anchor>
      <arglist>(const sc_fxval &amp;a, const sc_fxval &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abb259d9e83f9d10cdda02923f19201fe</anchor>
      <arglist>(/, div, int64) DEFN_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9db290257eb17a9a83abded8ebce5b17</anchor>
      <arglist>(/, div, const sc_int_base &amp;) DEFN_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a15b2db080b11156aa371d5627b4f7d4d</anchor>
      <arglist>(/, div, const sc_signed &amp;) inline const sc_fxval operator&lt;&lt;(const sc_fxval &amp;a</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac47e1a3172e6f5bcd4e777d914d5b9fa</anchor>
      <arglist>(const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a807d44a1bc74c1e361dbb894b4af096f</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a31a9a495d590c38c61e6e0e0c29dfa8b</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a55d78ab4bc96736405cb032a6b7e80ad</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2d6bc5eaaf8e61d20f6914ccdf34f3bc</anchor>
      <arglist>(::std::istream &amp;is, sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a04da20360528ce2fcc03e05ae859d35d</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d627a9bf3daa1e95f51f9dc04027247</anchor>
      <arglist>(const sc_fxval_fast &amp;a, const sc_fxval_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1973913feff30f8e9d2b25d10624673a</anchor>
      <arglist>(const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a60de763f1619154d44b9e168816c124f</anchor>
      <arglist>(const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5e3592df81d5a22a9c59f3ae9b3e31f9</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abc14ce12146bd4239bb5999e593d4d30</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e75d1989b2ede5e3e26870465f58258</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab3bdce2715902a1440f968b7d45745e5</anchor>
      <arglist>(::std::istream &amp;is, sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aceb1e4e55b023f8ab6d1a531e4e16a63</anchor>
      <arglist>(sc_ufix &amp;c, const sc_ufix &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7707d5e3a59012124dacabe28635d0d8</anchor>
      <arglist>(sc_ufix_fast &amp;c, const sc_ufix_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scfx_pow2</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa63fb8186f45368abbacb5ea2184594b</anchor>
      <arglist>(int exp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uint64_to_double</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a24fe139e3129d25b9177241dca681fd8</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complement</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a09a929a414f496ff57e4016e94d77ac3</anchor>
      <arglist>(scfx_mant &amp;target, const scfx_mant &amp;source, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa9043fd24fd8a5cc2c4ac46cec2da4ea</anchor>
      <arglist>(scfx_mant &amp;mant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a36693e0e646c1365cff704928aefd64a</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxval &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a24a16c1d0407f4ab40651909e0fdc6bc</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxval *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66485f8977150acc35b2f7568f853358</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxval_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afbd79bb5c030b066748836df679b18dc</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxval_fast *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1b9b5a8fb4445b38aaade67c90334d1b</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxnum &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a80080d29a2ce5b61aaff6cb6f5df6fe7</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxnum *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aca4518ce22cd355eb8d1d00216962224</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxnum_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acabe26085f26ba6eff14ae3e5542fcee</anchor>
      <arglist>(sc_core::sc_trace_file *tf, const sc_fxnum_fast *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7856865d96ec59f1075928427007fd46</anchor>
      <arglist>(scfx_rep &amp;, const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>neg_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c1d5f377247f61ca17010d3bdaa2a6e</anchor>
      <arglist>(const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>mult_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a285a917dbd527c8b93c34ca99490e47d</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>div_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc1ea3eec3b7495711acc7d13a64c436</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_DIV_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>add_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afffefbd3e3ede8a6cc12866215d591f7</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>sub_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc90566db7ac23abb52a85e1bd12ee3e</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>lsh_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99ec8dfd7db50ace2cbddfbfb9ae7c4b</anchor>
      <arglist>(const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>rsh_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad70d0c6739b6fd8f00b0d1684a7a2c4c</anchor>
      <arglist>(const scfx_rep &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cmp_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae65ba2bbf96fa8c7ada907eeb6118c16</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>quantization_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a655fdcac856937f1cd78feea2415fc28</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_params &amp;params, bool &amp;q_flag)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>overflow_scfx_rep</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a199a0b666f49bbdd11adf4258d160c3f</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_params &amp;params, bool &amp;o_flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_find_msb</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad060c75dcac3bff34aaad7566c504269</anchor>
      <arglist>(unsigned long x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_find_lsb</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67d1e070e7cff85c5c808d469162d06e</anchor>
      <arglist>(unsigned long x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_parse_sign</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a395131cdd634e91be42cebea8a21ea40</anchor>
      <arglist>(const char *&amp;s, bool &amp;sign_char)</arglist>
    </member>
    <member kind="function">
      <type>sc_numrep</type>
      <name>scfx_parse_prefix</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d77d34c773e6671de262ab48fb1f615</anchor>
      <arglist>(const char *&amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_parse_base</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab57cc226d2e1dbc481e59f0411d305ec</anchor>
      <arglist>(const char *&amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_equal</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a536b6b070ed4b614b8dfc9a5cbed8144</anchor>
      <arglist>(const char *a, const char *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_nan</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c9d47d97ab0c1a50bc186bbcf55804b</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_inf</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a16c2b3ec391561205e471a2cdde5df32</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_exp_start</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afb5534e36031b78f84c0b7c425796bb0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_digit</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1a70667adefc25d20dc089f8ed320ba0</anchor>
      <arglist>(char c, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_to_digit</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8f4dbf3f304359315fc31cb12f1eb1cd</anchor>
      <arglist>(char c, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_nan</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6a45c9eddf266f175cdf8633b368ba2</anchor>
      <arglist>(scfx_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_inf</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a31ec84c4d33e92f314f8627eae2b7f96</anchor>
      <arglist>(scfx_string &amp;s, bool negative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_prefix</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4ba0eeab8fbd76ed63d8bfcf36fcb3a1</anchor>
      <arglist>(scfx_string &amp;s, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_exp</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6759f57610516dc3ef24f3f701940fdc</anchor>
      <arglist>(scfx_string &amp;s, int exp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_tc2csd</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a127e274476a2d0d37b99d473cf143d4a</anchor>
      <arglist>(scfx_string &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_csd2tc</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a582fc0daca35ddc7d2d8d65e940e5e20</anchor>
      <arglist>(scfx_string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a52b8e52f2a13bfb2b5cca397e5afc26b</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aebe2864ca0d95e72a56d849fbfae788a</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79b4a602c7bb291b498f301e39bc1530</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8d64c7d8fd8762c112ae46f211503f77</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad86414a8d27d2afdcd786263470ec367</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0f7fab02514c9a007eb3b7c034b799bc</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3a7d98fd7830f24dce9ffc5e6e8572c9</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a523ab4c72ffead0d06514f30b7de3bf2</anchor>
      <arglist>(::std::istream &amp;, sc_int_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ea5e6016aea4c1e762212c1ede0ed50</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab86ce81bcc9d96c64ae567b8898cd5d1</anchor>
      <arglist>(::std::istream &amp;, sc_int_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2c0f2ff2691d402b6554422f40d32ada</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad4d57f281d313f0e45a478d6df5d936b</anchor>
      <arglist>(::std::istream &amp;, sc_int_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67f370080f954dd2800d815e8d60e2bb</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7bdbd2a8fd306ecd9489060b5e864158</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa252e6366ff6f6fcf4c0e7dc602691c2</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a68efb66b2fa515e736a330ce1e3ad1a8</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf2bb45fa6058e0efd14d9e8910ad528</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afdae976a89c3486d7ed31a602365061a</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2101f276e1032f6fdc800bd264ac30a5</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5b36262df9731c8c89dec5c4c2e4f7cf</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a89a7968ee39893c9d1b23d202ade4cc6</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0da1abf56530e17137eda7c30bdd3ddd</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea04231f49b7604846c402ec5b67d084</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8f41c1b52975945aa86d1e982e684137</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a45deb636c84c3717d74d02c45d7d7ab1</anchor>
      <arglist>(const sc_length_param &amp;, const sc_length_param &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06815c1c37ed2a88835f7590a7e42c44</anchor>
      <arglist>(const sc_length_param &amp;, const sc_length_param &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1eed766b520ddb94147c0d99b31f4f36</anchor>
      <arglist>(::std::ostream &amp;os, const sc_length_param &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_on_help</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3921f7ade17ffb1c421d4748e338fcf2</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mul_on_help_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a904e9ff6a0fea96c600d020f05d6ab1e</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>div_on_help_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af5a50ce79ba43a923a9d99f856d661bb</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mod_on_help_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a48de90c9fe8dfc01a42f07841b31c92e</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mul_on_help_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a46403290b72e490752dfbfe76698f24d</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>div_on_help_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a755579c1ef8ef3e398f949a956ed9c6b</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mod_on_help_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7659b5e856ed0cd22028fce8df295356</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>and_on_help</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aedd2604b7a2a8e7055f0f89bda1eebda</anchor>
      <arglist>(small_type us, int unb, int und, sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>or_on_help</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2d63469de9f74c4d32e4b2cd53b6e31a</anchor>
      <arglist>(small_type us, int unb, int und, sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xor_on_help</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a802a0c1f42ec6072129cbe908121a447</anchor>
      <arglist>(small_type us, int unb, int und, sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_numrep</type>
      <name>sc_io_base</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a4d6a1fe9854c877d21a3c4f3609b61</anchor>
      <arglist>(systemc_ostream &amp;, sc_numrep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_io_show_base</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5b4d6728dbab0f65e1855704137f9b78</anchor>
      <arglist>(systemc_ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6fe94d1205dc903ae30475295a4d245b</anchor>
      <arglist>(sc_numrep)</arglist>
    </member>
    <member kind="function">
      <type>systemc_ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a667d282692361dd9aff91510d0cc65ff</anchor>
      <arglist>(systemc_ostream &amp;os, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_valid_base</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af5ff578c91bcb6e1232245554d89048f</anchor>
      <arglist>(sc_numrep base)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>fsm_move</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac5aa5b4dcd3c28606f2d9ccd43402b2a</anchor>
      <arglist>(char c, small_type &amp;b, small_type &amp;s, small_type &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_binary_bits</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab1f6b9c4dc368e6ae6fe80b30eee0cd7</anchor>
      <arglist>(const char *src_p, int dst_n, sc_digit *data_p, sc_digit *ctrl_p=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_hex_bits</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad63b7228e8660882f8f6e1d462011d50</anchor>
      <arglist>(const char *src_p, int dst_n, sc_digit *data_p, sc_digit *ctrl_p=0)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_base_and_sign</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a878be67d31526d60a14587d0376b29df</anchor>
      <arglist>(const char *v, small_type &amp;base, small_type &amp;sign)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>vec_from_str</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a639e6d7b9b00b3e8360c6b2285f34fe1</anchor>
      <arglist>(int unb, int und, sc_digit *u, const char *v, sc_numrep base=SC_NOBASE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a52f549de414c2b831bd032e0091888c0</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad7aa3ecbdb13fce55bcc7ee4b8400a0</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add_on2</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aebe37f5dbaa18c275355c75bb49a52c1</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a637889230463954711e9cfaf3e9b956d</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_add_small_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9d8b140ebe8ea39a3d1f89eff00e645b</anchor>
      <arglist>(int ulen, sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9d41b3cfa6492741a77cf06f87665d4d</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9c46fb4349b30ff0dbc1580c96137ab</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub_on2</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2dbdac246f56d5fb75452448b235cde6</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a75c69b396e80979b55821114b01b491d</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_sub_small_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a54f5d3fcb6577df65e67c929d975d4a8</anchor>
      <arglist>(int ulen, sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_mul</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a94282801a2fd01a4eaff2c4d6a3f5b</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_mul_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acf9544f32c2023f23731d36819058c81</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_mul_small_on</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a705fd702233215e0f819333c58db5291</anchor>
      <arglist>(int ulen, sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_div_large</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6694adb7785f8527bdbf364e47d7df4e</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_div_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66b8d633dc0820c79e82a4f785041c31</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_rem_large</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af30d7a3b44cf24be0719c36c9066d7e9</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v, sc_digit *w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>vec_rem_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0262382eef77fb7f26775d96bdf3f464</anchor>
      <arglist>(int ulen, const sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>vec_rem_on_small</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a32f0d15309df87cc39ce57419b15a33a</anchor>
      <arglist>(int ulen, sc_digit *u, sc_digit v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_to_char</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9bc1d7cfdb6c64437a177c27c118684b</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, uchar *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_from_char</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf85497aa259e9c0940d7a3602a6a30f</anchor>
      <arglist>(int ulen, const uchar *u, int vlen, sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_shift_left</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67f34f9ea59ba3f63ba9bf8c2e5fa1e7</anchor>
      <arglist>(int ulen, sc_digit *u, int nsl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_shift_right</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8c15a71757f1ff948c7df323054c852d</anchor>
      <arglist>(int vlen, sc_digit *u, int nsr, sc_digit fill=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_reverse</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a78f56786d262bad8a74643268665951d</anchor>
      <arglist>(int unb, int und, sc_digit *ud, int l, int r=0)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>low_half</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7f53824e85cf89b787dcbb6162764c63</anchor>
      <arglist>(sc_digit d)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>high_half</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a16ebc4ac03e86244730c6c809b9ceadb</anchor>
      <arglist>(sc_digit d)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>high_half_masked</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e8aac3a7f8e9c8bac24b3eed97c27c1</anchor>
      <arglist>(sc_digit d)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3678e6dd6f1ececfa99a4ecaae1c096e</anchor>
      <arglist>(sc_digit h, sc_digit l)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>one_and_ones</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2bee32fd52dc43857ccb08f9dd402d17</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>one_and_zeros</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af15484a06bfcff2e7f5d87eacc3fc6d3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_ord</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79bd522679e87defb63332b5288d1965</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_ord</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa06c483e577006db0c8c577213cd244f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_cmp</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a459d42cc477ec50df7b2ac2e6f106070</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_find_first_nonzero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1344c81493c1d3d0ae5703f4a977ad84</anchor>
      <arglist>(int ulen, const sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_skip_leading_zeros</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af70952510ac7e296d13961a5138133ec</anchor>
      <arglist>(int ulen, const sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vec_skip_and_cmp</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a477094057f284fea79eddd5da03a286c</anchor>
      <arglist>(int ulen, const sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acd7b260c362883667ec539e187c71b55</anchor>
      <arglist>(int from, int ulen, sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9e55798828a40f43e477b98b9ee5472</anchor>
      <arglist>(int ulen, sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_copy</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a68e2f462a319f55f4148fb7b62f43938</anchor>
      <arglist>(int n, sc_digit *u, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_copy_and_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1be3153c54ddf31ff14d95b875046556</anchor>
      <arglist>(int ulen, sc_digit *u, int vlen, const sc_digit *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vec_complement</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aacd270a84cd66dcc069475359ee09548</anchor>
      <arglist>(int ulen, sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from_uint</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a574898cc8e46dfbe5f10fc9ccb0e9fbd</anchor>
      <arglist>(int ulen, sc_digit *u, Type v)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>get_sign</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56829e7129d40de35b8e71c7a2e5bb27</anchor>
      <arglist>(Type &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>mul_signs</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac78a6cc3645f736bbb5140d7f47cb46f</anchor>
      <arglist>(small_type us, small_type vs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>div_by_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3160b2aadd5ced8617ab79fbc075701</anchor>
      <arglist>(Type s)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>check_for_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a98da822be56b23c5b31d2c21acf25aec</anchor>
      <arglist>(small_type s, int ulen, const sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_for_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8745c0481b978519229bd58f1e372038</anchor>
      <arglist>(int ulen, const sc_digit *u)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>make_zero</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6278b3af606ef9c2e9a9c61d88a9dfcb</anchor>
      <arglist>(int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae39d90eee9a739f9a056e62c5ec4ee65</anchor>
      <arglist>(small_type added, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_SM_to_2C_trimmed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a234484b4ac72e72bb038e396757fe358</anchor>
      <arglist>(small_type added, small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_SM_to_2C</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aacd92d3c15d3947a17d1d793f2fb210f</anchor>
      <arglist>(small_type s, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae07052aa69b02513903259ba37d423ce</anchor>
      <arglist>(int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>convert_signed_2C_to_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a10f44ae94f6e8d6ed999ce52f2fea577</anchor>
      <arglist>(int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>convert_signed_SM_to_2C_to_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a92f5a08a221d6cc9e0a18b6c209b13</anchor>
      <arglist>(small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_signed_SM_to_2C_trimmed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad0d4bde35cc3b47fc104d41abecfa8a</anchor>
      <arglist>(small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_signed_SM_to_2C</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5179aa530d251972bea2da6b6905684e</anchor>
      <arglist>(small_type s, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2dbe0285c1f7e3cf8e8762cea6af5b5</anchor>
      <arglist>(int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>convert_unsigned_2C_to_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a54d63a8a5410cab0f2d8883b76b13eda</anchor>
      <arglist>(int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>small_type</type>
      <name>convert_unsigned_SM_to_2C_to_SM</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a58cfad63a865f45af9fc2eaa8266c372</anchor>
      <arglist>(small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_unsigned_SM_to_2C_trimmed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a38294aae54e612e873231ac86a1aaafb</anchor>
      <arglist>(small_type s, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert_unsigned_SM_to_2C</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae3e4096cd97601cccb08734096b397ca</anchor>
      <arglist>(small_type s, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_digits_signed</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afca561d1374f9121b107740c552c85c1</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_digits_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ad9c02cb273d279cdaf1550caa36b99</anchor>
      <arglist>(small_type &amp;us, int unb, int und, sc_digit *ud, int, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safe_set</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7e918b0b135007df6bafde052f01146a</anchor>
      <arglist>(int i, bool v, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0dec71a35d5224dc94e0843bd5ee0a9c</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0a04862b3d71c219a969e30e50b53bff</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_bad_double</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8009343f22a641b2941c1ff23bb4fff5</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>add_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a484c181cad6037661ca40c74ddc4134e</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>sub_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3428db8a44a94bf00b3186749e5ab58</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>mul_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8186c9eb7d3b23c68517cd6964e1f4ce</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>div_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a625ce4f0d644de8005d9a3d0a57676d2</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>mod_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ada4e15bed7988556353a6f1fc9af4140</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>and_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2ce27dd342080443853e506dd96de58a</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>or_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>add240bca7bd0a0d9ed50c43e04987957</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>xor_signed_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a15b4c8405e647fbf0d8b4493b6686555</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b1266382119c8ec72391eb2d219b635</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c714830623df9af34fd88985ebaa9b4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac55cdc0cf9a2eca893393c148f0e7103</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aadc619659bba16d82b79512ac38f2ddd</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a76fb6e794bdf0945aa42eea683bd7d9d</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaa465006155e0964aee70135b54ab10c</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9bfd9b968805c4f2cb08864fd3362c2</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acfff80d322ceb1438d0a3756f2f5867f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a68371078c6ffba7155c192635e108f85</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad813fe6192386cbb51ebf2583a77a602</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae0515607c20ef91b965ffa026a6d50e4</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abda857890ca6e6047e2cdea2b750c249</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab0ee238ae7d05dc39a155b73b5975d8a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a18abdcf306a86c7f1dc15cf07cb6fcef</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6866761b1852a2b718a4fb5153a532a1</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a383c7d15ced3c03c2a0578194219a799</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae0a02238a028c298f964f9d6ca1cc53f</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3c90c73a3bcb79e81eb7fe63761c435</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adbd77b1783b4178692a2e75dc26b697c</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ace2894d4494be610f40f2a50317fa110</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6130aa270fac85f952b57114e48e4473</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a47ae7a5369a7557d223bc8ba1fecf4c0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a02b1ce0bf268394b2e7d2cd6b1378632</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2810dd2dd79f4ecfebc0ce3f4c3568e6</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a38a2c171e0c7212f39c92fcb6e6fa7e5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a60f91673b1ed2d225654f9075d21c139</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a765ce5ad179045fb0e0c53fe4ef09873</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a44f560f9426020ef240b4ef2fe360e8f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abbbc079bd97df8767fa1a8a9a04cc73c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aebee63f0432e16a784296ce98d86f5e4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d9261c9683aae516114f249e039b500</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa34442385aab7f221405548c1b8add91</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a520bf5e0a596f54d8c862307c602fa9d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a07c01b92fea95d6c0ad53da22a338b9c</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a501ef61f6793fe8cbd61a8dbceffd828</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9237c999b0104b538c34e6225a26b4d5</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a667fdbf4fd03c3dbcb8bfbb09d7ffc65</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f05742015b83308407c3de5ef27ea57</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9687e6bfbc60ae405e66feeba8d50be</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3192fd1632ca2a196b0c24dd605e846</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad2019fb3f16b4759e1aff4abf8263b22</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa02ddc1776d0df59a8ac01b13a1f7c41</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa2e609d545f7864905904525e49b2939</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad978067379445909451f860d9ff58455</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a42e1f4e030e3aa292941f38e502e757b</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afc2b6f1459ffceaa6b3cb3f9a5077b2a</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3ca81d0f36cfbfb176caa70cb3b0408f</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a34b85079af23b503ef93413cf04f958f</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a329cb1d7d6aa29be9c366ecd4c939c1d</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6a615f2617e265639b38cac87d841340</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a84f4a9137c5e0ae13842702f0c51a2a8</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a481dca2171f35c7be1990aa12bed5522</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a50ea68b0a493e7109853b39bd93f9289</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad9526a50bfa6cb19ce90c948d12ca3c6</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3b2f0c15bc2870cbe26cd831fe7dc4c</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a175274ffd375e4eecebe830a6807399a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff43fdb565ede39f6c3141b110dc57cd</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>affd3e439a7b08edc2b7abee2657d9612</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6a5e7e4b71c2e74d7c50a6a9be6438e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac93f76809b4a1f95a4f5dad90dca5b9b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aabd0841264ff8cb5d3b8fbb9ca60c5a3</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a822375e416feac789bbbb98db9d75893</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac2c49ab962dee5d8c2f2a9cb0f310c3a</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0df0f5f4e55ede4e338f7a9edc027173</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab7ad9c2ace0ed55b84feb427c02a5fa8</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ed60573b491aa5a8b3af3203eef753e</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9720d1241bd0cb12ca6c267078f9191d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5982578489684bd10868d0499810c30d</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc291bf56ed3166222bb31aeac84ed6e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a42b129588903cc2f6f879beefc8dbd29</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adc110307b260ff3de14f8a7343302c9f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae195f1cea200dc179113c7db900cd022</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2a1e7513f56677d6e2a089fb44df8012</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b6e1c86c018e9a389e719b11613b2db</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a69cb18fdf9ad5fd5d3dbe4a303de2732</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae6fbcd066b4e40b393042f95272ca525</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6e8acf0bac5207e7d5c63fe2678c9d4b</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6759a021a7dae8faf334e305cc414912</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6cc717f797987e4ba79ffad1c0f79e3d</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a761f97fa0faf299c12ca1c56ae0f0f2d</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a79c3871cc2efc2b93e5bcb8da652a08c</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a32709b2add99abcdc18efe8ba22cd4f5</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aae1376c8355317dfe87244883a992d08</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1e2c03e2125c2ca0a851cae514867805</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab09fc18cd08b98566517ffb1024c5e80</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa283db7300622e60574df66bec86ed28</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a36044c3596b0bb5af64b84a8953bd493</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a13d467bf846a24cce77ac9034c8ce05d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeb0017b57a02fba6748c980751cc2318</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4c585e79c660f2458c870606e9aa4618</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a14dbfd9e607bcac05348bf3e4fb4eff0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a34aa9508e0f2ea4cba34c8bc78f9cacb</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a655935d40c4bacce6bb699c9f8adc0d6</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aafb42810c5e17001ee26bedd845f2f58</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6254871cb89d636d29f11eedf3b928bb</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56fd25832bdbb3d7850b1265cc31bae2</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0548f2156f8943d6037b72b6bcee7e01</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad85968bf5338e2fc4a7a1fd4ab603b91</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d31d8477d20c2521d75fb28711838d4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0f8928a6a13fbe76a9ec105884091642</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abed1a68f3c2d05bb3f44cf4666e14ce9</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a3a225ab69921fa083354d0397b9845</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ff2307c06f4156e35c5728e29ebf966</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a24615ab9dc7c43ab439606334e60bc9c</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a69d8e51d12a71fb3855e6454d158c36d</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa90d61e7313fdf81544e8852fb7ed1e6</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7c154c122060e9a11e862640f221d0e3</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3cc2c59ed878edd74e742a3db8df2491</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a54f8740e23990f8006fc1f3b126c3b7a</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae989ec8c31c3936ba014c6384cdfa61c</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7267c0b4cbd9c704c102f93dba3b0a70</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af991d2b1a52ed3a5c4f364dc325e9fe8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf33bf07b29bb7c03f24ceb0a8d435c9</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adc79a0bc289f583534648a0a507fd1e4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aed559c272f2894f085ee5f20f62465b1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a85183a955c00327ad77dd82a1b33555a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2f9755133f79e695e7e0dcbbb114f643</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6d777b6b8fc293c90c490028b383e8e7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a880a9c0d1abe0c01d57d7bdd439a208e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa33848633e314b97ec11277261576825</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a20ffe6b44360e432a05f9b4854c984c1</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad5d684ad1f667ff582e3a206d34a6017</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af33fcc39cafa5b03497625d0b6cc9cec</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad14b9ee7c159d72c454f949c9ba9d269</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8925098f4c622985b860a9c7029d9b40</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acdcfdf94ecdac75a8a0e0261ca7eac3f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6d976b54522095a493408d477f526f9c</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf0b2fa2cd16a434f16d8fc3812f7367</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8618edeb4a44b0907182b6bab6bde18b</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adef88397e2d0ab64b376db4ca0435803</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29883deeea343e5d54d10f054e412ab3</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abc1f9c8c6b5177cf564c4362dfa0be7e</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c93e40cb486730ef3de71b65271e8d1</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa54cbad44ea9dedc0b6c92e676cc1cc7</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a478d882170f723587c504d4af93548a8</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37f0efa0ca50e28b0104af6bd5ca96bc</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1cfb82aae0079e7191a805f7bd269376</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e81da7744347a37c690d12cbc73648f</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab73dd327a2aac70b7ae32a9dbaaafd58</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6874f8eaba4855fe66738c8e7ca05ab6</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa7ad1250eeefd1ebbc39f3e3d81a2b71</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a592109008ec2814bb7d0e7e5a19e79d0</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d4873e0605147173c1f76b74d542dd1</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad3240ed88fd0d69e7dab037479b67371</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c483d163e490dda81990b390ef76184</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa5944d5f8383517ad55950892282170e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a044c8885cf2b016c77f280fc2b6cd643</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae69e7f349f851eaa92d86eb04901abbc</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abcee6f61742fc8ac55bf0a8669c5ad56</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c54f9db8fa3bbcdc048689e431f6561</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae43bddc8c1f7f14c09699c847ffca748</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8ea2def19749c51e1055438fb3aed3c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad16a0ecf928d2585be65c931363e8151</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1cbf7a88e77e7aad9d047e6053acd076</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7bc92ff8160f180c535b20d033b94764</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a895ee3bd360edcc2dd24517a787aa7f3</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a74566734335651158970fd75c8f5b319</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a51483a760ba24e31f977157b244b8261</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe91a97446208dc8c4fdbfeb0d13b48e</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67c61c2184d9941640b4a2d56fe014fe</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7230a6e7e1044b13e106ac46be95bb8f</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1b89535765a4a880322ab0535b527c08</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1888cf061efcc8793c732881e5de05be</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ade138df5ca8ec1980bb53d80e04b2f8c</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7e7b0ae178fa7a4063309903b29431b5</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a756aa4a6e42a2e3b61c451b02b9cb0a4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a25d919b35e53a53b843feaee931b895b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a30f4b1689f53e1b85328089a2f9e851e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0d72390288c23801f7dfeefb5ca8fc3b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d0cc1f421fb9ac3cc17bd42618df82a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9c6fb20861081d977cc59c01355b8439</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a771fe6578af0bc9dbdfeec3bff2fbe8e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa15a2b02302ba7d9ffaa4c5c8a503d0e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a71cbce80531630816f4f3e33b1d767ab</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a83d726a8a89def64ba26b1219c14b9d7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a509c274298c8f6f67107c4f0c719d83e</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a38596ff4bf12b13abfdc5a00aba0d840</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aede4fdff38ad5420887683af27dfa6f9</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc8c842ee71ad18aec8494a92de753cf</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e0567d4f1f979f8b96ffe509e34c398</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad8088ff65d732cb528c06b7a32a1f48d</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4393b4facf8f164c7e1b9b34025377c3</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1df24849e9f6d4c0af85e28e5ade5716</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a737633284aa76221041ba68a7b2d650b</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acb4fe26dd6040e31dba7e06c3d209eae</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66207f0d0c15811306d7402a5299e09c</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a55ee314699b64c4b01db20a381e83374</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adb4764dd3196f30663eac7bfdca6524a</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac713fb93684062f9338941695869342f</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8e856481cffda6562039cdce96b65f78</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a099385b0a36b1df6036c5b0b82123d97</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9af77414058e3b1fb21f7dbcf0e0c926</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a686870eb86d8f64b01e92b87cdd68b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abe596400ea8f9dc1e40e83b1c554fd2e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2403542cc57723a9c89307c749bf5ad</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a471a6e8f080143e9d1fa17f968dd60d6</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a53cc9edb239634fbd9d87c560e7663ea</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a046b0037937c17e78223998002f679bc</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a912fb77129ad5655881d49f88a033665</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a274390bf02d3c2bee7a0e01705187a75</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad29b3cf56510a01a7b9458bc65f25b71</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae569689d9511da5b54ce578423020f44</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ada4fa68f5f8c5078b3955cd9fbb08296</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad7a5dd3e30db52ea0df9f019b31cf356</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c947091636d44009bbeb872a8fc7f62</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7d459b0b73da43fdeb24eabbeba21cda</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa22cdb210771560b4412efeb0ef986ba</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8bd84070b4e8a84aa7aea6fcb2b46657</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29f55e7f52d32f7dc890934149ccaa28</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a281bb089ff94fcfaf8f77d0a4d2bb945</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7fd90bea4c7fbd396a6fdaf80a48037a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af0d5ca160477c689b2e3c482b5412c86</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c23bb20654f44bec3f638e12aaa9ddf</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a48e4159e8064afa51767ffcbbe0faf78</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92dc3fa1fc43e3f2580f4427d1b9b63b</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1a4e26d7ceef26e585d479cb79cef145</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5623ae26a29b277b661c6b1025aee359</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad4398ffa658acc500d1b78a14b0d7b3</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5269718805a1dbfc40593c4658c51cd7</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a77770eed3c850c00f7bad0902bc2d51e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4e6d0f094477bf120eb746fa0edd064d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abfed89a57c167bbfca3c650e9d539a52</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a907d49f78a0203e6f5b4f9d1be0a39e5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7472e2b3316b1c00c73f219cc1f6ed9a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2f128775eb3c4291b28f96421c59da7</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a18b2e3020a66acc6398cdc93888e4989</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae200b248393ae47b1b21320f7bc95b01</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef5834e4ec6ecebc492171667c4e29ac</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abcaab0fdefeccaa5f9d16377ff94910c</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a740cfa9bd1a0085e9b0c86a537d0f856</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5ab5a82cb2381a86f9c93156d13cdf8b</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adfbb6eaf4e7813acb394c596a5e77093</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ee0f85bcf28251f5e4a43e481ca922e</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea535356cbe50541b6a7d29f159b8c51</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac0590170ced0e3183b1e3f13a159f32d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ba6eb1afa04ff68306772361308aa4b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5348eb35f17cb46a79fbf83e385f7355</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a53c546918325f3b6321bdc74e7e1acea</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae732cd0b95b4ce4283075d0cbfb8f78e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8105b5be99a191ab81c7dd301b82afb4</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a08f00329b1308cba1215a61c6fcd74d2</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6051957b623620902bceea32b2e5a7d</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c21c59fb930a70a67269f80e2bbdd2c</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5fa79e42eb059aeaa987a19e4d666d67</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad58580e47a5e48ade447debc372c6c9a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae880b5f22275823171ad3a0dc4dbabab</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5247833ceaa6871a26800e3232e7a011</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4545d6efb6dee5c4ab253b5741dd3d34</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a813220fcfc3e608dfebb2b19b71387</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff477552b59658bb8e82d5558eab6204</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8bd10f79fe77b30f03bed3dd6552d8ba</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a98b4f50cc1ba5e0d662ec25b5217f7a4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c060c1b4bb86554dd1d4ce64c55940d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9863335743bfb5681303a8b99b397a43</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7f2224eacb54b1028ff0d6466c1ee55b</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9450160422c5531471731b3c2dfaa24e</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7599ef3875c409df866a6848443b8c2a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8c21fe66105f3f8015449359b513802b</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37b5ac325e7c36c864bd1edb3fad4aa4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06699a889f446c2b2f9d251774431aa5</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac47a97cceddac1375d0c46a5f9aaa8fe</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7912c00acafb1cf63644a0635cd37a2d</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abc76f2448acadaf200728fbaa5036626</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af42be71266a2ca12fd330f3f491991b7</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae6a328e86166bd377de7d2b0dde41580</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a87894606af992f23d81fc39c12e8ee01</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad2dba9313ee449aad82cc24721b28a63</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad6317b41ec97d82f661423c72342a8a8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92e3390450026f0654242be5ebf2ab36</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa9c49a4e829e82ae0b1a02352b3528cb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7dfdddb93d91fcec663073309ab5c368</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aca04429c9183363bbd9889ffc12fac4a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae5b98d2fd00beb10177e4ddf5ac09c20</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6b10a1b26e70b79feb020290d1270310</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aed8d7951babd0f803a6c7f56ac9232e7</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a581ff07002f291bb208c2c288049e509</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a11bb54a1db395e144b6c260efcff3a97</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a15c39176e20a9b05c35e85716a331435</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a31cf43c5721b7a347308c387f8916f8e</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37e184a431412dad3a45b434aeaf511b</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7c22fbe271171599b85246ad3edabaa1</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac1f87ab108538ea8814001723b791993</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a171072da1da1d34b068bf9a5ee29a430</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab802c109318b58ca877a2011c81a95f7</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab32e97430f398d1c36d4e12d272e9618</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9deee045a2fc583be522c541e371a092</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9e312fc717163dc7f7481913bb06dd52</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1713a5388188f5e11f77e27d907d86f6</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa2f3f3ec4958c6438f6d7b2e6b91f520</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>addd474247ead48b2e6553ffd697e88a4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a33283c6cf0624846b4e0ceb7a88bb0c5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2d3620c3212fc0139b8683bbd8723f8</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a69a6791fd777f580c6c05bd42a19f34b</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a782c335519c7df37c2639a75e286745f</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0f9df2fa15563439525e2a5f83c151d6</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2ace53ef2506e4155021091e6b60bcda</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aadb575412b01a4d82c36ebd2d3743cc0</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab1a3766f9793b8a28b332af9e9eaf35f</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ae128d40537665cb08db6e1201c0d79</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8ca11306b250bb2adf3cf89ecc6fb240</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6aae39a5e8b0e2d82610fa4c9825e2c8</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acec2d1a6a065e26c1042cc27cd2cf056</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf792bf24e17c08731bf5ae4cf2123b4</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a068300ed1a2a34d6448fd29836faac55</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a49497f455498ab4d1ac36eb6a04a9e6f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4ba74b2305c8afb7e02fa25adab0e488</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad644fe8f0024e8446dc25bdbe50e065f</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a253c9e9c717dd837badd88d6f32ecde9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af2dcd44d523a64715ca12e3734f08d45</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af05226789c6abce7f5b34d987498a70d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7ec6e8907d36523808ca49ff40f32530</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad40b385e37119ca140db04ec1e9a79a7</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4128627168c1f18df299ef9507e8e94a</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a976fb5ac573e769f9378757b5c2835a1</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a63810cc1415b7df65c413f30991a28ac</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0963f51d2f13df91fe15465aaf16263</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a029ff8d3166631e9817176395e8c4e56</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a944331773bf8b3974130b3858c49cc6c</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aae1ea248924c70686ccddd1f1d49e4e9</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c1a6c92d56933273e2afa9c39faa07e</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab592e67b6dcc9044373161f97f333720</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a36b332107ae0deddad8d3eb36884d7b9</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afffb559f0d888fdb9e0e175e58e6bc54</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeb75b09330f19ed88d07ce67a32e8c4f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3ce3feec0041374f4fffaeed45fddf34</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4b948f1930a2022fd165a602a696adf1</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af3471c839a4104f07017fc654d3c6be8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>addd17e3e5ff5aba35791d8e4b00dba07</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a322efbf68a14f7ad270eb56325a1d22e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06e04667bfac59325ef23b9bfb3ff053</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b5028f1a7df00a4024e1db7d668005f</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af294ead67604477f92ffb789617ae85f</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5fbf5755db8c03eb32ce4d087fa6be0a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a185d812c1bea299709fd55d34c0c2eff</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af0658e253b1816175f6fc1893aac8639</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab80109a6f479da8559e11d7022bb23a4</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f46bb3fd4f262730a5a6bdf3ee1651b</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6f8fba2e40c223f351364c554a578284</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac4866218488a41875c6c57d17378d5b0</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4a262bc8d81c5c7e7baed723f1e57d21</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adb7f9ea4143be8f0618c8a34829f9218</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a21fc9753ec6db3e3c3493e33f13bc95b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab707906ea3fc74ec7f373db4f48b1c90</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8d576fb0d3deb16c1a4c66799130d4fc</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6a8e71ea6ccaa3dff057b82c15f55aee</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa1ad51fe9d9599b06e12c732952e73a9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a62b7a711bcc20db2687d0dab66e39c36</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae19d79b127dae5358fea27d8a626ec2d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5afc8d885c05b88bb696dfe5d94c6df8</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a472b62517542c00f1a1117776c551f7c</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae4349dd867655985decb01cc75cdadc8</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a17354e2877d8d76ca7e17b88018d54b4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7510b614ef57d990ea7235fbabb64467</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5eb4b2ff0fc051ae7552020f74d4eb10</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad92f519512a2a9d9dcf4e6d4a6d032c0</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab09401fbdd1e29fff4f231b508a4bb09</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5f560777920d7411e5cd4f69fb322232</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7e14534fa334b0a649a6cb8963e2de61</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afd5a3a1dd9ef898606e9ddbe92e99759</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a61f38368315f868936b6a50a7bcf44f1</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af4487668e8f3de8745770bd851fd52ad</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae6e7b126a2d160917caffe828f6b1596</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa26da29ca4126166bd542a9a68a43caf</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab64008abdf2d6e772a1475abcc9f4785</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator~</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a55c8ab6867bb2ec6062fedee07d3ff17</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a434bf004f9b2d011efe79463190daaff</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a93fad799ce81786200b79661b83d2eea</anchor>
      <arglist>(::std::istream &amp;, sc_signed_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeae4b7735f7f34dc44416cb387b044ef</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4fddf3ee91d29d9da3da994e1ab61ded</anchor>
      <arglist>(::std::istream &amp;, sc_signed_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe93053c8d25b8a91a947247ffa1ba75</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7e16827f0d31922cffa4f3e4fd3f370f</anchor>
      <arglist>(::std::istream &amp;, sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a43406b86ef66259e456891b3a0f788ed</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d4572459846ba9f89d5a294871189a3</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a512b1b0fd5242cc38c48a28ca2e89f49</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aba50061cdd2ee31e89749c46800925fe</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92121a8fd116bbabf6336f0fa7eab888</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab2a4dd0ee86661ae9c8cda0ba2e44835</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab0ae15782ddf76c6ddc81f9c06c16037</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7088f7ca94020e2d4440eedf73567891</anchor>
      <arglist>(::std::istream &amp;, sc_uint_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acc69669bc23a8b22e6caddfa7e60d999</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad66f74054fac5e4571e2e7a256bccd89</anchor>
      <arglist>(::std::istream &amp;, sc_uint_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3e4cee06b01798c012b9cb99385a3fa2</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a654be12b215a2852e04bc63f3c05ae9a</anchor>
      <arglist>(::std::istream &amp;, sc_uint_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a22eeccbf4d9c48639dd195211a769657</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5db8680f9b4a2b815fe733e78ae89e06</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeade562ae63dec48ca4b7af20bb411e8</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0989c490343a7d848d46d33d84831a09</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac60f4dfc7ba1315cc229df7b34cf048d</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aee27e3090fac6203a0be06ed848609b2</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff1c3898ed37eea41a978eff67a1b3d4</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afcf17439e5ef462db824daa1ed155673</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf04a62e64afa5e9935205eb8543efb6</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aad7d87d137b6eae57718d3bfdccd5811</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a686158e18dcfa7fcf2b421d69ad56e98</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1578e8f9ef9c87bed861ab8fbf29b74f</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare_unsigned</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99c29af7f5c701835673c023e3b54a73</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd, small_type if_u_signed=0, small_type if_v_signed=0)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>add_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abf1873797190f85b14680e6c8efb8358</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>sub_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a29c7964b019b7cd52270d2152373d331</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>mul_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a81c6cd97e6651ca94c09ee08ce329ae6</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>div_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1d93a3d01c2ae362b749a9afd9b66087</anchor>
      <arglist>(small_type s, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>mod_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a51e82e17b1772a399ed9f39c9d7121df</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>and_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab2a46d89cd801d21cd6df4e714f3edfa</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>or_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a7440a5e5f564522e05967f018c7ee3e3</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>xor_unsigned_friend</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab5617e69ac54e58266776880c65c858c</anchor>
      <arglist>(small_type us, int unb, int und, const sc_digit *ud, small_type vs, int vnb, int vnd, const sc_digit *vd)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6dacdfd84643b23ace16aff4dc5663e4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a723e0abc3ecc842230de8f7833dc6382</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2a7e976b1758b9dc6f9702b9a0bce657</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a442695b7eb008d8bcc9ea3587c50defd</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abea1a5b397bfeb495bb77d3844127018</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8dc5ed8e3205ee3a2995b334c3155804</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af3168f21d75606a9a23f736e8ffe2b07</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a233dd3d8483c3248fdbd33695d85db00</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a91c5d2cba840c7de20bdc9ff0a0a03a2</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1f8908026d3ad99fce3b9f5da7f3b281</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af01c3d5826c08b9997b811183f130adb</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a01d9edb0b234ebeb30e0d9f0bc0d12e1</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a27d89e1c43c8eb4cb5125aff620f4b42</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac42e5232960fb8bc43ea073240e030ce</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a82b3c90eb15823034343b02abc7f5dfa</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adb2be61758b9d3b2a4f35fc90929c9f4</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abadcd3afebd74f9f13562a84c370c163</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1dddf2d891536ad247f8492352c73d48</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a10bb3f2b06c13518e17246f1f4345e3e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a95fb87c4339bd9a00973291650ffb068</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4583f58fd62521d52f541f7c838ad5ff</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adafdbea2fc845c7377626c8f8f595210</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac493e1cdf0d9d41d2f7174391231ff9e</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92c232a220eb30601b0a5727270cbd8a</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a599b9347436eaa3b488689a0ced5c3cf</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a45c8cb921385df5972ecc744232897d4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a22909030e1bd9ee6137c181530b77bb3</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a95f5a4c72c6017e0ebea974296972845</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2593488a703490f719abc3058b890ce4</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a57cd57bbad3d30a8ed9bfd65cdee4f9d</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1b8cf4067a82c79186e525af7f40d99d</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afb193d09db9bbcdffc0278ce7da5bfca</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef6e0e5443e91c46a58180c3e98c6aa0</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acf4fe32d824277665a9826cfda2afd4e</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe01797f55a7cbfb7914a49dbf118b1b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a552ac6ec2cdccb5d10afddb9e034f0d4</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3c483d163e490dda81990b390ef76184</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa5944d5f8383517ad55950892282170e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad85d9065aa3d45b5d10f2f1746f09b91</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a044c8885cf2b016c77f280fc2b6cd643</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac849a9815793485e3517933f6f6d101e</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae69e7f349f851eaa92d86eb04901abbc</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6abf9b8913cad6eeeb4fa8203fdafe2e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abcee6f61742fc8ac55bf0a8669c5ad56</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a99f72be25d18a8af1d10fd32a5e96213</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1c54f9db8fa3bbcdc048689e431f6561</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef1d382a0b4517e6fc2134a7abb35327</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae43bddc8c1f7f14c09699c847ffca748</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a03058e7f97319baa3466c3d197ef2dea</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae8ea2def19749c51e1055438fb3aed3c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a37b8595b9319d0636d8b0a45724c65f2</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6cbd56dab55bab0e5027744ac2431401</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a756aa4a6e42a2e3b61c451b02b9cb0a4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8372f65675e8d763c288e21bc8f42eb0</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a25d919b35e53a53b843feaee931b895b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a97a2bae1a944746c90b99e8c474e430a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a2e5a464f453d50cdfdf031f376d2a7</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2f906d1fa17d2d3023ebffa4c5734079</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a04a52c86471a20e3732885090a57c486</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff127314dab71dfdf65cf8ca778395f3</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0159de03b55f6ab69e94104e4681140f</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a64a38cc0bb9fe45a185b6808765f06b7</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8459d0774aecb924558e7091a3082739</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2a35cdabef35269610b6c309809ecb54</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5d3e2d1fa8fd1351ef987b6ffff89669</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4360c6bd986f23b1857c0f4cd061780d</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a65673a0f951aa5d5cfd2e47ba1881444</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a80fbf53fd59acac8cf15a9429cf81fae</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af4d3987a8aeca0552156ae6b7b079509</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af46b3d105eea85ccc559e8e66004010e</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea3fd817106e09b3e0d9511a863df167</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6eef3503c9cfec43300ae83ad83351d4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf57d8122898e2d3f68fff7103441142</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a199d8e60576da0475a38d6f521648383</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6c8083bb53c4c517e608772ad7cf1407</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae0a557fe2c8486c3c8a0dd012ce36fe2</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67f5c98884527fba593ea4c20c3d77d2</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6038c340967bc2bb36fcf0c7561edbbf</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2db11110fe2f912816f4da95c8463040</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a006b3f536e67fc3b5ec1933b86414303</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae13c42aed0c5cca2f4634b6c5ee0a1f2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6930e7b61eb3bdcd14a703bd747ab16e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b46a1f62ec9aeaf93e9bbe49043dade</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5a45148996cc016fa243494a46749641</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9bfa61370fdd192fca271acf87177e2e</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adda12a6e4de0440eab97d57671980085</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aca69d04a264d9f4017d9fdfefd6d6aac</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac586915fcf8d45e9230f929528f00680</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac6bfe386b6dc833c383705b41873e213</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a91e53fe0048620528bf3643f95cbe983</anchor>
      <arglist>(const sc_unsigned &amp;, const sc_uint_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d3f593ef35e43a7ec4b100e69121a1c</anchor>
      <arglist>(const sc_unsigned &amp;, const sc_int_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9a1fb41fad842c98c08ad7d325cd2e45</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41bba7bf2dbc9813cb59af9083edd898</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac659f69aedb42c92007099825b6d2820</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d210ede38f3eacb5efd9fbd065e90c1</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aab35752961600b8c2036ed00304b6991</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8cee034a5637a45af8d9b153432d48f9</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa6b473dc90eba6ae511140366c402c87</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aef758cf75d83e7df0e155902c032d398</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a61052394d7a9c7f7823248bfb5ce98c9</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acedb20bd21a5a8d6dcd73a9c62f3fa3b</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a07c5945d4dd0448367b7da7b881a5dd5</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8fc02713270f10bdb1e00f2846ac058f</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9d02923ad2ab4f3eac893f9424a9815</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>addf2924105bd74892103584a7951b9e8</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0cc5784dc64029b6278394c4a750a3cb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa05d38410d01a8e7c62d40efd4ab6d45</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acd86f7cb1d6f3e37520047b6ebe249e8</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aabc45e9f2ca5e7bc50d1a55d56aecc4a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a74281416fbacd4230f1254bf85ce2729</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac3a5d806990939ffb0cff6a65684a0e1</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a848a802481339c5e935ef867b27245ce</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a09c7cf8333955b6d1c973c2451fdc4d1</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3b646e2449745352825819246d47f5c4</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a336f42c70755e0ee4d4d5a3951d07e7b</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a78499b070582b75fbbe1ecc774eab0f1</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3679a3663495a2e7414c23619ba3b44e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adb11a84ebedc20eb9db48a25088bfab0</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a773b30500c2758c61837f7430127a5d2</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa984f00cc83925778b8f98338bac586e</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8fb9926cbf754e8844eed77fa3a5a265</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afd90bfb7964fd9a3bef98b742f97b9e4</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acdff975d4cc55759570d08ce1e082ba5</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a924a78075ecf4d0f82c2bc9b3098bc88</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe272d90833f8ab62f9a36db1e82a072</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a47671600731acc65f18f2e5236489036</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4e0749c2f0264e168d0a95b9a375e19b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3645d40c2cd6e2fef65d438428c11b2f</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0ae8da575ce39781640de6b3d8e11c5d</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff28de07e4c6460cc429858d1983486f</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab8855e9bac66c6d5b6c133cb9f020c30</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a606f3c031fec1d87451868af3d49158b</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac55846b243171da7b8c8d252c49e689e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a58c45a37c1cc8f8887d248fdc7aa9ccf</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4fbc503ad56d8532fc5cf14d7df5097c</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a182e41b3d951f368d28aab56c41e0520</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4a144b935eb3386b49990f0a1e31f510</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac496d6702e28e5efb00d1a22ec1b0c5c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad5a817a8760c286b1c27df5c318efd97</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e40602dc81a965d3c4a132c30166769</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a66b101bcbfb7bab48a25d38a647ac6d4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac53e6f801cb97f8c361cd70c7b9824dd</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a22fb2483d14292d546d3aaeb5938ed79</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ada0694f806a2c158efe0d6e18af02f00</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a70f42e05564dc25236dde554c1355063</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0826583a55b38572f0b3f0ff4110ec01</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3398778f1225d9e38e724cbbfef6987d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afc459b948892105a6afbe230cfd4342a</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8830fd528e379214af680626529e7daf</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6d610bc43a20e85c9320c4ade73e08cc</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad62bbd63f16991695f912427baaa5d8c</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad23d79997077d8b067b230b8ad060412</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af8b378db0239f48cc7e19611ebc085d0</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad8b907873a1d597f14643f10f3d8db83</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9f7b5514879d8dd27b074fe4a7e8e955</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab39fed4393db848b675c91d48d4f60de</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae41e0f79a1cd2f956d0495c0b76446d3</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab4bbfcd25af8c3e135f1bcb899270dee</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a458d618b751368b5b343d354c4865145</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4c1494133a2c719994231bbfc8b3ff9d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a06bdd1cc8165ef7dee3690f1850ce3c4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a89a67489166bd077fb94679f0f914025</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a63b9b9a0fe6b165c02a5d906542cd847</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac729d730f80d096ff7367d092b5944a5</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac9cac6bdb9cc2ab389e986d047e9214f</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1e61f8fe1653f2bdffa1e10bbd6a35b3</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5fe1bac11149aadf137d5e18fdb1009e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a149c795947ed940ef503de600c0ebede</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a40bb59e681f1a3b653e4b312b8eb447a</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abd861dc18b69236962867f108e6e3032</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae13094051d1174d522596f950e10f403</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab37b064e400dc52d75719e802432ef8f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2acbf942eaceae98c19b2f9f2d9080d6</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa838f020ae867e1156423001e0d7e233</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2d6876869b65978858f17a25f85c5ca9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aff2b991114b60381076bdef9afcf9358</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afe25758ef6c1bca3e356163e7460971f</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2ca5d340264161551aeef4781982d5fe</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af0a0eb3ca15acb9be0f133b0053912d0</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0bbf03b75fb165e3819eba777a59d353</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9af436ea78643a78fb7bd4763cc3d80d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9834be3dda58ff22d95ef3d22fee05ec</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af9e5ebfc881f1d1b744245073607e7b4</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aeedf6cd85a85fb702f0077484b411579</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad127348481941ca0c4195d452658c655</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a244afc8b72735e627d891b0c4cc10f80</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a561c387a9749c1f3efee0deac8e3a778</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a297de0637c55c43512e05cfcf3ba430d</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a951e4510c3f8cd427545734bcbbf2b0d</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a969b54425d6633835a4a31d9594eae71</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af04c284c2b4e41cc7b7c667bb270e64b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac57a34480f11d957e9b18d3d94498899</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa74d6fb9607a196719ba514b35196a05</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad8f497faf061e358768a21dbe3821ce7</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator~</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af5b1f173b844f646b0ac623b6581f09d</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a71c798bf928dc18c95a38134ba357acf</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af04b85fdd9dd052c766a98fdb6f738b5</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ababd6d2b2c0e0706a32bde366159463d</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0b20b251c089a32b19da5d9540481054</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6cb71a0a6e45e0e2b521f5c971a82bda</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3b146b777bb1a1dc1ad858d11291860d</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3b63945310f83b83ece57a904d03047a</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a225a0db712d929a6a9a3bf49e093d1dd</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a071c953a8ec70dc9bc9bc7a7f19b265b</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1865de7fb2f58a9dde27fb7db34a53b6</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5b3f982f3a65758dc783dbfa01f6aac6</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a0257198d05c106d31606deea7f2d8e15</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae686e5795fbefe6b3b97f64e522597f2</anchor>
      <arglist>(const sc_concatref &amp;target, uint64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a200a6958a66b4b7e48be78e4c3f6544c</anchor>
      <arglist>(const sc_concatref &amp;target, int64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4afedaecc0acf2113e7f71ef3b28667c</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a07c19b61fa11e64f24121b539394a29c</anchor>
      <arglist>(const sc_concatref &amp;target, int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4482738a647f09dc16cbd508c48a8d78</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ac20e0ad62bf0181b49914fd3fdc42547</anchor>
      <arglist>(const sc_concatref &amp;target, long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3ff016d78e454c3f683de2bf44e18fb2</anchor>
      <arglist>(const sc_concatref &amp;target, uint64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae2fab2d7efae7aea5b8f59380743cde0</anchor>
      <arglist>(const sc_concatref &amp;target, int64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a56c81fb47e42cea717fb955411d786d8</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad0f6798d896b8b8f514628fb0e926c4b</anchor>
      <arglist>(const sc_concatref &amp;target, int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea9af377b19f2962d083edcb1aa01fc7</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1ac1a12595cb38c1e2e1e2aab081dd9f</anchor>
      <arglist>(const sc_concatref &amp;target, long shift)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae6779b3ec9596f1ff50edc22210acfb4</anchor>
      <arglist>(::std::ostream &amp;os, const sc_concatref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aaf61da9a0e2a359532769df02cf9fe96</anchor>
      <arglist>(::std::istream &amp;is, sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a17f911808b0f5a56ba3c1eb3d864fd53</anchor>
      <arglist>(sc_dt::sc_value_base &amp;a, sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad916638f672b4360db099a261064c771</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>acf6e9dc159e1ac20975542a352971d45</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8482b96f8374e960aa1fbaf5c5fcc5c5</anchor>
      <arglist>(bool a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a046ec3a0652d8b99161098d3405eb82f</anchor>
      <arglist>(sc_dt::sc_value_base &amp;a, sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a3f5d863a43654052f59d4445be08d13f</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>affb68ebb335e51d3c98cb4fb130597f8</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9b4c18e113cac3b399b59ffddfe0dfab</anchor>
      <arglist>(bool a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_min</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a6cb4684e5692dd4775e0ae72516a9c35</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_max</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9581de8910dbf6afa1f540eba7492667</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_abs</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a70309af0a57c62146ef043406ee357ed</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_string_old</type>
      <name>operator+</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a68b57497197e7e6eb6f1e3558486887a</anchor>
      <arglist>(const char *s, const sc_string_old &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>systemc_ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aea2ddc4934d0ddb0f758a8d3f724a00a</anchor>
      <arglist>(systemc_ostream &amp;os, const sc_string_old &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>SC_LOGIC_0</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab2715f1c8bc1b0f4b6000c63743c919b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>SC_LOGIC_1</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae517eb9f471b3b8355a7ee00ddc7a58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>SC_LOGIC_Z</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a11f43af5111be2f73ce54cca7c2a4fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>SC_LOGIC_X</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2e9684c845cfbea4f5f9e374ec4fcc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>sc_logic_0</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c90c0623cc0b1f107db111351ca3a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>sc_logic_1</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f8f829fb3219fc990c25d020db6e54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>sc_logic_Z</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a211eebd1818449dc934c948317bc1496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_logic</type>
      <name>sc_logic_X</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a513e2c9efff64513a605335ac0b0248c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DIGIT_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a261fdf19c94eb645624e551676a4b3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a41db220f73561037e0eceb8e1ab849e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_ONE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a19ba673c32e3feda2b82b949f2cafa99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_TWO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abe43fee2acd67acf70eecbc3ae561664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c710cfefc3e2479e0409a4a73e67e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_IWL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5175a68ec521b2e60d4851732dbf95fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_q_mode</type>
      <name>SC_BUILTIN_Q_MODE_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a27f91512aea0915fd1516f67f0ec583c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_o_mode</type>
      <name>SC_BUILTIN_O_MODE_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a15ae90f315a8a65d2103b357df7e1192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_N_BITS_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aac37b82256b6ec89e1f12b7771e6cde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a12b02013145ae31ea2a6abaa1fd54f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_IWL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a76d2025776aba97329359a6fb84b7943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_q_mode</type>
      <name>SC_DEFAULT_Q_MODE_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a5c2d016b13dfc62ab0fb86e3d41a8bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_o_mode</type>
      <name>SC_DEFAULT_O_MODE_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa450d625be656c8cd2b7b800a8376a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_N_BITS_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afccd3909356b1dbf4b8f848928b3bd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_switch</type>
      <name>SC_BUILTIN_CAST_SWITCH_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ad6ec30d471c7a129add9afba693650f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_switch</type>
      <name>SC_DEFAULT_CAST_SWITCH_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a487b0566485d3c509821dc6abdcf1f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_DIV_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>af892a30c60b809ee4cf06e18c61c1246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_CTE_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a414bf34e3f516ed0080701932ac210c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_MAX_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a70266da6c35d8b6d62f55e8c1dfc3bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_DIV_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a000561825be47f3eb33a9169937de0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_CTE_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adbdbfc6e843d840671cc2a8c314d4819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_MAX_WL_</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8a76f43ffcab4af73b52d3e1e128745c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>div</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a12114c547c96d81851980cc9dd7829cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base int</type>
      <name>b</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>adf3ee606b574990426012b8c6cc286f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_BIAS</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa15d1db6dde3e56e3b7f56cc8c4c3338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_DOUBLE_E_MAX</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a67b6c725c1bd21c1224e06acd8622235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_DOUBLE_E_MIN</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a2403f43817bd898d7b5e1e50a7dc9351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9eec5b400f57cad95902df53b28f53c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M0_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a73a9d2d31ee139d8c43bdf0576cc0a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M1_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a1aa9bcc69f8f57d6dd5dfec6e72958bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_E_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4d4a1ec8357398ed60abef614c0751af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_BIAS</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aa54b10bf631227df8da768c4e6b99d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_FLOAT_E_MAX</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a76e745625b89b8e91d2ed90c6c8294e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_FLOAT_E_MIN</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a180cbdc86768018a143b9fa0cc67fd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_M_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afeca4b01739deaa4c4e5b159e8a3dda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_E_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a92e243f3ce790b0a4e163d2e181e072e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_POW10_TABLE_SIZE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ae12f193164fb7ce3732c2c1e497ac24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>min_mant</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a4f480fe345956f9a5947f5720cfccd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bits_in_int</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>abe9ff4cc791b13b00baee44646dc3306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bits_in_word</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>afa90f722a8aa6b18569f37d2b7d68206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint_type</type>
      <name>mask_int</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a8081c802c1c72fce2175e1b1479aa355</anchor>
      <arglist>[SC_INTWIDTH][SC_INTWIDTH]</arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT64_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a9c2801ca37a185d67aa9278b407b63c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT64_ONE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a83a74813a41ca91db389982e1402828d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT64_32ONES</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>ab308094ea2477a764488560bf08585d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const small_type</type>
      <name>NB_DEFAULT_BASE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a80a10dce041d6248a0106188e641eafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT_ZERO</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>aafc169e53c7fa9630225eba36bf0e789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint64</type>
      <name>UINT_ONE</name>
      <anchorfile>a00547.html</anchorfile>
      <anchor>a55423481107e039c4b5f9e9b24ab3703</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
