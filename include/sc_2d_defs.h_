/******************************************************************************
    Copyright (c) 1996-2001 Synopsys, Inc.    ALL RIGHTS RESERVED

  The contents of this file are subject to the restrictions and limitations
  set forth in the SystemC Open Community License Software Download and
  Use License Version 1.2 (the "License"); you may not use this file except
  in compliance with such restrictions and limitations. You may obtain
  instructions on how to receive a copy of the License at
  http://www.systemc.org/. Software distributed by Original Contributor
  under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF
  ANY KIND, either express or implied. See the License for the specific
  language governing rights and limitations under the License.

******************************************************************************/

/******************************************************************************

    sc_2d_defs.h_ -- Definitions for the template class sc_2d<A>

    Original Author: Stan Y. Liao. Synopsys, Inc. (stanliao@synopsys.com)

******************************************************************************/

/******************************************************************************

    MODIFICATION LOG - modifiers, enter your name, affliation and
    changes you are making here:

    Modifier Name & Affiliation:
    Description of Modification:
    

******************************************************************************/

#ifndef SC_2D_DEFS_H
#define SC_2D_DEFS_H

template< class A >
void
sc_2d<A>::sc_2d_init( int len1 )
{
    int len = length();
    data = new A*[ sizeof(A*) * len ];
    for (int i = 0; i < len; ++i) {
        data[i] = new A( len1 );
    }
}

/******************************************************************************
    sc_2d<A>::sc_2d( int len0, int len1 )
    creates a array of elements of type A, where A is itself a 1d sc_array.
    The first dimension is indexed by
    `0..len0-1', second dimension indexed by `0'...`len1-1' (note that
    (ln may be <=, ==, or >= rn), and optionally initialized with `init'.
    The internal array data[] contains the data in this order:
        data[0] == operator[](left())
        data[length()-1] == operator[](right())
    operator[]() returns a reference to a 1-d array.
******************************************************************************/

template< class A >
sc_2d<A>::sc_2d( int len0, int len1 )
    : sc_array_base( len0 )
{
    sc_2d_init( len1 );
}

/******************************************************************************
    sc_2d<A>::~sc_2d() - destructor
    Responsible for cleaning up the dynamic storage allocating, including
    the subarrays that were created by others (which were kept in the `kids'
    list.  Since in the constructor we used `in-place' allocation (i.e.,
    new with pre-allocated storage so that we may call the constructors
    of each 1-d array explicitly), we need to call the destructors for each
    1-d array explicit as well.
******************************************************************************/
template< class A >
sc_2d<A>::~sc_2d()
{
    int len = length();
    for (int i = 0; i < len; ++i)
        delete data[i];
    delete[] data;
}

/******************************************************************************
    operator[](int i) returns the 1-d array indexed by `i', where `i' must be
    between left() and right()
******************************************************************************/
template< class A >
inline A&
sc_2d<A>::operator[]( int i )
{
    return *data[i];
}

template< class A >
inline int
sc_2d<A>::length( int dim ) const
{
    if (0 == dim)
        return sc_array_base::length();
    else
        return data[0]->length();
}

template< class A >
sc_2d<A>&
sc_2d<A>::operator=( const sc_2d<A>& y )
{
    int leng = y.length();
    check_length(leng);
    for (int i = 0; i < leng; ++i) {
        operator[](i) = y[i];
    }
    return *this;
}

#ifndef __SUNPRO_CC
template< class A >
sc_2d<A>&
sc_2d<A>::operator=( const A y[] )
{
    int leng = length();
    for (int i = 0; i < leng; ++i) {
        operator[](i) = y[i];
    }
    return *this;
}
#endif

/******************************************************************************
    sc_2d<A>::vctor( sc_2d<A>* p, int l, int r )
    The "virtual" constructor.  Because sc_2d<A> will be inherited by
    others, notably sc_array_signed and sc_array_unsigned, which have
    additional members, a virtual constructor is required, as is
    a virtual destructor
******************************************************************************/
template< class A >
sc_array_base*
sc_2d<A>::vctor( const sc_array_base* p, int l, int r ) const
{
    assert(false);
    return 0;
}

#endif
