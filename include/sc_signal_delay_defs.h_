/******************************************************************************
    Copyright (c) 1996-2001 Synopsys, Inc.    ALL RIGHTS RESERVED

  The contents of this file are subject to the restrictions and limitations
  set forth in the SystemC Open Community License Software Download and
  Use License Version 1.2 (the "License"); you may not use this file except
  in compliance with such restrictions and limitations. You may obtain
  instructions on how to receive a copy of the License at
  http://www.systemc.org/. Software distributed by Original Contributor
  under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF
  ANY KIND, either express or implied. See the License for the specific
  language governing rights and limitations under the License.

******************************************************************************/

/******************************************************************************

    sc_signal_delay_defs.h_ - Allows for delayed assignments to signals (in
    sequential processes only).

    Original Author: Stan Y. Liao. Synopsys, Inc. (stanliao@synopsys.com)

******************************************************************************/

/******************************************************************************

    MODIFICATION LOG - modifiers, enter your name, affliation and
    changes you are making here:

    Modifier Name & Affiliation:
    Description of Modification:
    

******************************************************************************/


#ifndef SC_SIGNAL_DELAY_DEFS_H
#define SC_SIGNAL_DELAY_DEFS_H

template< class T >
sc_signal_delay<T>::sc_signal_delay( const sc_module* p,
                                     sc_signal<T>* dst,
                                     const T& nv )
    : sc_signal_delay_base(p, dst), new_value(nv)
{

}

template< class T >
sc_signal_delay<T>::~sc_signal_delay()
{

}

template< class T >
bool
sc_signal_delay<T>::do_xwrite()
{
    return dynamic_cast<sc_signal<T>*>(destination())->xwrite( process(), new_value );
}

/*---------------------------------------------------------------------------*/

#ifdef __GNUC__
#define TEMPL_HEAD template< class A, class T >
#define TEMPL_INST sc_signal_array_delay_gnu<A,T>
#define CLASS_NAME sc_signal_array_delay_gnu
#define SIGNAL_ARRAY sc_signal_array_gnu<A,T>
#else
#define TEMPL_HEAD template< class A >
#define TEMPL_INST sc_signal_array_delay<A>
#define CLASS_NAME sc_signal_array_delay
#define SIGNAL_ARRAY sc_signal_array<A>
#endif

TEMPL_HEAD
TEMPL_INST::CLASS_NAME(
    const sc_module* p, SIGNAL_ARRAY* dst, const T* nv )
    : sc_signal_delay_base(p,dst)
{
    new_value_array = new T[dst->length()];
    for( int i = 0; i < dst->length(); ++i ) {
        new_value_array[i] = nv[i];
    }
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME(
    const sc_module* p, SIGNAL_ARRAY* dst, const sc_array<T>& nv )
    : sc_signal_delay_base(p,dst)
{
    assert( dst->length() == nv.length() );
    int length = dst->length();
    new_value_array = new T[dst->length()];
    int i2 = nv.left();
    int incr2 = nv.direction();
    for( int i = 0; i < length; ++i ) {
        new_value_array[i] = nv[i2];
        i2 += incr2;
    }
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME( const sc_module* p, SIGNAL_ARRAY* dst )
    : sc_signal_delay_base(p,dst)
{
    new_value_array = new T[dst->length()];
}

TEMPL_HEAD
TEMPL_INST::~CLASS_NAME()
{
    delete[] new_value_array;
}

TEMPL_HEAD
bool
TEMPL_INST::do_xwrite()
{
    return dynamic_cast<SIGNAL_ARRAY*>(destination())->xwrite( process(), new_value_array );
}

#undef TEMPL_HEAD
#undef TEMPL_INST
#undef CLASS_NAME
#undef SIGNAL_ARRAY

#endif
