/******************************************************************************
    Copyright (c) 1996-2001 Synopsys, Inc.    ALL RIGHTS RESERVED

  The contents of this file are subject to the restrictions and limitations
  set forth in the SystemC Open Community License Software Download and
  Use License Version 1.2 (the "License"); you may not use this file except
  in compliance with such restrictions and limitations. You may obtain
  instructions on how to receive a copy of the License at
  http://www.systemc.org/. Software distributed by Original Contributor
  under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF
  ANY KIND, either express or implied. See the License for the specific
  language governing rights and limitations under the License.

******************************************************************************/

/******************************************************************************

    sc_signal_array_defs.h_ -- definitions for the template class
                                sc_signal_array<A>

    Original Author: Stan Y. Liao. Synopsys, Inc. (stanliao@synopsys.com)

******************************************************************************/

/******************************************************************************

    MODIFICATION LOG - modifiers, enter your name, affliation and
    changes you are making here:

    Modifier Name & Affiliation:
    Description of Modification:
    

******************************************************************************/


#ifndef SC_SIGNAL_ARRAY_DEFS_H
#define SC_SIGNAL_ARRAY_DEFS_H

#include <string.h>

#ifdef USE_SC_SIGNAL_ARRAY_GNU_HACK 
#define TEMPL_HEAD template< class A, class T >
#define CLASS_NAME sc_signal_array_gnu
#define TEMPL_INST sc_signal_array_gnu<A,T>
#define ELEM_TYPE  T
#define SIGNAL_ARRAY_DELAY sc_signal_array_delay_gnu<A,T>
#else
#define TEMPL_HEAD template< class A >
#define CLASS_NAME sc_signal_array
#define TEMPL_INST sc_signal_array<A>
#define ELEM_TYPE  typename A::elemtype
#define SIGNAL_ARRAY_DELAY sc_signal_array_delay<A>
#endif

/******************************************************************************
           DEFINITIONS OF PRIVATE AND PROTECTED MEMBER FUNCTIONS
******************************************************************************/


/******************************************************************************
    get_signal() returns a reference to the pointer in the
    indiv_signals array that is indexed by physical index
    `phys_index'.  Creates the indiv_signals array if necessary.
******************************************************************************/
TEMPL_HEAD
inline sc_signal<ELEM_TYPE>*
TEMPL_INST::get_signal( int phys_index )
{
    return (sc_signal<ELEM_TYPE>*) indiv_signals[phys_index];
}

TEMPL_HEAD
TEMPL_INST&
TEMPL_INST::write( const sc_array<T>& nv )
{
    int len = nv.length();
    this->check_length(len);
    for (int i = len - 1; i >= 0; --i) {
        get_signal(i)->write(*(nv.get_data_ptr(i)));
    }
    return *this;
}

TEMPL_HEAD
TEMPL_INST&
TEMPL_INST::write( const T* nv )
{
    int len = length();
    for (int i = len - 1; i >= 0; --i) {
        get_signal(i)->write(*nv);
        nv++;
    }
    return *this;
}

/******************************************************************************
    xwrite_help() is supposed to be used by derived classes, e.g.,
    sc_logic_vector.  This is useful when the derived class defines
    a new kind of xwrite(), e.g. one that takes a string as an
    argument.  Since the present class is generic, it will need to
    have instruction (embodied in `get_val') from the derived class to
    perform the desired conversion to element type T.

    The derived class passes to xwrite_help() a function get_val,
    which takes three arguments: (1) the first argument is a reference
    to the location where the value is supposed to be stored; (2) the
    second argument is a void*, a user-defined pointer to some data
    structure where a value is to be extracted; (3) the third argument
    is the index into the data structure, starting from 0.  `nva' is
    the pointer to the data structure that will be passed as the
    second argument to get_val().

    The operation of this method is similar to xwrite(), v.s.
******************************************************************************/
TEMPL_HEAD
void
TEMPL_INST::write_help( void (*get_val)(T&, const void*, int), const void* nva,
                        bool left_to_right )
{
    T val;
    int len = length();
    if (left_to_right) {
        for (int i = len - 1, j = 0; i >= 0; --i, ++j) {
            get_val( val, nva, j );
            get_signal(i)->write(val);
        }
    } else {
        for (int i = 0; i < len; ++i) {
            get_val( val, nva, i );
            get_signal(i)->write(val);
        }
    }
}


/****************************************************************************
    This form of xwrite_help() writes a new value to a single signal
    indexed by physical index `phys_index'.
****************************************************************************/
TEMPL_HEAD
void
TEMPL_INST::write_help( int phys_index, const T& nv )
{
    // If the signal array was not formed by concatenation, then we
    // can perform the assignment in place.  Otherwise, we'd have to
    // call the individual signal's xwrite() method and let it take
    // care of itself.
    get_signal(phys_index)->write(nv);
}

/******************************************************************************
    sc_signal_array<A>::vctor( sc_array<T>* p, int l, int r )
    The "virtual" constructor.  See sc_array_base (sc_array.h) for an
    explanation of the virtual constructor usage for subvector methods.
******************************************************************************/
TEMPL_HEAD
sc_array_base*
TEMPL_INST::vctor( const sc_array_base* p, int l, int r ) const
{
    return new TEMPL_INST ( p, l, r );
}


/******************************************************************************
    This form of constructor is called only when a subranging
    operation is performed; in particular, by the "virtual
    constructor".  It does not allocate new data area; rather, it has
    a pointer into the data area of its `parent'.  The parent, in
    turn, keeps a list of children generated by subranging operations.
******************************************************************************/
TEMPL_HEAD
TEMPL_INST::CLASS_NAME( const sc_array_base* p, int l, int r )
    : sc_signal_array_base((TEMPL_INST*) p), A( p, l, r )
{
    int len = A::length();
    TEMPL_INST* q = (TEMPL_INST*) p;
    indiv_signals = new sc_signal_base*[len];
    sc_signal_array_base::_length = len;
    if (r < l) {
        for (int i = len - 1; i >= 0; --i) {
            indiv_signals[i] = q->indiv_signals[l--];
        }
    } else {
        for (int i = len - 1; i >= 0; --i) {
            indiv_signals[i] = q->indiv_signals[l++];
        }
    }
}

/****************************************************************************
    The copy constructor is not allowed.  We should however reconsider
    this since the user may forget to pass by reference when calling
    functions.
****************************************************************************/
TEMPL_HEAD
TEMPL_INST::CLASS_NAME( const TEMPL_INST& ref )
    : sc_signal_array_base(0), A(ref)
{
    assert(false);
}


/******************************************************************************
                 DEFINITION OF PUBLIC MEMBER FUNCTIONS
******************************************************************************/

TEMPL_HEAD
void
TEMPL_INST::init(sc_signal<T>* (*create_signal)(void *), void* arg)
{
    int len = length();

    sc_signal_array_base::_length = len;
    indiv_signals = new sc_signal_base*[len];
    T** data_ptrs = new T*[len];
    for (int i = len - 1; i >= 0; --i) {
        sc_signal<T>* new_sig =
            create_signal ? (*create_signal)(arg) : new sc_signal<T>((sc_object*) this);
        indiv_signals[i] = new_sig;
        data_ptrs[i] = new_sig->get_data_ptr();
    }
    A::set_data_ptrs(data_ptrs);
    free_indiv_signals = true;
}


TEMPL_HEAD
TEMPL_INST::CLASS_NAME( int len )
    : sc_signal_array_base((sc_object*) this), A( (ELEM_TYPE**) 0, len )
{
    init();
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME( const char* nm, int len )
    : sc_signal_array_base(nm, (sc_object*) this), A( (ELEM_TYPE**) 0, len )
{
    init();
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME( int len, const TEMPL_INST& ref )
    : sc_signal_array_base((sc_object*) this), A( len, (const A&) ref )
{
    sc_signal_array_base::_length = len;
    indiv_signals = new sc_signal_base*[len];
    for (int i = len - 1; i >= 0; --i) {
        indiv_signals[i] = (sc_signal_base*)(&ref[i]);
    }
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME(int len, sc_signal<T>* (*create_sig)(void *) )
    : sc_signal_array_base((sc_object*) this), A( (ELEM_TYPE **) 0, len )
{
    init(create_sig, (void*) 0);
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME(const char *nm, int len, sc_signal<T>* (*create_sig)(void *) )
    : sc_signal_array_base(nm, (sc_object*) this), A( (ELEM_TYPE**) 0, len)
{
    init(create_sig, (void *) 0);
}


TEMPL_HEAD
TEMPL_INST::CLASS_NAME( TEMPL_INST* lhs, TEMPL_INST* rhs )
    : sc_signal_array_base((sc_object*) this), A( lhs, rhs )
{
    const int rhs_len = rhs->length();
    const int len = length();
    int i;

    sc_signal_array_base::_length = len;
    indiv_signals = new sc_signal_base*[len];
    sc_signal_base** indiv_signals_skewed = indiv_signals + rhs_len;
    for (i = lhs->length() - 1; i >= 0; --i) {
        indiv_signals_skewed[i] = lhs->indiv_signals[i];
    }
    for (i = rhs_len - 1; i >= 0; --i) {
        indiv_signals[i] = rhs->indiv_signals[i];
    }
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME( TEMPL_INST* lhs, sc_signal<T>* rhs )
    : sc_signal_array_base((sc_object*) this), A( lhs, rhs->get_data_ptr() )
{
    const int len = length();
    int i;
    sc_signal_array_base::_length = len;
    indiv_signals = new sc_signal_base*[len];
    sc_signal_base** indiv_signals_skewed = indiv_signals + 1;

    for (i = lhs->length() - 1; i >= 0; --i) {
        indiv_signals_skewed[i] = lhs->indiv_signals[i];
    }
    indiv_signals[0] = rhs;
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME( sc_signal<T>* lhs, TEMPL_INST* rhs )
    : sc_signal_array_base((sc_object*) this), A( lhs->get_data_ptr(), rhs )
{
    const int len = length();
    int j;
    sc_signal_array_base::_length = len;
    indiv_signals = new sc_signal_base*[len];

    j = len - 1;
    indiv_signals[j--] = lhs;
    for ( ; j >= 0; --j) {
        indiv_signals[j] = rhs->indiv_signals[j];
    }
}

TEMPL_HEAD
TEMPL_INST::CLASS_NAME( sc_signal<T>* lhs, sc_signal<T>* rhs )
    : sc_signal_array_base(this), A( lhs->get_data_ptr(), rhs->get_data_ptr() )
{
    sc_signal_array_base::_length = 2;
    indiv_signals = new sc_signal_base*[2];
    indiv_signals[1] = lhs;
    indiv_signals[0] = rhs;
}

/******************************************************************************
    sc_signal_array<A>::~sc_signal_array() - destructor
    Responsible for cleaning up the dynamic storage allocated, including
    the subarrays that were created by others (which were kept in the
    `kids' list.
******************************************************************************/
TEMPL_HEAD
TEMPL_INST::~CLASS_NAME()
{
    // If the object resulted from concatenation/connection, then
    // the orignal_signals array must be deleted, and the indiv_signals
    // array must not be deleted since those are managed by the originals
    if (free_indiv_signals) {
        for( int i = length() - 1; i >= 0; --i )
            delete indiv_signals[i];
    }
    delete[] indiv_signals;
}


/******************************************************************************
    sc_signal_array<A>::operator[](i) returns the signal indexed by i
******************************************************************************/
#ifdef ANSI_VIRTUAL_RETURN_INHERITED_TYPE

TEMPL_HEAD
sc_signal<ELEM_TYPE>&
TEMPL_INST::operator[]( int i )
{
    sc_signal<T>* sig = get_signal(i);
    return *sig;
}

#else

//
//  This form is safer than covariance, which is not implemented in
//  most(?) compilers.  Basically, we make subscript() an auxiliary
//  virtual function, and have operator[] call subscript().
//
TEMPL_HEAD
sc_signal<ELEM_TYPE>&
TEMPL_INST::subscript( int i )
{
    sc_signal<T>* sig = get_signal(i);
    return *sig;
}    

TEMPL_HEAD
inline sc_signal<ELEM_TYPE>&
TEMPL_INST::operator[]( int i )
{
    return subscript(i);
}

#endif // ANSI_VIRTUAL_RETURN_INHERITED_TYPE


/******************************************************************************
    sub(i,j) returns a sc_signal_array<A>& that corresponds to the subrange
    (i,j) of the `parent' sc_signal_array.  Note that `i' may be greater
    than, smaller than, or equal to `j'.
******************************************************************************/
TEMPL_HEAD
inline TEMPL_INST&
TEMPL_INST::sub( int i, int j )
{
    return dynamic_cast<this_type&>(sc_array_base::sub(i,j) );
}

#ifdef DEBUG_SYSTEMC

TEMPL_HEAD
void
TEMPL_INST::print(ostream& os) const
{
    os << (A&) *this;
}

TEMPL_HEAD
void
TEMPL_INST::dump(ostream& os) const
{
    int i;
    int len = length();
    sc_signal_array_base::dump(os);
    A::dump(os);
    os << "new value = { ";
    for (i = 0; i < len - 1; ++i) {
        os << get_signal(i)->get_new_value() << ", ";
    }
    os << get_signal(i)->get_new_value() << " }" << endl;

    os << "old value = { ";
    for (int i = 0; i < len - 1; ++i) {
        os << get_signal(i)->get_old_value() << ", ";
    }
    os << get_signal(i)->get_new_value() << " }" << endl;
}

#endif

TEMPL_HEAD
void
TEMPL_INST::trace( sc_trace_file* ) const
{
    /*EMPTY*/
}

#ifdef USE_SC_SIGNAL_ARRAY_GNU_HACK

template< class A >
sc_array_base*
sc_signal_array<A>::vctor( const sc_array_base* p, int l, int r ) const
{
    return new sc_signal_array<A>( p, l, r );
}

template< class A >
inline sc_signal_array<A>&
sc_signal_array<A>::sub( int i, int j )
{
    return dynamic_cast<this_type&>( sc_array_base::sub(i,j) );
}

#endif  // USE_SC_SIGNAL_ARRAY_GNU_HACK


template< class A >
sc_array_base*
sc_signal_array<A>::new_array_vv( sc_array_base* x, sc_array_base* y )
{
    return new sc_signal_array<A>( (sc_signal_array<A>*) x, (sc_signal_array<A>*) y );
}

template< class A >
sc_array_base*
sc_signal_array<A>::new_array_vs( sc_array_base* x, void* y )
{
    return new sc_signal_array<A>( (sc_signal_array<A>*) x, (sc_signal<T>*) y );
}

template< class A >
sc_array_base*
sc_signal_array<A>::new_array_sv( void* x, sc_array_base* y )
{
    return new sc_signal_array<A>( (sc_signal<T>*) x, (sc_signal_array<A>*) y );
}

template< class A >
sc_array_base*
sc_signal_array<A>::new_array_ss( void* x, void* y )
{
    return new sc_signal_array<A>( (sc_signal<T>*) x, (sc_signal<T>*) y );
}

#undef TEMPL_HEAD
#undef TEMPL_INST
#undef ELEM_TYPE
#undef CLASS_NAME
#undef SIGNAL_ARRAY_DELAY

/*---------------------------------------------------------------------------*/

#endif


