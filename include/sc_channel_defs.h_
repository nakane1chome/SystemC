/******************************************************************************
    Copyright (c) 1996-2001 Synopsys, Inc.    ALL RIGHTS RESERVED

  The contents of this file are subject to the restrictions and limitations
  set forth in the SystemC Open Community License Software Download and
  Use License Version 1.2 (the "License"); you may not use this file except
  in compliance with such restrictions and limitations. You may obtain
  instructions on how to receive a copy of the License at
  http://www.systemc.org/. Software distributed by Original Contributor
  under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF
  ANY KIND, either express or implied. See the License for the specific
  language governing rights and limitations under the License.

******************************************************************************/

/******************************************************************************

    sc_channel_defs.h_ - Template definitions for sc_channel

    Original Author: Abhijit Ghosh. Synopsys, Inc. (ghosh@synopsys.com)

******************************************************************************/

/******************************************************************************

    MODIFICATION LOG - modifiers, enter your name, affliation and
    changes you are making here:

    Modifier Name & Affiliation: Stan Liao. Synopsys, Inc. (stanliao@synopsys.com)
    Description of Modification: Added faster update functions.

    Modifier Name & Affiliation:
    Description of Modification:

******************************************************************************/

// Based on sc_signal_defs.h_

#ifndef SC_CHANNEL_DEFS_H
#define SC_CHANNEL_DEFS_H

#include "sc_string.h"
#include "sc_dump.h"
#if defined(__HP_aCC)
#include "sc_lambda.h"
#include "sc_wait.h"
#endif

template< class T >
inline void
sc_channel<T>::sc_channel_init(const int size)
{
  buf_size = size;
  buf = buf_size ? new T[buf_size] : new T[1];
  ip = ep = 0;
  num_readable = num_read = num_written = 0;
  update_func = &sc_channel<T>::update_prop_none;
}


template< class T >
inline
sc_channel<T>::sc_channel(const int bsz)
    : sc_signal_base(this)
{
    sc_channel_init(bsz);
}

template< class T >
inline
sc_channel<T>::sc_channel(const char* nm, const int bsz)
    : sc_signal_base(nm, this)
{
    sc_channel_init(bsz);
}

template< class T >
inline
sc_channel<T>::sc_channel(sc_object* created_by, const int bsz )
    : sc_signal_base( created_by )
{
    sc_channel_init(bsz);
}

template< class T >
inline
sc_channel<T>::sc_channel( sc_object* created_by, const char *nm, const int bsz )
    : sc_signal_base(nm, created_by )
{
    sc_channel_init(bsz);
}

template< class T >
inline
sc_channel<T>::~sc_channel()
{
  delete [] buf;
}

template< class T >
inline
sc_channel<T>::operator T()
{
  return read();
}

template< class T >
inline const T&
sc_channel<T>::read()
{
  while (true) {
    if (num_readable > num_read) {
      cur_value = buf[ep];
      buf_size ? (ep = (ep + 1) % buf_size) : ep = ep;
      num_read++;
      // We need to submit this for updating, even
      // though we are not writing into the channel
      // because we want the num_readable field, etc.
      // to be updated properly.
      submit_update();
      return cur_value;
    }
    else {
      wait();
    }
  }
}

template< class T >
inline T*
sc_channel<T>::get_data_ptr(int i)
{
    return &buf[i];
}

template< class T >
inline const T*
sc_channel<T>::get_data_ptr(int i) const
{
    return &buf[i];
}

template< class T >
inline  T* 
sc_channel<T>::get_cur_val_ptr()
{
  return &cur_value;
}

template< class T >
inline const T* 
sc_channel<T>::get_cur_val_ptr() const
{
  return &cur_value;
}


template< class T >
inline sc_channel<T>&
sc_channel<T>::operator=( const T& nv )
{
  return write(nv);
}

template< class T >
inline sc_channel<T>&
sc_channel<T>::write(const T& nv)
{
  if (buf_size) { // Channel has non-zero buffers
    while (num_readable + num_written >= buf_size)  // Wait for space to become available
	wait();
    buf[ip] = nv;
    ip = (ip + 1) % buf_size;
    num_written++;
    submit_update();
    wait();  // Every write has an implicit wait
  }
  else { // Channel has zero buffers
    // When I come in here, it is guaranteed that previous write
    // has completed, i.e. the receiving process has read the channel
    buf[0] = nv;  // ip is 0
    num_written++;
    submit_update();
    wait();
    while (num_readable) // Wait for receiving process to read current value
      wait();
  }
  return *this;
}

/******************************************************************************
  Non-blocking write. What does it mean? For a channel with 
  non-zero buffers, a non-blocking write means that if the channel
  is full, the write is ignored. If the channel is
  not full, the data is accepted, but it would not really appear
  in the channel until you call wait() explicitly. You can stuff more than one
  value in the channel using nb_write, and it will all appear at the next
  wait().

  For a channel with zero buffers, there is no non-blocking write. This is
  because a channel of zero buffers means guaranteed data delivery through
  an explicit handshake.
*******************************************************************************/

template< class T >
inline sc_channel<T>&
sc_channel<T>::nb_write(const T& nv)
{
  if (buf_size) { // Channel has non-zero buffers
    if ((num_readable + num_written) >= buf_size) {
      cerr << "SystemC warning: Channel is full, written value is ignored" << endl;
      return *this;
    }
    buf[ip] = nv;
    ip = (ip + 1) % buf_size;
    num_written++;
    submit_update();
    return *this;
  }
  else { // Channel has zero buffers
    cerr << "SystemC warning: Non-blocking write on channel of zero buffers is not allowed" << endl;
    return *this;
  }
}

/*******************************************************************************
  This function should only be called after making sure that there is space in
  the buffers to be written
********************************************************************************/

template< class T>
inline void
sc_channel<T>::backdoor_write(const T& nv)
{
  buf[ip] = nv;
  buf_size ? (ip = (ip + 1) % buf_size) : ip = ip;
  num_written++;
  submit_update();
}

template< class T >
inline void
sc_channel<T>::update()
{
  num_readable = num_readable + num_written - num_read;
  num_read = 0;
  if (num_written) {
    add_dependent_procs_to_queue_default();
    num_written = 0;
    //return true;
  }
  // return false;
}

template< class T >
inline void
sc_channel<T>::update_old()
{
  /* Intentionally blank */
}

template< class T >
void
sc_channel<T>::update_prop_none(sc_signal_base* me)
{
    sc_channel<T>* Tme = static_cast<sc_channel<T>*>(me);
    Tme->num_readable += Tme->num_written - Tme->num_read;
    Tme->num_read = 0;
    Tme->num_written = 0;
}

template< class T >
void
sc_channel<T>::update_prop_async(sc_signal_base* me)
{
    sc_channel<T>* Tme = static_cast<sc_channel<T>*>(me);
    Tme->num_readable += Tme->num_written - Tme->num_read;
    Tme->num_read = 0;
    if (Tme->num_written) {
        Tme->prop_asyncs_only();
        Tme->num_written = 0;
    }
}

template< class T >
void
sc_channel<T>::update_prop_aproc(sc_signal_base* me)
{
    sc_channel<T>* Tme = static_cast<sc_channel<T>*>(me);
    Tme->num_readable += Tme->num_written - Tme->num_read;
    Tme->num_read = 0;
    if (Tme->num_written) {
        Tme->prop_aprocs_only();
        Tme->num_written = 0;
    }
}

template< class T >
void
sc_channel<T>::update_prop_both(sc_signal_base* me)
{
    sc_channel<T>* Tme = static_cast<sc_channel<T>*>(me);
    Tme->num_readable += Tme->num_written - Tme->num_read;
    Tme->num_read = 0;
    if (Tme->num_written) {
        Tme->prop_asyncs_aprocs();
        Tme->num_written = 0;
    }
}

template< class T >
sc_signal_base::UPDATE_FUNC*
sc_channel<T>::update_funcs_array() const
{
    static sc_signal_base::UPDATE_FUNC funcs[] = {
        &sc_channel<T>::update_prop_none,
        &sc_channel<T>::update_prop_async,
        &sc_channel<T>::update_prop_aproc,
        &sc_channel<T>::update_prop_both
    };
    return funcs;
}

#ifdef DEBUG_SYSTEMC

template< class T >
void
sc_channel<T>::print(ostream& os) const
{
  for (int i = 0; i<num_readable; i++)
    os << buf[i] << endl;
}

template< class T >
inline void
sc_channel<T>::dump(ostream& os) const
{
    sc_signal_base::dump(os);
    for (int i=0; i<num_readable; i++)
      os << "value[" << i <<"] = " << buf[i] << endl;
    os << "current value = " << cur_value << endl;
}

#endif

template< class T >
inline void
sc_channel<T>::trace( sc_trace_file* tf ) const
{
  char strbuf[100];
  sc_string namestr = name();
  if (buf_size) { // Has buffers
    for (int i = 0; i < buf_size; i++) {
      sprintf(strbuf, "_%d", i);
      ::sc_trace( tf, (get_data_ptr(i)), namestr + strbuf );
    }
  }
  else { // Has no buffers - trace curval
    sprintf(strbuf, "_curval");
      ::sc_trace( tf, (get_cur_val_ptr()), namestr + strbuf );
  }
}

/*---------------------------------------------------------------------------*/


template< class T >
inline ostream&
operator<<( ostream& str, const sc_channel<T>& chn )
{
    return (str << chn.read());
}

template< class T>
inline
void sc_channel<T>::decl_sensitive_async(sc_async_process_handle async) const
{
  assert (false);
}

#endif
