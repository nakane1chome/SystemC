/******************************************************************************
    Copyright (c) 1996-2001 Synopsys, Inc.    ALL RIGHTS RESERVED

  The contents of this file are subject to the restrictions and limitations
  set forth in the SystemC Open Community License Software Download and
  Use License Version 1.2 (the "License"); you may not use this file except
  in compliance with such restrictions and limitations. You may obtain
  instructions on how to receive a copy of the License at
  http://www.systemc.org/. Software distributed by Original Contributor
  under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF
  ANY KIND, either express or implied. See the License for the specific
  language governing rights and limitations under the License.

******************************************************************************/
#ifndef SC_PORT_DEFS_H
#define SC_PORT_DEFS_H

template<class T>
bool
sc_port<T>::type_check_sgnl(const sc_signal_base* sig)
{
    /* Make sure we can dynamically cast to sc_signal<T>* */
    const sc_signal<T>* q = dynamic_cast< const sc_signal<T>* >(sig);
    return (0 != q);
}

template<class T>
bool
sc_port<T>::type_check_port(const sc_port_typecheck* tc)
{
    const sc_port_typecheck_T<T>* tcT;
    tcT = dynamic_cast< const sc_port_typecheck_T<T>* >(tc);
    return (0 != tcT);
}

template<class T>
inline BIND_STATUS
sc_port<T>::bind(const sc_signal<T>& sig)
{
    const sc_signal_base& sb = sig;
    return sc_port_b::vbind(const_cast<sc_signal_base&>(sb));
}

template<class T>
inline BIND_STATUS
sc_port<T>::bind(const sc_port<T>& p)
{
    const sc_port_b& pb = p;
    return sc_port_b::vbind(const_cast<sc_port_b&>(pb));
}



template<class T>
inline
sc_in<T>::sc_in()
    : sc_port<T>(PORT_TYINFO_READ)
{
    /*EMPTY*/
}

template<class T>
inline
sc_in<T>::sc_in(const sc_signal<T>& sig)
    : sc_port<T>(sig, PORT_TYINFO_READ)
{
    /*EMPTY*/
}

template<class T>
inline
sc_in<T>::sc_in(const sc_in<T>& p)
    : sc_port<T>(p, PORT_TYINFO_READ)
{
    /*EMPTY*/
}

template<class T>
inline
sc_in<T>::sc_in(const sc_inout<T>& p)
    : sc_port<T>(p, PORT_TYINFO_READ)
{
    /*EMPTY*/
}

template<class T>
sc_in<T>::~sc_in()
{
    /*EMPTY*/
}



template<class T>
inline
sc_out<T>::sc_out()
    : sc_port<T>(PORT_TYINFO_WRITE)
{
    /*EMPTY*/
}

template<class T>
inline
sc_out<T>::sc_out(const sc_signal<T>& sig)
    : sc_port<T>(sig, PORT_TYINFO_WRITE)
{
    /*EMPTY*/
}

template<class T>
inline
sc_out<T>::sc_out(const sc_out<T>& p)
    : sc_port<T>(p, PORT_TYINFO_WRITE)
{
    /*EMPTY*/
}

template<class T>
inline
sc_out<T>::sc_out(const sc_inout<T>& p)
    : sc_port<T>(p, PORT_TYINFO_WRITE)
{
    /*EMPTY*/
}

template<class T>
sc_out<T>::~sc_out()
{
    /*EMPTY*/
}

template<class T>
inline
sc_inout<T>::sc_inout()
    : sc_port<T>(PORT_TYINFO_READWRITE)
{
    /*EMPTY*/
}

template<class T>
inline
sc_inout<T>::sc_inout(const sc_signal<T>& sig)
    : sc_port<T>(sig, PORT_TYINFO_READWRITE)
{
    /*EMPTY*/
}

template<class T>
inline
sc_inout<T>::sc_inout(const sc_inout<T>& p)
    : sc_port<T>(p, PORT_TYINFO_READWRITE)
{
    /*EMPTY*/
}

template<class T>
sc_inout<T>::~sc_inout()
{
    /*EMPTY*/
}

#endif
