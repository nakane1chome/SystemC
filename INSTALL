			INSTALL NOTES FOR SystemC Release 1.0.1

Contents:
	1. Installation Notes for Unix 


1. Installation Notes for Unix
------------------------------

System Requirements
===================

SystemC(TM) can be installed on the following UNIX platforms

  1. Sun Solaris with the GNU C++ compiler.

  2. Linux with GNU C++ compiler.

  3. Sun Solaris with Sun SC5.0 C++ compiler 
    (for issues specific to SC5.0 compiler please see README file)

  4. HP-UX with aCC C++ compiler

Sources for Compilers and Related Tools
=======================================

To build, install, and use SystemC on UNIX platforms, you need the
following tools:

  1. GNU C++ Compiler version GCC-2.95.2, Sun SC5.0, or HP aCC

  2. GNU Make (gmake)

GCC, EGCS, and gmake are free software that you can
obtain from the following sources:

  GCC		http://www.gnu.org/software/gcc/gcc.html

  gmake		http://www.gnu.org/software/make/make.html

  EGCS		http://www.egcs.cygnus.com

Basic SystemC Installation
==========================

To install SystemC on a UNIX system, do the following steps:

  1. Change to the top level directory (systemc-0.91/)

  2. Set the following environment variables:

     for gcc-2.92.2 on Solaris:

     setenv TARGET_ARCH gccsparcOS5
     setenv CXX g++

     for gcc-2.92.2 on Linux:

     setenv TARGET_ARCH linux
     setenv CXX g++
     
     for SUN SC5.0 on Solaris:

     setenv TARGET_ARCH sparcOS5
     setenv CXX CC

     for aCC on HP-UX:

     setenv TARGET_ARCH hpux10
     setenv CXX aCC
     
  3. configure the package for your system. 
     (The configure script is explained below.)

     assuming you installed the package to systemc-1.0.1 directory

	> cd systemc-1.0.1
	> ./configure

     While the 'configure' script is running, which takes a few moments, 
     prints messages to inform you of the features it is checking.
     It also detects the platform. ($TARGET_ARCH). 
     
     Note for System V users: 
     If you are using `csh' on an older version of System V, you might 
     need to use the `sh ./configure' command instead of './configure'. 
     Otherwise, `csh' will attempt to `configure' itself.

     SystemC v.1.0.1 includes fixed-point package that is not built by default.
     If the fixed-point library is required it can be built with the following
     command:

	> ./configure --with-fx-types=yes
     
     Fixed-point library requires significant time to build, and also when its
     header files are included in the application, compilation time increases.

  4. Compile the package.

	> make (builds optimized libs)
	(`make debug' for debug libs)				

     ( SC5.0 users: If for some reason the wrong compiler is called 
       you can explicitly specify compiler in command line, e.g.
       make "CXX CC -pto" clean debug
     )

  5. Install the libraries under lib-$(TARGET_ARCH)/

	> make install

Running the examples
====================

1. Change to the example directory (e.g. systemc-1.0.1/examples/pipe/ ).

2. Read the brief description of the example in the README file. 

3. Build the example using `make' and corresponding Makefile:
    for Solaris and gcc compiler: make -f Makefile.gcc 
    for Solaris and SC5 compiler: make -f Makefile.sun
    for HP-UX and aCC compiler  : make -f Makefile.hp  
    for Linux and gcc compiler  : make -f Makefile.linux

4. Run the executable.

Use the makefiles provided in  the 'examples' directory as templates for 
makefiles you need for compiling  your own examples.
	
     
Using the configure Script
==========================
 
The `configure' shell script tries to determine the correct values for
various system-dependent variables used during compilation. It uses
these values to create a `Makefile' in each directory of the package.
It also creates one or more `.h' files containing system-dependent
definitions if needed. Then, it creates the following files:

  config.status		A shell script that you can run at another time to
			recreate the current configuration.

  config.cache		A file in which the configure test results are
			saved to speed up reconfiguration.

			Data is appended to the config.cache file. 
			You can remove unwanted data.

  config.log		A file in which compiler output is saved.
			This is used to debug the configure script.

If you need to use other commands to successfully compile the package
on your system, please try to determine if the configure script can be used 
for these commands. Then, send either a diff file or instructions about
the commands you used to the email address provided in the README file.
This information will be used to improve the installation process in
the next release.

The `configure.in' file is provided in case you want to change or regenerate
the `configure' script, for example to use a newer version of `autoconf'. 
The `configure.in' file is used by the `autoconf' program to create the
`configure' script.


Compilation and Linking Options
=====================

Some systems require compilation or linking options that
the `configure' script does not define. You can define the initial values for
these options by setting them in your environment before running the
`configure' script.

Using a Bourne-compatible shell, the command line entry might be:

     > CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or, on systems that have the `env' program, the command line entry might be:

     > env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure


Optional Features
=================

To build optimized libraries (default), from the top level directory run 

> make opt

To build libraries with debug information, from the top level directory run

> make debug

followed by make, make install.

e.g. the following command will rebuild the optimized library from scratch:

> make clean opt install

By default, optimized libraries are built. 

Specifying the System Type
==========================

Some features cannot be automatically determined by `configure' unless
it can detect the host type on which the package will run.
If it prints a message that it cannot determine the host type, 
use the `--host=TYPE' option to define it. TYPE can either be a 
short system name, such as `sun4', or a canonical name with three fields:

     CPU-COMPANY-SYSTEM

See the `config.sub' file for details about the values of each field. If
the `config.sub' file is not included in the package, the package does not
need to know the host type.

If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system for which
the code is produced and the `--build=TYPE' option to select the type of
system on which you are compiling the package.


Sharing Defaults
================

You can set the default values that `configure' scripts share by
creating a site shell script called `config.site'. This file contains the
default values for variables like `CC', `cache_file', and `prefix'.
The `configure' script looks for the `config.site' file in the following 
search precedence:

  1. PREFIX/share/config.site

  2. PREFIX/etc/config.site

Alternatively, you can set the `CONFIG_SITE' environment variable to the
site script path.

Note: The `configure' script for some systems does not look for a site script.


Operation Controls
==================

The `configure' script recognizes the following options to control its
operation:

`--cache-file=FILE'
	Use and save the test results in FILE instead of
	`./config.cache'. Set FILE to `/dev/null' to disable caching
	when debugging `configure'.

`--help'
	Print a summary of `configure' options and exit.

`--quiet'
`--silent'
`-q'
	Do not print messages about checks being made.
	To suppress all normal output, redirect it to `/dev/null'.
	Error messages continue to print.

`--srcdir=DIR'
	Look for the package's source code in directory DIR.
	Typically `configure' determines the directory automatically.

`--version'
	Print the version of `autoconf' used to generate the `configure'
	script and exit.

Other options that are rarely used are available in the `configure' script.
Use the `--help' option to print a list.
 

